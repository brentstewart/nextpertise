<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nextpertise</title>
    <link>https://www.nextpertise.net/</link>
    <description>Recent content on Nextpertise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2020 08:41:13 -0400</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Updating a GNS3 Appliance File</title>
      <link>https://www.nextpertise.net/updatinggns3appliances/</link>
      <pubDate>Wed, 02 Sep 2020 08:41:13 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/updatinggns3appliances/</guid>
      <description>&lt;p&gt;This is a long post, but most of it is file contents.  Keep reading!&lt;/p&gt;
&lt;p&gt;GNS3 appliance files are descriptions of virtual machines used in network simulations.  The appliance files have suffixes of &lt;em&gt;.gns3a&lt;/em&gt; and are included with the GNS3 download.  You can update the files and create new ones.  The goal of this article is to walk through the process of working with appliance files and contributing them back to the community.&lt;/p&gt;
&lt;p&gt;On a personal note, submitting a new GNS3 appliance was the first time I contributed to an open-source project.  I&amp;rsquo;m still learning, but a few years ago I knew &lt;em&gt;nothing&lt;/em&gt;.  Jeremy Grossman, with GNS3, was patient and helped me understand the process of using Git.  Contributing - even in this minor way - was a real high for me and I&amp;rsquo;d love for you to be able to share that feeling and contribute to this and other projects.  GNS3a was my &amp;ldquo;gateway drug&amp;rdquo; into being a contributor and not just a consumer of open source.&lt;/p&gt;
&lt;p&gt;One of the files I&amp;rsquo;ve contributed is the Security Onion appliance.  Security Onion is a Linux distribution that focuses on security tools.  Below is the current version (9/1/20) of the GNS3A file.  Before we create a new appliance, let&amp;rsquo;s update this one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;Security Onion&amp;rdquo;,&lt;br&gt;
&amp;ldquo;category&amp;rdquo;: &amp;ldquo;guest&amp;rdquo;,&lt;br&gt;
&amp;ldquo;description&amp;rdquo;: &amp;ldquo;Security Onion is a Linux distro for intrusion detection, network security monitoring, and log management. It’s based on Ubuntu and contains Snort, Suricata, Bro, OSSEC, Sguil, Squert, ELSA, Xplico, NetworkMiner, and many other security tools. The easy-to-use Setup wizard allows you to build an army of distributed sensors for your enterprise in minutes!&amp;quot;,&lt;br&gt;
&amp;ldquo;vendor_name&amp;rdquo;: &amp;ldquo;Security Onion Solutions, LLC&amp;rdquo;,&lt;br&gt;
&amp;ldquo;vendor_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://securityonion.net/%22,&#34;&gt;https://securityonion.net/&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;documentation_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://github.com/Security-Onion-Solutions/security-onion/wiki%22,&#34;&gt;https://github.com/Security-Onion-Solutions/security-onion/wiki&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;product_name&amp;rdquo;: &amp;ldquo;Security Onion&amp;rdquo;,&lt;br&gt;
&amp;ldquo;product_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://securityonion.net/%22,&#34;&gt;https://securityonion.net/&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;registry_version&amp;rdquo;: 3,&lt;br&gt;
&amp;ldquo;status&amp;rdquo;: &amp;ldquo;stable&amp;rdquo;,&lt;br&gt;
&amp;ldquo;maintainer&amp;rdquo;: &amp;ldquo;Brent Stewart&amp;rdquo;,&lt;br&gt;
&amp;ldquo;maintainer_email&amp;rdquo;: &amp;ldquo;X@X&amp;rdquo;,&lt;br&gt;
&amp;ldquo;usage&amp;rdquo;: &amp;ldquo;Your default account will have sudo priviledges.  Squil and Squert username and password are configured in the Setup wizard.  MySQL root is set to null.  For more info see &lt;a href=&#34;https://github.com/Security-Onion-Solutions/security-onion/wiki/Passwords.%22,&#34;&gt;https://github.com/Security-Onion-Solutions/security-onion/wiki/Passwords.&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;symbol&amp;rdquo;: &amp;ldquo;securityonion-logo.png&amp;rdquo;,&lt;br&gt;
&amp;ldquo;qemu&amp;rdquo;:&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;adapter_type&amp;rdquo;: &amp;ldquo;e1000&amp;rdquo;,&lt;br&gt;
&amp;ldquo;adapters&amp;rdquo;: 2,&lt;br&gt;
&amp;ldquo;ram&amp;rdquo;: 3072,&lt;br&gt;
&amp;ldquo;arch&amp;rdquo;: &amp;ldquo;x86_64&amp;rdquo;,&lt;br&gt;
&amp;ldquo;console_type&amp;rdquo;: &amp;ldquo;vnc&amp;rdquo;,&lt;br&gt;
&amp;ldquo;kvm&amp;rdquo;: &amp;ldquo;allow&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
&amp;ldquo;images&amp;rdquo;:&lt;br&gt;
[&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-16.04.6.1.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;16.04.6.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;ca835cef92c2c0daafa16e789c343d1d&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 2020605952,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v16.04.5.3_20181010/securityonion-16.04.6.1.iso&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-16.04.5.3.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;16.04.5.3&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;886b369548c9c3841bc820cc3ab02bd9&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 1895825408,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v16.04.5.3_20181010/securityonion-16.04.5.3.iso&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.4.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;14.04.5.4&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;9c7cab756b675beb10de4274a3ad3bc6&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 1874853888,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v14.04.5.4_20171031/securityonion-14.04.5.4.iso&amp;rdquo;&lt;br&gt;
},
{
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.3.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;14.04.5.3&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;fb80ccb2d3c0f3f511823fa5858f87d1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 1889533952,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v14.04.5.4_20171031/securityonion-14.04.5.3.iso&amp;rdquo;&lt;br&gt;
},
{
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;1.0&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;3411a599e822f2ac6be560a26405821a&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 197120,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://sourceforge.net/projects/gns-3/files/Empty%20Qemu%30disk/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://sourceforge.net/projects/gns-3/files/Empty%20Qemu%20disk/empty30G.qcow2/download&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
],&lt;br&gt;
&amp;ldquo;versions&amp;rdquo;:&lt;br&gt;
[&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;16.04.6.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;:&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-16.04.6.1.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;16.04.5.3&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;:&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-16.04.5.3.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;14.04.5.4&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;:&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.4.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;14.04.5.3&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.3.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
} &lt;br&gt;
]&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most of this is pretty straight forward.  The structure looks like:&lt;/p&gt;
&lt;p&gt;A descriptive section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name, Description, usage, vendor and product information can be taken from the source website&lt;/li&gt;
&lt;li&gt;Category can be guest, router, firewall, or multilayer_switch.&lt;/li&gt;
&lt;li&gt;Maintainer is the creator.  Notice I&amp;rsquo;ve replaced my email for publication to the web.&lt;/li&gt;
&lt;li&gt;Symbol should be a SVG file with a maximum height of 70px.  Either reference an existing symbol or add a new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next is the Qemu section that describes how the VM environment should be constructed.  This is straightforward as well.  Console types are VNC or telnet.  You may have to try different ethernet adapters to see what works, but I recommend starting with the Intel e1000 because this model is supported by most VMs.  Using a para-virtualized adapter may give better performance, so you may also want to try vmxnet3.  Most architectures will be 64bit and RAM requirements will usually be on the website.&lt;/p&gt;
&lt;p&gt;That leaves two sections - Images and Versions.  There should be a matching entry in both places.  The images section is a list of virtual hard drives and CD-ROM images to use in the VM and includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filename, version, and download URL&lt;/li&gt;
&lt;li&gt;md5sum - most Linux distributions include the command &lt;strong&gt;md5sum&lt;/strong&gt;.  Download the appliance ISO and use &lt;strong&gt;md5sum myfile.iso&lt;/strong&gt; to generate a checksum.  Most Linux distributions include the checksum on their download page as well, so double check your version.&lt;/li&gt;
&lt;li&gt;filesize is reported on Linux using &lt;strong&gt;ls -l&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If an empty drive image is needed, GNS3 provides them in different sizes on Github (as referenced above)
The versions section needs to have a name that matches the version number provided in the images section.  That ties the images to the correct version.
Notice that I&amp;rsquo;ve set this up to boot to an empty machine and prompt the user to do the installation.  I could also supply a QCOW2 file with Security Onion pre-installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s update this file.  There are a lot of old images listed as options.  I&amp;rsquo;ll remove the image and version sections for 14.04.5.3 and add the most recent (16.04.7.1).  That will leave users with the last 14.x and two images in 16.x including the latest.  Whether dealing with a distribution or a commercial image, changes made between versions may introduce new processes or bugs so leaving some older images gives users an easy workaround.  Here&amp;rsquo;s the updated file.  Scroll below the output for a discussion of submitting this back to the project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;Security Onion&amp;rdquo;,&lt;br&gt;
&amp;ldquo;category&amp;rdquo;: &amp;ldquo;guest&amp;rdquo;,&lt;br&gt;
&amp;ldquo;description&amp;rdquo;: &amp;ldquo;Security Onion is a Linux distro for intrusion detection, network security monitoring, and log management. It’s based on Ubuntu and contains Snort, Suricata, Bro, OSSEC, Sguil, Squert, ELSA, Xplico, NetworkMiner, and many other security tools. The easy-to-use Setup wizard allows you to build an army of distributed sensors for your enterprise in minutes!&amp;quot;,&lt;br&gt;
&amp;ldquo;vendor_name&amp;rdquo;: &amp;ldquo;Security Onion Solutions, LLC&amp;rdquo;,&lt;br&gt;
&amp;ldquo;vendor_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://securityonion.net/%22,&#34;&gt;https://securityonion.net/&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;documentation_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://github.com/Security-Onion-Solutions/security-onion/wiki%22,&#34;&gt;https://github.com/Security-Onion-Solutions/security-onion/wiki&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;product_name&amp;rdquo;: &amp;ldquo;Security Onion&amp;rdquo;,&lt;br&gt;
&amp;ldquo;product_url&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;https://securityonion.net/%22,&#34;&gt;https://securityonion.net/&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;registry_version&amp;rdquo;: 3,&lt;br&gt;
&amp;ldquo;status&amp;rdquo;: &amp;ldquo;stable&amp;rdquo;,&lt;br&gt;
&amp;ldquo;maintainer&amp;rdquo;: &amp;ldquo;Brent Stewart&amp;rdquo;,&lt;br&gt;
&amp;ldquo;maintainer_email&amp;rdquo;: &amp;ldquo;&lt;a href=&#34;mailto:brent@stewart.tc&#34;&gt;brent@stewart.tc&lt;/a&gt;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;usage&amp;rdquo;: &amp;ldquo;Your default account will have sudo priviledges.  Squil and Squert username and password are configured in the Setup wizard.  MySQL root is set to null.  For more info see &lt;a href=&#34;https://github.com/Security-Onion-Solutions/security-onion/wiki/Passwords.%22,&#34;&gt;https://github.com/Security-Onion-Solutions/security-onion/wiki/Passwords.&amp;quot;,&lt;/a&gt;&lt;br&gt;
&amp;ldquo;symbol&amp;rdquo;: &amp;ldquo;securityonion-logo.png&amp;rdquo;,&lt;br&gt;
&amp;ldquo;qemu&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;adapter_type&amp;rdquo;: &amp;ldquo;e1000&amp;rdquo;,&lt;br&gt;
&amp;ldquo;adapters&amp;rdquo;: 2,&lt;br&gt;
&amp;ldquo;ram&amp;rdquo;: 3072,&lt;br&gt;
&amp;ldquo;arch&amp;rdquo;: &amp;ldquo;x86_64&amp;rdquo;,&lt;br&gt;
&amp;ldquo;console_type&amp;rdquo;: &amp;ldquo;vnc&amp;rdquo;,&lt;br&gt;
&amp;ldquo;kvm&amp;rdquo;: &amp;ldquo;allow&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
&amp;ldquo;images&amp;rdquo;: [&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-16.04.7.1.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;16.04.7.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;6bd811a05c1ec7973b8fca5c34cec13e&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 2132803584,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v16.04.7.1_20181010/securityonion-16.04.7.1.iso&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-16.04.6.1.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;16.04.6.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;ca835cef92c2c0daafa16e789c343d1d&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 2020605952,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v16.04.6.1_20181010/securityonion-16.04.6.1.iso&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.4.iso&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;14.04.5.4&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;9c7cab756b675beb10de4274a3ad3bc6&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 1874853888,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://github.com/Security-Onion-Solutions/security-onion/releases/download/v14.04.5.4_20171031/securityonion-14.04.5.4.iso&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;filename&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;1.0&amp;rdquo;,&lt;br&gt;
&amp;ldquo;md5sum&amp;rdquo;: &amp;ldquo;3411a599e822f2ac6be560a26405821a&amp;rdquo;,&lt;br&gt;
&amp;ldquo;filesize&amp;rdquo;: 197120,&lt;br&gt;
&amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;https://sourceforge.net/projects/gns-3/files/Empty%20Qemu%30disk/&amp;quot;,&lt;br&gt;
&amp;ldquo;direct_download_url&amp;rdquo;: &amp;ldquo;https://sourceforge.net/projects/gns-3/files/Empty%20Qemu%20disk/empty30G.qcow2/download&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
],&lt;br&gt;
&amp;ldquo;versions&amp;rdquo;: [&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;16.04.7.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-16.04.7.1.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;16.04.6.1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-16.04.6.1.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;name&amp;rdquo;: &amp;ldquo;14.04.5.4&amp;rdquo;,&lt;br&gt;
&amp;ldquo;images&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;hda_disk_image&amp;rdquo;: &amp;ldquo;empty30G.qcow2&amp;rdquo;,&lt;br&gt;
&amp;ldquo;cdrom_image&amp;rdquo;: &amp;ldquo;securityonion-14.04.5.4.iso&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
]&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;In GNS3, go to File &amp;gt; Import Appliance and make sure that your appliance imports correctly.  GNS3 will provide guidance if there&amp;rsquo;s a formatting error.  Looking at the JSON above, you can imagine that a common mistake is unmatched brackets!&lt;/p&gt;
&lt;p&gt;If the GNS3a file loads, test it by creating an instance.  You need to test at least any new versions you added.  Make sure the appliance boots without error and that expected interfaces are available.&lt;/p&gt;
&lt;h2 id=&#34;submit-a-pull-request&#34;&gt;Submit a Pull Request&lt;/h2&gt;
&lt;p&gt;Once the pieces are working, submit the appliance to the community by cloning the GNS3-registry on Github and adding in your file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/GNS3/gns3-registry.git&#34;&gt;https://github.com/GNS3/gns3-registry.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve &lt;em&gt;already&lt;/em&gt; cloned it, make sure that your branch is up to date.  &lt;em&gt;Upstream&lt;/em&gt; is the original source (in this case the GNS3 copy).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git fetch upstream&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two Python programs are included in the repo.  Run them both on your copy before continuing.  These are QA processes that look for issues before you submit.  They &lt;em&gt;will&lt;/em&gt; take a little time to run.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pip3 install -r requirements.txt   # this does &lt;strong&gt;pip3 install jsonschma&lt;/strong&gt; and &lt;strong&gt;pip3 install pycurl&lt;/strong&gt;&lt;br&gt;
python3 check.py&lt;br&gt;
python3 check_url.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next push your local copy to your github copy.  In Github terms, &lt;em&gt;origin&lt;/em&gt; is your copy on Github, and &lt;em&gt;master&lt;/em&gt; is the local copy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add .&lt;br&gt;
git commit -m &amp;ldquo;Updated Security Onion&amp;rdquo;&lt;br&gt;
git push -f origin master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we have an up to date local copy of the gns3-registry that includes our updated gns3a appliance and we&amp;rsquo;ve updated our fork on Github.  Next, we offer our update to the project via a &lt;em&gt;Pull Request&lt;/em&gt;.  You are going to be one of the cool kids!
&lt;img src=&#34;https://www.nextpertise.net/PullRequest.png#center&#34; alt=&#34;Pull Request&#34;&gt;
Go to the gns3-registry repository on Github and select the Pull Requests tab and click the big green &lt;strong&gt;New pull request&lt;/strong&gt; button. Under Compare, select the link to &lt;em&gt;compare across forks&lt;/em&gt; (since your copy is a fork) and select your fork.  It should show you the changes to files so take a moment to digest that and make sure this PR is doing what you want.  Finally, submit the Pull Request.  Github will email you when there&amp;rsquo;s an update to the request.  If the GNS3 team has a question, they&amp;rsquo;ll submit a comment on the PR and leave it open for you to resolve.  Otherwise, it will get merged in and all the other GNS3 users will be able to enjoy your hard work!&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH Part 4 - Port Forwarding</title>
      <link>https://www.nextpertise.net/using_ssh4-port_forwarding/</link>
      <pubDate>Sun, 30 Aug 2020 15:12:24 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/using_ssh4-port_forwarding/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/SSH-Tunnel.png#floatright&#34; alt=&#34;SSH Tunnel&#34;&gt;&lt;strong&gt;Problem&lt;/strong&gt;: We want to access an internal web page that is behind a firewall.  We have SSH access to a server behind the firewall, and &lt;em&gt;that&lt;/em&gt; server can see the intranet.&lt;/p&gt;
&lt;p&gt;SSH has a solution for this type of problem - tunneling.  Most people use SSH as a telnet replacement &amp;ndash; as just a way to get a terminal session.  SSH is capable of much more than mere terminal access.  There are several ways to accomplish out goal, so let&amp;rsquo;s sort through them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This article demonstrates an obscure and useful way to use a tool, but raises two important points.  First, don&amp;rsquo;t take any part of this to be an example of good design.  I&amp;rsquo;ve constructed a case that allows demonstrating a technique.  Second, using the tool this way may short-circuit your organizations&amp;rsquo; security design and so security folks may want to mitigate against allowing this use.&lt;/p&gt;
&lt;h2 id=&#34;option-1---ssh-from-the-client&#34;&gt;Option 1 - SSH from the client&lt;/h2&gt;
&lt;p&gt;For this to work, the intermediate host (10.0.0.22 in this case) needs to allow itself to pass ports.  Open the &lt;strong&gt;sshd_config&lt;/strong&gt; file and set GatewayPorts to &lt;em&gt;yes&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/ssh/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;# edit line to remove remark and change to yes&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;GatewayPorts yes&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, ssh from the external device to the intermediate device and link a local port to an address and port reachable from the ssh target.  In the example below, we connect into 2.2.2.2 (&amp;ldquo;server&amp;rdquo;) and then we map &lt;em&gt;local (on the external device)&lt;/em&gt; port 8080 to a target reachable from the server - webserver port 80.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh -L 8080:10.0.0.80:80 2.2.2.2&lt;/strong&gt;
&lt;em&gt;# -L maps a local port&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# 8080:10.0.0.80:80 ties port 8080 to a remote destination of 10.0.0.80:80&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# 2.2.2.2 is the ssh target&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After running this command, you&amp;rsquo;ll be asked to log into the ssh server normally.  Once logged in, open a web browser on the external client to http://localhost:8080 and the remote internal webpage will be visible.&lt;/p&gt;
&lt;h2 id=&#34;option-2---ssh-from-the-inside-reverse-tunnel&#34;&gt;Option 2 - SSH from the inside (Reverse Tunnel)&lt;/h2&gt;
&lt;p&gt;Another option is to make a port available to a remote computer.  In this case, we start ssh from the server and connect to the remote client (which we&amp;rsquo;ll imagine is me.myself.com).  Again, the command prompts us to login to the remote machine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh -R 8080:10.0.0.80:80 me.myself.com&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point the remote user can open a browser to http://localhost:8080 and see the internal page.  In fact, the firewall may allow ssh traffic to originate from the webserver.  In that case the reverse tunnel could be established from the webserver without having to use an intermediate host.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh -R 8080:localhost:80 me.myself.com&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;option-3---http-from-the-outside&#34;&gt;Option 3 - HTTP from the outside&lt;/h2&gt;
&lt;p&gt;The final scenario to consider is to allow the server to listen on a port and forward traffic to the intranet server.  Obviously this would require the firewall configuration to allow some port in addition to tcp/22 (SSH) into the server.  In this case, we&amp;rsquo;ll ask the server to listen on port 8001 and forward that traffic to the internal web server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ssh -R 8001:10.0.0.80:80 localhost&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client can now browse to http://2.2.2.2:8001 to see the webpage.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;SSH port forwarding and reverse SSH connections are powerful tools that can circumvent network policy.  Being familiar with this use may be helpful in troubleshooting, and may be important to you when considering how ssh servers are deployed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNS Services</title>
      <link>https://www.nextpertise.net/dnsservices/</link>
      <pubDate>Wed, 26 Aug 2020 12:01:51 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/dnsservices/</guid>
      <description>&lt;p&gt;This post is to continue the conversation started in &lt;a href=&#34;https://www.nextpertise.net/ReasonablySecureBrowsing&#34;&gt;Reasonably Secure Browsing&lt;/a&gt;.  Like that post, this is intended for non-industry friends.  My goal is to have a set of references for the people I care about, but who don&amp;rsquo;t share my love of technology.  For the gurus out there, understand that this leaves out a lot of details for the sake of clarity for the target audience.&lt;/p&gt;
&lt;p&gt;The first post covered browser settings that balanced security, privacy concerns, and convenience.  Another way to improve your security is use an alternative DNS provider.  DNS (Domain Name System) is an under-the-hood service that connects a name like &amp;ldquo;amazon.com&amp;rdquo; with a number like 176.32.103.205.  Think about your mobile phone.  We rarely memorize peoples telephone numbers anymore, we just call &amp;ldquo;Brent&amp;rdquo; or choose the picture that matches the person we want to call.  The phone translates that into a telephone number.  DNS is a centralized process that translates a name to a number to make the internet more &amp;ldquo;human friendly&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Why should you care?  Three reasons - speed, security, and privacy.  DNS is typically set up by your Internet provider.  Sometimes these implementations are the sources of problems, so changing the default DNS will give you a more stable (and sometimes faster) experience.  Anyone &amp;ldquo;listening&amp;rdquo; to your traffic can easily make a list of where you visit by tracking DNS requests.  This could be someone snooping on a shared wifi at the coffee shop, or it could be your ISP (in fact, ISPs sometimes redirect your traffic to internet locations they control for their own benefit).&lt;/p&gt;
&lt;p&gt;There are a set of alternative DNS providers that provide free services that are unfiltered and private.  I recommend that you consider one of these.  They&amp;rsquo;re all good, but I&amp;rsquo;ve listed them in the order of my preference.&lt;/p&gt;
&lt;p&gt;To enable, go into your router and change the DNS setting to the IP provided (the exact instructions vary by router).  At home, this is a reasonable step to protect you and your family.  If you travel, these providers also support a variety of options to encrypt your request, including DNS over HTTPS (DoH).  I recommend using DoH within Firefox for devices that leave the house.&lt;/p&gt;
&lt;p&gt;Firefox can encrypt your DNS traffic from &amp;ldquo;snoopers&amp;rdquo;.  Go to the menu button and choose &lt;em&gt;preferences&lt;/em&gt; and then &lt;em&gt;Network Settings&lt;/em&gt;.  Click &lt;em&gt;Enable DNS over HTTPS&lt;/em&gt; and then choose a provider or select &amp;ldquo;Custom&amp;rdquo; and type in the IP address (included below).&lt;/p&gt;
&lt;h2 id=&#34;opendns-20867222222---best-for-home-use&#34;&gt;OpenDNS (208.67.222.222) - Best for home use&lt;/h2&gt;
&lt;p&gt;OpenDNS is a great choice.  By default, their free service is excellent.  It recognizes many cases where you&amp;rsquo;ve been directed to a malicious site, and keeps you out of trouble by blocking it.  OpenDNS is owned by Cisco, and it benefits from the huge investments they&amp;rsquo;ve made in Internet security.  It also blocks adult content by default.  You can create an account and customize your home&amp;rsquo;s experience - for instance, do you want to block Gambling or Tobacco advertising?  These settings are tied to your home IP, so your laptop goes back to the &amp;ldquo;default&amp;rdquo; when not at home.  Especially for public places, like church wifi, or for a home with children this allows you to control what portion of the Internet is available to users.&lt;/p&gt;
&lt;h2 id=&#34;cloudflare-unfiltered-1111-malware-blocking-1112-malware-and-adult-content-1113---best-for-travelers&#34;&gt;Cloudflare (unfiltered 1.1.1.1, malware blocking 1.1.1.2, malware and adult content 1.1.1.3) - best for travelers&lt;/h2&gt;
&lt;p&gt;Cloudflare is very easy to setup.  Use the IP address that matches your use case.  These settings can carry over when you are away from home if you change them on your device.  There&amp;rsquo;s also an app that provides this service no matter where you are (just for mobile with Windows and Mac coming soon).  Cloudflare has good settings for most cases, is easy to setup, and has the mobile apps, but lacks the customization of OpenDNS.&lt;/p&gt;
&lt;h2 id=&#34;quad9-9999&#34;&gt;Quad9 (9.9.9.9)&lt;/h2&gt;
&lt;p&gt;Quad9 provides a service that is very similar to Cloudflare 1.1.1.2 - just set the DNS and forget it and it provides DNS with malicious sites blocked.  My experience with Quad9 has been largely indistinguishable from Cloudflare or OpenDNS with default settings, when testing blocking or response speed.  However, Quad9 doesn&amp;rsquo;t have the customization of OpenDNS or the apps that Cloudflare has.&lt;/p&gt;
&lt;h2 id=&#34;google-8888&#34;&gt;Google (8.8.8.8)&lt;/h2&gt;
&lt;p&gt;This has been a popular alternative for the geek set for a long time.  It&amp;rsquo;s easy to remember and it provides an &amp;ldquo;unfiltered&amp;rdquo; response.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Using one of these services helps to protect your home.  I use OpenDNS at home and have customized it to filter out a range of categories.  It doesn&amp;rsquo;t block everything on the Internet, but it addresses some of the obvious sites and it helps prevent &amp;ldquo;oops&amp;rdquo; experiences.  It seems to help with advertising too.  I use Cloudflare on my office network and it does a great job as well.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve benefitted from the &amp;ldquo;Reasonably Secure Browsing&amp;rdquo; discussion, this is another &amp;ldquo;reasonable&amp;rdquo; step that you can take to improve your families Internet experience.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alternate GNS3 Symbols</title>
      <link>https://www.nextpertise.net/gns3symbols/</link>
      <pubDate>Fri, 21 Aug 2020 13:18:28 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/gns3symbols/</guid>
      <description>&lt;p&gt;GNS3 is a graphical network simulation tool.  Imagine something like Visio that let you place network devices and draw connections, then boot them up and interact with them.  The screenshot above is a simulation I ran that used five Cisco CSR routers to demonstrate BGP for a class.  The devices typically run in KVM or Docker, but can use VMWare or Virtualbox.  This article assumes that you are familiar with the project.
&lt;img src=&#34;https://www.nextpertise.net/GNS3Lab.png#center&#34; alt=&#34;GNS3 Screen Capture&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve found GNS3 to be an invaluable tool.  I used it to do labs while writing books years ago.  I&amp;rsquo;ve used it to teach networking and security to the people who work with me, and to do labs to teach myself.  I&amp;rsquo;ve also used it to simulate an environment and walk through a change process to practice, verify steps, and perfect configuration updates.&lt;/p&gt;
&lt;p&gt;GNS3 originally had one set of symbols that could be used for the various virtual machines.  The switches labeled &amp;ldquo;Home&amp;rdquo; and &amp;ldquo;Remote&amp;rdquo; in the screenshot are in this style.  The GNS3 team added a family of symbols labeled &amp;ldquo;Affinity&amp;rdquo; (the CSRs use this type of symbol) which is very clean and modern.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/untangle2.png#floatright&#34; alt=&#34;Untangle&#34;&gt;
&lt;img src=&#34;https://www.nextpertise.net/vyos.png#floatright&#34; alt=&#34;VyOS&#34;&gt;
The Affinity symbols work very well for most of my labs, but sometimes I need to differentiate between a &lt;em&gt;Cisco&lt;/em&gt; router and &lt;em&gt;VyOS&lt;/em&gt;.  Sometimes you just need to call out a particular device.  In fact, one of the symbols in my library is a big red X that I used to denote a server in a special project.  For this reason, I created a library of symbols using vendor/project logos.  The link for that project is in the reference section.  Here are two sample icons I created.&lt;/p&gt;
&lt;p&gt;Per the specifications posted in the GNS3 Registry project, symbols should be SVG less than 70 pixels tall.  I&amp;rsquo;ve found that PNG with transparent background also looks good.  I typically use the scaling feature in GIMP (&lt;em&gt;Image&amp;gt;Scale Image&lt;/em&gt;) to adjust image size.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to use these symbols, clone my repository.  In GNS3, you can update the device template (and thus all future devices) by right clicking in the device selection window, choosing &lt;em&gt;Configure Template&lt;/em&gt;, and then browsing for the Symbol.  Alternatively, you can use a symbol for one instance by right clicking on the VM in the topology and choosing &lt;em&gt;Change Symbol&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I add to the repository periodically and I&amp;rsquo;d love to have contributions from you.  You can also submit them to the GNS3 project as a pull request on the &lt;em&gt;GNS3 Registry&lt;/em&gt; project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Team Documentation Using GitHub and Pandoc</title>
      <link>https://www.nextpertise.net/pandoc/</link>
      <pubDate>Tue, 18 Aug 2020 13:56:30 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/pandoc/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://thumbs.gfycat.com/GargantuanScaryAnura-max-1mb.gif#floatleft&#34; alt=&#34;Dean Wormer&#34;&gt;
Building team documentation is a critical part of IT.  After all, you can&amp;rsquo;t manage what you don&amp;rsquo;t know about.  You can&amp;rsquo;t follow policies you don&amp;rsquo;t know about.  It&amp;rsquo;s common in IT that documentation is divided between shared files and updated copies on individual laptops.  The problem is that it&amp;rsquo;s difficult for any one person to collect all the most recent files.  I&amp;rsquo;ve learned a lot about Git in the last few years and I wanted to explore whether it could be an answer.&lt;/p&gt;
&lt;p&gt;Various attempts have been made to resolve this versioning issue.  One common approach is to ask everyone to contribute their individual documents to a shared folder.  This has the advantage that everyone can be a contributor and the files are accessible and easy to update.  However, different team members may update the file at different times and in different ways and there&amp;rsquo;s no clear editorial process to bring everything back together.  A second approach is to have a strict editorial process &amp;ndash; maybe a dedicated person who &amp;ldquo;checks in&amp;rdquo; so the boss can &amp;ldquo;approve&amp;rdquo;.  There&amp;rsquo;s typically a drop box for proposed documents and then a locked-down directory with a PDF for the final version.  This process can take a while, can occupy a person, and is discouraging to contributors.&lt;/p&gt;
&lt;p&gt;Using Git has a lot of advantages.  Everyone can have an up-to-date copy using &lt;strong&gt;git clone&lt;/strong&gt; and &lt;strong&gt;git fetch&lt;/strong&gt;.  Team members can edit documents and submit them as Pull Requests (PRs).  There&amp;rsquo;s a built in process for the repo owner to accept or reject those changes.  GitHub already has an issues process that would make it easy to note deficiencies and discrepancies.  Finally, Github repos can be marked private, are available even when internal systems are down, and maintain historical versions.&lt;/p&gt;
&lt;p&gt;Having a repository of Word files would be useful, but formatting can be maddening.  All those files will use different fonts, sizes, margins, colors, headings . . . sigh.  Another problem is that you&amp;rsquo;ll have a directory full of files with names like &lt;strong&gt;ITPROC1.docx&lt;/strong&gt;.  As an administrator, I would like to have one place where I can easily browse through documentation and be confident that I&amp;rsquo;m up to date!&lt;/p&gt;
&lt;p&gt;My proposal is to use Markdown files for documentation.  They&amp;rsquo;re easy to create and reasonably readable in a text editor.  As pushes or PRs occur, these files can be combined into a PDF using &lt;strong&gt;pandoc&lt;/strong&gt;.  I&amp;rsquo;ve built a demonstration of this in the referenced Github repository.  There&amp;rsquo;s a Continuous Integration (CI) process built out of Github Actions.  Setting that up adds a &lt;em&gt;.github/workflows/name.yaml&lt;/em&gt; file to your repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be careful!&lt;/strong&gt;  &lt;em&gt;I originally built my repository locally and pushed it to Github, then used the Github actions &amp;ldquo;wizard&amp;rdquo; to setup the CI process.  That builds an initial configuration file for you and puts it into your repository.  The next time I pushed, this directory and file were wiped out!  The result was that the CI process didn&amp;rsquo;t run and it took me a while to understand what I had done.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my YAML file to handle the CI process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name: CI&lt;br&gt;
on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;push:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;branches: [ master ]&lt;br&gt;
pull_request:&lt;br&gt;
branches: [ master ]&lt;br&gt;
jobs:&lt;br&gt;
build:&lt;br&gt;
runs-on: ubuntu-latest&lt;br&gt;
steps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;- uses: actions/checkout@v2&lt;br&gt;
- run: echo &amp;ldquo;::set-env name=FILELIST::$(printf &amp;lsquo;%s &#39; *.md)&amp;rdquo;&lt;br&gt;
- uses: docker://pandoc/latex:2.9&lt;br&gt;
with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;args: &amp;ndash;toc &amp;ndash;output=output/result.pdf ${{env.FILELIST}}&lt;br&gt;
- uses: actions/upload-artifact@master&lt;br&gt;
with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name: output&lt;br&gt;
path: output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/githubartifact.png#floatright&#34; alt=&#34;Artifact&#34;&gt;
This process will pull all the md files into a PDF, ordering them alphabetically.  It will then add a table of contents to the front, based on headings found in the files.  I&amp;rsquo;ve cribbed this together using the pandoc example on github (referenced below).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.nextpertise.net/result.pdf&#34;&gt;result&lt;/a&gt; is a zip file named &lt;em&gt;output&lt;/em&gt; that will show up under Actions.  The latest run should be at the top of the screen, and clicking the link should show you the Artifacts produced.  Note that if there are problems with the CI process, you can review those by looking at the &lt;em&gt;build&lt;/em&gt; section.  You could add to the CI process to have the output file emailed to you or stored in a convenient place.  For instance, you could send the PDF directly to your Kindle!  I&amp;rsquo;ve chosen not to bother with that since this is a public repository.  Another idea would be to have this process output HTML files that could be placed on a local web server.  Pandoc can handle PDF, HTML, EPUB, and a lot of other formats.&lt;/p&gt;
&lt;p&gt;My repository is public and you are welcome to clone it and play with this process.  The markdown files currently in place are filled with Lorem Ipsum nonsense but they give you a sense of how it might look as a finished PDF.  I&amp;rsquo;d like to build in an automatic way to add a cover page.  The Pandoc documentation also references using a CSS file to dictate formatting when outputting to EPUB, so I&amp;rsquo;d like to see if I could get that supported in PDF.  PRs are welcome if you have any ideas!&lt;/p&gt;
&lt;p&gt;What do you think?  Would this be a good way for your IT group to maintain documentation?  I&amp;rsquo;d welcome your comments in the section below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Most Commonly Used Linux Commands</title>
      <link>https://www.nextpertise.net/mostcommonlinuxcommand/</link>
      <pubDate>Mon, 17 Aug 2020 12:47:16 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/mostcommonlinuxcommand/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve seen some articles recently on &amp;ldquo;Linux commands frequently used by admins&amp;rdquo;  or &amp;ldquo;15 commonly used Linux commands&amp;rdquo;, which got me thinking . . . what commands do I use most frequently?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;history&lt;/strong&gt; shows us a list of recent commands starting with a sequence number (example below).  But I just want the command!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:&lt;strong&gt;~$ history&lt;/strong&gt;&lt;br&gt;
1  mkdir git&lt;br&gt;
2  cd git&lt;br&gt;
3  git clone &lt;a href=&#34;https://github.com/brentstewart/Mint-install.git&#34;&gt;https://github.com/brentstewart/Mint-install.git&lt;/a&gt;&lt;br&gt;
. . .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Piping this output into &lt;strong&gt;awk&lt;/strong&gt; allows me to filter this down to the first word.  &lt;strong&gt;Awk&lt;/strong&gt; can pull a field out; in this case the sequence number is field 1 and the command is field 2.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;history | awk &amp;lsquo;{print $2}&#39;&lt;/strong&gt;&lt;br&gt;
mkdir&lt;br&gt;
cd&lt;br&gt;
git&lt;br&gt;
. . .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Getting closer!  I want a frequence count of which commands are used, so let&amp;rsquo;s pipe this to &lt;strong&gt;uniq -c&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;history | awk &amp;lsquo;{print $2}&amp;rsquo; | uniq -c&lt;/strong&gt;&lt;br&gt;
1 mkdir&lt;br&gt;
1 cd&lt;br&gt;
1 git&lt;br&gt;
3 sudo&lt;br&gt;
1 exit&lt;br&gt;
1 git&lt;br&gt;
1 ls&lt;br&gt;
1 cd&lt;br&gt;
1 git&lt;br&gt;
1 cd&lt;br&gt;
1 ls&lt;br&gt;
. . .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice that it&amp;rsquo;s showing &lt;strong&gt;cd&lt;/strong&gt; counted in multiple groups.  I &lt;em&gt;think&lt;/em&gt; this is because of the way &lt;strong&gt;uniq&lt;/strong&gt; is grouping, so let&amp;rsquo;s help it out by piping that output to sort before asking &lt;strong&gt;uniq&lt;/strong&gt; to group and count.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;history | awk &amp;lsquo;{print $2}&amp;rsquo; | sort | uniq -c&lt;/strong&gt;&lt;br&gt;
1 &amp;quot;&lt;br&gt;
3 alias&lt;br&gt;
4 awk&lt;br&gt;
4 ./basic.sh&lt;br&gt;
1 cat&lt;br&gt;
31 cd&lt;br&gt;
3 chmod&lt;br&gt;
. . .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point it is easy to find that my top commands are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;history&lt;/strong&gt; (probably from working through this example)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>JAMStack</title>
      <link>https://www.nextpertise.net/jamstack/</link>
      <pubDate>Mon, 17 Aug 2020 08:25:02 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/jamstack/</guid>
      <description>&lt;p&gt;I wrote a few weeks ago about setting up this site using &lt;a href=&#34;https://www.nextpertise.net/building-this-site/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://www.nextpertise.net/render/&#34;&gt;Render&lt;/a&gt;.  It&amp;rsquo;s become clear since then that what I &amp;ldquo;discovered&amp;rdquo; was a developed concept aimed at solving big problems in web development and that my use case was the simplest use.  Some of you were no doubt well ahead of me, but couldn&amp;rsquo;t tell me because I didn&amp;rsquo;t have a comment system on the blog until this week.
Hugo and Render are one iteration of a concept called the JAMStack.&lt;/p&gt;
&lt;h3 id=&#34;you-should-consider-jamstack&#34;&gt;You should consider JAMStack&lt;/h3&gt;
&lt;p&gt;LAMP is a particular implementation of a web server.  By comparison, JAMStack is a loose collection of ideas about how to assemble the pieces needed to serve a webpage.  I have a diatribe on the &amp;ldquo;loose but enlightening concept&amp;rdquo; to &amp;ldquo;marketecture babble&amp;rdquo; cycle, but I won&amp;rsquo;t bore you with it.  Suffice to say that JAMStack is still early in the process and thus still valuable.&lt;/p&gt;
&lt;p&gt;With JAMStack we are removing the ediface of a database/content management system/webserver stack.  The old model stored content in a database and built HTML on the fly.  It was difficult on many levels - building, updating, and securing the pieces, maintaining capacity and availability, and difficult for content creators to view their finished page.&lt;/p&gt;
&lt;p&gt;JAMStack, as originally defined, is JavaScript, APIs, and Markup.  For Nextpertise, this is Hugo+Markup, 3rd Party APIs, and GitHub+Render.  Content is easily created and edited, then pushed straight to a Content Distribution Network (CDN) which provides fast response everywhere in the world.  I don&amp;rsquo;t have to build, license, or grow servers.  I have a local copy of Nextpertise in a local Git repository and can build as much as I want with very little effort.&lt;br&gt;
&lt;img src=&#34;https://www.nextpertise.net/JAMstack.png#floatright&#34; alt=&#34;JAMStack&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTML is a markup language, but it&amp;rsquo;s complicated and it entangles site design into the content.  Markdown is a simplified markup language that is human-readable.  I write content using VSCodium as a markdown file.  Hugo then compiles this markdown file against a template (in the case of this page, the &lt;em&gt;single.html&lt;/em&gt; file in the &lt;em&gt;themes/layouts/_default&lt;/em&gt; directory).  In the VSCodium terminal, I&amp;rsquo;m running &lt;strong&gt;Hugo server -D&lt;/strong&gt; and a browser is automatically updating a view of this page as I save.  When complete, I can run &lt;strong&gt;hugo server&lt;/strong&gt; and it will output my entire site as a set of html files in the &lt;em&gt;public&lt;/em&gt; directory.  Hugo and VSCodium are open source and well supported by their communities, but if you want to use something different there are too many choices for me to list.  I hear good things about Jekyll, Gatsby, and Eleventy, for instance.&lt;/p&gt;
&lt;p&gt;Once the site is updated, I push the local copy to Github.  Git provides a backup and handles version control.  It also handles permissions and tracks who makes changes, so I can invite collaborators over time.  Finally, Git provides the Continuous Integration piece.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t actually compile HTML locally.  Hugo shows it on the fly for development, but keeping a local public directory and dragging file to a host can create a problem with old file versions still present.  Better to compile a clean copy with each push, and GitHub handles that for me using a continuous integration (CI) process.  When I push a change to Github, a process automatically kicks off to compile the HTML and pass it to Render for distribution.&lt;/p&gt;
&lt;p&gt;Speaking of CDNs - I love working with Render.  I chose them after inadequate research and thought they were entirely unique.  It turns out that there are a number of ways to host static sites.  I wrote about S3: good, but doesn&amp;rsquo;t have a way to auto-deploy from Github.  I&amp;rsquo;ve heard good things about CloudFlare, Firebase, and GCP as well, but none of them have the CI integration.  If that&amp;rsquo;s a major factor for you, also look at GitHub pages and Netlify.  Of those options, I want to call out Netlify as providing a lot of support and documentation to the larger community.&lt;/p&gt;
&lt;p&gt;Everything I&amp;rsquo;ve discussed so far is around static content.  Great for a blog, but serious sites require user feedback for things like purchases and comments.  In the case of Nextpertise, adding a comment option looked like it was going to require standing up an EC2 instance and deploying a service that I could embed in the page.  But I really don&amp;rsquo;t want to build and secure a server and I especially don&amp;rsquo;t want to &lt;em&gt;pay&lt;/em&gt; for one.  This is where JAMStack gets into the API part.&lt;/p&gt;
&lt;p&gt;There are services to which I can subscribe that will provide a tenanted commenting capability for my site.  The biggest of these is Disqus.  Disqus appears to be a great choice and reasonable plans are available.  In the end, I used &lt;em&gt;utteranc.es&lt;/em&gt;, which is a bit of code that leverages Github APIs to store comments in Github issues.  I&amp;rsquo;m not building, I&amp;rsquo;m consuming.  The JAMStack model is to use APIs (like &lt;em&gt;utteranc.es&lt;/em&gt;) instead of incorporating that logic and - when you reflect on it - it&amp;rsquo;s a Unix-like philosophy of &lt;em&gt;doing one thing well&lt;/em&gt; and coupling those things at a higher level.  The philosophy I&amp;rsquo;ll take is to use third party APIs when possible, then to develop a Lambda if needed, then to stand up a server if I have to.  I&amp;rsquo;ve seen third party apis for maps, weather, jokes, and even shopping carts.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re working our way backward thorough the JAM.  Javascript would be added to help with interactivity, but at this point I don&amp;rsquo;t have a use case on my site.  So, mid-August Nextpertise is no javascript, utteranc.es API for commenting, and Hugo&amp;gt;Git&amp;gt;Render for the static site.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m continuing to read on this and I want to be careful not to present myself as an expert.  That said, I&amp;rsquo;m so enthusiastic about what I see that I wanted to share what I&amp;rsquo;ve learned with you.  I&amp;rsquo;ll check back on this topic as I have a more developed picture.  I&amp;rsquo;d also welcome your comments and suggestions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH - Part 3 (File Shares)</title>
      <link>https://www.nextpertise.net/using_ssh3/</link>
      <pubDate>Thu, 13 Aug 2020 11:15:42 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/using_ssh3/</guid>
      <description>&lt;p&gt;One of the basic things you want to do on a network is share files.  At one point, everyone had a Windows PC and this involved shared directories and Network Neighborhood.  It had a lot of issues, but it worked.  However, today we have a variety of clients and CIFS isn&amp;rsquo;t an easy (or appropriate) fit for all of them.  This article focuses on home users, but enterprise users face some of the same challenges.  There are a lot of ways you &lt;em&gt;could&lt;/em&gt; do this; I&amp;rsquo;m going to share how I&amp;rsquo;m currently doing it.  My environment includes several versions of Linux, Windows 10, a Mac, Chromebooks, and Android Phones.&lt;/p&gt;
&lt;p&gt;I should start by saying that I&amp;rsquo;m &lt;em&gt;not&lt;/em&gt; using Microsoft sharing &amp;ndash; what has been variously termed SMB (Server Message Blocks) or CIFS (Common Internet File System).  My experience with SAMBA (SMB on Linux) has been uneven and I&amp;rsquo;ve never wanted to invest the time.  Your mileage may vary, but trying to sort out access and permissions and deal with the impact of software updates was a drag.&lt;/p&gt;
&lt;h2 id=&#34;sftp-filezillafilezillapngfloatright&#34;&gt;SFTP &lt;img src=&#34;https://www.nextpertise.net/Filezilla.png#floatright&#34; alt=&#34;Filezilla&#34;&gt;&lt;/h2&gt;
&lt;p&gt;SFTP is a Secure File Transfer Protocol built on top of SSH, and the two are usually bundled together since they are complementary.  One of the easiest ways to use SFTP to transfer files on all platforms is to use &lt;em&gt;Filezilla&lt;/em&gt;.  Filezilla presents a left/right here/there file manager that allows easy drag and drop between locations.  It works most places SSH works.  Login using your SSH credentials and set the port to 22.  If you use Filezilla often, the first button on the left is the Site Manager and remembers common destinations.  Filezilla works, but there&amp;rsquo;s no way to open a file in an application from the other disk.  It must be copied locally and this creates multiple file versions and is onerous to use.  So - Filezilla if nothing else works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/caja.png#floatleft&#34; alt=&#34;Caja&#34;&gt;Linux file managers like &lt;em&gt;Caja&lt;/em&gt; and Finder on the Mac allow you to attach to an arbitrary destination in an ad-hoc fashion (Windows does not).  For Linux and Mac, just use existing SSH credentials.  This method also supports FTP, CIFS, and WebDav.  I don&amp;rsquo;t recommend FTP because it&amp;rsquo;s not secure and it&amp;rsquo;s a very old protocol and can be difficult to handle on firewalls.  WebDav is slow and involves some Apache setup.  It can be secure, but most folks setting up a quick file share won&amp;rsquo;t take the time to make it so.  I recommend SSH/SFTP.  File managers generally allow bookmarking, but don&amp;rsquo;t automatically reconnect.  I&amp;rsquo;ll walk through a technique that builds the connection at startup later in the article.&lt;/p&gt;
&lt;p&gt;On Android, I&amp;rsquo;m using &lt;em&gt;Cx File Explorer&lt;/em&gt;.  This application allows me to connect to SFTP resources and bookmark them.  Cx integrates with the rest of Android, so I can do things like type an email and use Cx to attach a file from the server.  Cx has the same requirements SSH does - a network path to the server and credentials. For me, a common use is to grab a PDF from the server and transfer them to my Kindle.&lt;/p&gt;
&lt;h2 id=&#34;aside---nfs&#34;&gt;Aside - NFS&lt;/h2&gt;
&lt;p&gt;Network File System (NFS) is a dream for devices that support it.  It lacks the ad hoc browsing you might do on a Windows network, but at home I want all the files on the servers and if I have to do horizontal file sharing I can figure it out.  Setting up NFS on the server involves getting the NFS server, setting up the &lt;em&gt;/etc/fstab&lt;/em&gt; configuration file, and publishing the share using &lt;strong&gt;exportfs&lt;/strong&gt;.  The example below publishes my user directory from the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo apt install nfs-kernel-server nfs-common&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;sudo nano /etc/exports&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;add lines similar to this one&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;/home/brent 192.168.1.0/255.255.255.0(rw,anonuid=1000,anongid=1000,sync)&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;save file&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;exportfs -avf&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the client, I&amp;rsquo;ll map this share to a folder so it sits in my directory tree.  In this case, I want my server user directory to fit under my local user directory as the &lt;em&gt;server&lt;/em&gt; sub-directory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mkdir ~/server&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;sudo nano /etc/fstab&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;add lines similar to this one&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;192.168.1.1:/home/brent /home/brent/server nfs default 0 0&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;save file&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;sudo mount ~/server&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;It should just work, but you may need to use &lt;strong&gt;mount&lt;/strong&gt; to kick it in the rear.  Because this is setup in your &lt;em&gt;fstab&lt;/em&gt; file, it will automatically reconnect when you restart.  My personal workflow is to save all my work products to the server because that&amp;rsquo;s what is being backed up.  I use the local folders for scratch files, downloads, etc.  I like to try new things and end up re-installing my OS on my desktop about three times a year.  I can throw my Ventoy USB stick in the PC, pick a distro, and be back up with no lost data in minutes!&lt;/p&gt;
&lt;p&gt;NFS works great for Linux to Linux filesharing.  I didn&amp;rsquo;t have great success with Windows.  There is a process that includes using &lt;em&gt;Services for NFS&lt;/em&gt;, but I won&amp;rsquo;t even link to it.  It was difficult to get working and didn&amp;rsquo;t &amp;ldquo;just work&amp;rdquo; in the way that I wanted for my wife&amp;rsquo;s PC.  I haven&amp;rsquo;t seen a way to use this with Android and haven&amp;rsquo;t attempted with Chrome.  On the Mac, this works fine and is supported by Finder.  The procedure is just:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;showmount -e 192.168.1.1&lt;/strong&gt;  &lt;em&gt;#view available shares&lt;/em&gt;
&lt;strong&gt;sudo mkdir /server-files&lt;/strong&gt; _ #depending on where you put it, you may not need sudo
&lt;strong&gt;sudo mount -o rw -t nfs 192.168.1.1:/home/brent /server-files&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NFS can be secure.  NFSv4 encrypts traffic in-transit and v2/3 allow you to limit promiscuous connections using a mask.  In the enterprise or if your traffic crosses a public network you &lt;em&gt;really&lt;/em&gt; need to use v4.
&lt;img src=&#34;https://raw.githubusercontent.com/billziss-gh/sshfs-win/master/cap.gif#floatright&#34; alt=&#34;SSHFS Win&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sshfs&#34;&gt;SSHFS&lt;/h2&gt;
&lt;p&gt;SSHFS is a file system using SFTP.  Since SFTP is built on top of SSH, SSHFS inherits all the goodness.  SSHFS  works for everything I&amp;rsquo;ve tested so far - I haven&amp;rsquo;t gotten to the Chromebooks yet, but I &lt;em&gt;have&lt;/em&gt; used it in Haiku.  SSHFS doesn&amp;rsquo;t require server setup beyond installing the SSH server daemon.  File permissions are communicated based on how you login.&lt;/p&gt;
&lt;p&gt;On Linux, the command to mount a directory using SSHFS looks like this (the server is 192.168.1.1).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mkdir ~/server&lt;/strong&gt;  &lt;em&gt;#if it doesn&amp;rsquo;t already exist&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;sudo sshfs -o allow_other,default_permissions &lt;a href=&#34;mailto:brent@192.168.1.1&#34;&gt;brent@192.168.1.1&lt;/a&gt;:/home/brent /home/brent/server&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can add this to fstab if you want it to be automatic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/fstab&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;# add this line&lt;/em&gt;&lt;br&gt;
_&lt;em&gt;&lt;a href=&#34;mailto:sshfs#brent@192.168.1.1&#34;&gt;sshfs#brent@192.168.1.1&lt;/a&gt;:/home/brent /home/brent/server fuse.sshfs &lt;em&gt;netdev,idmap=user,uid=1001,gid=1002,allow_other,default_permissions 0 0&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;For Windows, I&amp;rsquo;m using a stack of WinFsp, SSHFS-Win, and SSHFS-Win-Manager (links in notes).  Here&amp;rsquo;s the procedure:&lt;img src=&#34;https://www.nextpertise.net/SSHFS-Win-Manager.png#floatleft&#34; alt=&#34;SSHFS-WIn-Manager&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;em&gt;WinFsp&lt;/em&gt; from Github - there&amp;rsquo;s an MSI attached to the latest release (I tested with winfsp-1.7.20172.msi)&lt;/li&gt;
&lt;li&gt;Install &lt;em&gt;SSHFS-Win&lt;/em&gt; from Github - again using an MSI (I tested with SSHFS-Win-3.5.20024-x64.msi).  At this point you can map drives using the UNC \sshfs\user@server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/SSHFS-Win-Manager-Add.png#floatright&#34; alt=&#34;SSH-Win-Manager Adding a Conneciton&#34;&gt;. This is aimed at the family members who &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; want to futz around with computers all day, so install &lt;em&gt;SSHFS-Win Manager&lt;/em&gt; from Github (I tested with sshfs-win-manager-setup-v1.0.1.exe).  Once installed, click &amp;ldquo;add connection&amp;rdquo;.  The connection information is standard SSH information.  To attach my remote user directory to my local one as in the earlier example, I would specify a Remote path of &lt;em&gt;/home/brent&lt;/em&gt; and a Local Path of &lt;em&gt;/home/brent/server&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH - Part 2 (Authentication)</title>
      <link>https://www.nextpertise.net/using_ssh2/</link>
      <pubDate>Wed, 12 Aug 2020 11:36:12 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/using_ssh2/</guid>
      <description>&lt;p&gt;This aricle makes up part two of the series on SSH.  If you&amp;rsquo;re interested in the basics or how to setup a banner, refer to the first article.  As with the first article, I&amp;rsquo;ve tested all of this on Ubuntu Linux and exact commands may vary as you get farther from there.&lt;/p&gt;
&lt;h2 id=&#34;secure-authentication-with-passwords&#34;&gt;Secure Authentication with Passwords&lt;/h2&gt;
&lt;p&gt;By default, SSH authenticates users via a password.  Passwords are transmitted in a secure manner, but can be prone to brute force guessing attacks.&lt;/p&gt;
&lt;p&gt;One way to secure the ssh interface is to limit the devices allowed to access your server.  This can be done at different places - on your network firewall, in the OS firewall, or in the ssh process.   SSH uses TCP port 22, so blocking that at the firewall is one way to mitigate against maliciousness.  Since this article is about using SSH, we&amp;rsquo;ll focus on the latter.  Go into sshd_config and add a line for AllowUsers.  The example below allows anyone to login from the 192.168.1.0/24 network. Remember to restart the ssh service after changing sshd_config: &lt;strong&gt;sudo systemctl restart ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AllowUsers *@192.168.1.*&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Blocking source addresses only works up to a point.  Bad actors from within can still attack, and outside actors can use another host as a jump server (SSH to there, then start a new SSH session from the inside box).  Picking a good password helps make brute-force attacks take longer, but we need to prevent opportunities to work through every combination of letters.  Fail2ban is a service that blocks IP addresses that exhibit suspicious behavior.  Install it using &lt;strong&gt;sudo apt install fail2ban&lt;/strong&gt;.  Below is a script that will setup fail2ban to block IPs that fail three consecutive login attempts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;echo setup fail2ban&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;systemctl start fail2ban&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;systemctl enable fail2ban&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;echo &amp;ldquo;/[sshd]&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;enabled = true&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;port = 22&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;filter = sshd&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;logpath = /var/log/auth.log&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;maxretry = 3&amp;rdquo; &amp;gt;  /etc/fail2ban/jail.local&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;authentication-with-keys&#34;&gt;Authentication with keys&lt;/h2&gt;
&lt;p&gt;Another way to login is using keys.  A key pair - public and private - can be generated on a client and authenticates the client to the server.  Since the keys are stored in the &lt;em&gt;user&lt;/em&gt; account, they also in theory are associated with identity.  There are two advantages of using keys.  First, it can eliminate remembering and typing a knuckle-busting password and supports automation.  Second, keys are more secure than passwords &lt;em&gt;on the assumption that the key file is secure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To use public-key authentication, you first need to generate a key pair using the command &lt;strong&gt;ssh-keygen&lt;/strong&gt;.  You can optionally enter a passphrase to use to unlock the key.  By default, the public key is saved as &lt;em&gt;~/.ssh/id_rsa&lt;/em&gt; and the private key as &lt;em&gt;~/.ssh/id_rsa.pub&lt;/em&gt;.  This process is shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@inspiron:~$ &lt;strong&gt;ssh-keygen&lt;/strong&gt;&lt;br&gt;
Generating public/private rsa key pair.&lt;br&gt;
Enter file in which to save the key (/home/brent/.ssh/id_rsa):&lt;br&gt;
Enter passphrase (empty for no passphrase):&lt;br&gt;
Enter same passphrase again:&lt;br&gt;
Your identification has been saved in /home/brent/.ssh/id_rsa&lt;br&gt;
Your public key has been saved in /home/brent/.ssh/id_rsa.pub&lt;br&gt;
The key fingerprint is:&lt;br&gt;
SHA256:A5RBWIxVGMCAQbzAfenno9hlwQAeafZgnCPJCylrnz8 brent@inspiron&lt;br&gt;
The key&amp;rsquo;s randomart image is:&lt;br&gt;
+&amp;mdash;[RSA 3072]&amp;mdash;-+&lt;br&gt;
|&lt;em&gt;====OO&lt;/em&gt;.        |&lt;br&gt;
|**.@==+          |&lt;br&gt;
|+.B.* +          |&lt;br&gt;
|.+   o =         |&lt;br&gt;
|. . . o S        |&lt;br&gt;
|   o   = .       |&lt;br&gt;
|    + + .        |&lt;br&gt;
|   . G           |&lt;br&gt;
|      .          |&lt;br&gt;
+&amp;mdash;-[SHA256]&amp;mdash;&amp;ndash;+&lt;br&gt;
brent@inspiron:~$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t want to publish my keys to the world, so I just re-ran &lt;strong&gt;ssh-keygen&lt;/strong&gt; and accepted the prompt to overwrite the old set.&lt;/p&gt;
&lt;p&gt;Once a key pair is generated, the public key needs to be copied to the host that you want to login to.  To do this, you need password access to the host and this process doesn&amp;rsquo;t disable password access.  Unless you opt to turn that off, you still need to secure the password access using ACLs and fail2ban as previously discussed.  That said, ssh includes a utility to push your public key to a target device - &lt;strong&gt;ssh-copy-id&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;ssh-copy-id brent@192.168.1.1&lt;/strong&gt;&lt;br&gt;
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed&lt;br&gt;
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed &amp;ndash; if you are prompted now it is to install the new keys&lt;br&gt;
&lt;a href=&#34;mailto:brent@192.168.1.1&#34;&gt;brent@192.168.1.1&lt;/a&gt;&amp;rsquo;s password:&lt;/p&gt;
&lt;p&gt;Number of key(s) added: 1&lt;/p&gt;
&lt;p&gt;Now try logging into the machine, with:   &amp;ldquo;ssh &amp;lsquo;&lt;a href=&#34;mailto:brent@192.168.1.1&#34;&gt;brent@192.168.1.1&lt;/a&gt;&amp;rsquo;&amp;rdquo;&lt;br&gt;
and check to make sure that only the key(s) you wanted were added.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I should be able to just type &lt;strong&gt;ssh brent@192.168.1.1&lt;/strong&gt; and be attached to the server without a password prompt!  Easier administration and easier to script.&lt;/p&gt;
&lt;h2 id=&#34;authentication-with-totp&#34;&gt;Authentication with TOTP&lt;/h2&gt;
&lt;p&gt;TOTP is for the &lt;em&gt;really&lt;/em&gt; paranoid and for those uber-geeks that want to impress their friends.  Digital Ocean has a really nice write up on this, and that was my primary source for learning.  I&amp;rsquo;ve referenced it in the notes.  Their procedure is written for Ubuntu 16.04 but I&amp;rsquo;ve personally used it up through 20.04 without a problem.&lt;/p&gt;
&lt;p&gt;Ideally authentication involves something you &lt;em&gt;know&lt;/em&gt; and something you &lt;em&gt;have&lt;/em&gt;.  Time-based One Time Passwords are six-digit codes that change periodically.  Hopefully, you already use this to secure critical online resources like your email.  TOTP utilities generate a 3D barcode that can be read by the camera on a phone, and use that to set a unique nugget that can be combined with the time to give random number strings.  Google authenticator is the &amp;ldquo;go-to&amp;rdquo; app on the phone for entering and holding these authenticators.  I use &lt;em&gt;Enpass&lt;/em&gt;, which does a similarly good job.&lt;/p&gt;
&lt;p&gt;Before you begin, you&amp;rsquo;ll need the authenticator app loaded on your phone and you&amp;rsquo;ll need to be physically in front of the server.  On the server, install the authenticator module and initiate the settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo apt install libpam-google-authenticator&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;google-authenticator -t -d -f -r 3 -R 30 -W&lt;/strong&gt;   # NOTE: using cmd w/o flags will walk you through prompts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;google-authenticator&lt;/strong&gt; command will show you a 3D barcode and your first code.  Scan that in on your phone and verify the code.  The output will also include five &amp;ldquo;emergency scratch codes&amp;rdquo;.  These would be used if you lose your phone.  Write them down somewhere for emergencies before continuing.&lt;/p&gt;
&lt;p&gt;Next, add a line to &lt;em&gt;/etc/pam.d/sshd&lt;/em&gt; for authentication and edit a line in &lt;em&gt;sshd_config&lt;/em&gt; for Challenges.  Restart the service and you&amp;rsquo;ll be ready to test.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/pam.d/sshd&lt;/strong&gt;&lt;br&gt;
#&lt;em&gt;add this line, then close the file&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;auth required pam_google_authenticator.so nullok&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/.ssh/sshd_config&lt;/strong&gt;&lt;br&gt;
#&lt;em&gt;find and change this line, then close the file&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChallengeResponseAuthentication yes&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#&lt;em&gt;restart sshd&lt;/em&gt;
&lt;strong&gt;sudo systemctl restart sshd.service&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point, try connecting to this server using ssh.  It should &lt;em&gt;either&lt;/em&gt; use a key or prompt you for your password and then for the current TOTP code.  If you want it to require TOTP when using a key, you&amp;rsquo;ll need to edit sshd_config and restart the process again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/.ssh/sshd_config&lt;/strong&gt;&lt;br&gt;
#&lt;em&gt;add this line&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AuthenticationMethods publickey,password publickey,keyboard-interactive&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve presented a lot of ideas here, so I want to conclude by giving you my recommendations for personal machines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install SSH server by default&lt;/li&gt;
&lt;li&gt;Use a banner in .bashrc to make clear which device you are currently logged into&lt;/li&gt;
&lt;li&gt;Limit SSH to local IPs unless there&amp;rsquo;s a specific requirement otherwise.  If you can&amp;rsquo;t limit by IP, use TOTP.&lt;/li&gt;
&lt;li&gt;Use fail2ban&lt;/li&gt;
&lt;li&gt;Use keys.  Don&amp;rsquo;t try to use the same keys on all devices, just generate new ones every time you re-install or get a new PC.  At least for me, this cuts down on the risk of keys falling into outside hands.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH - Part 1 (Basics and Banners)</title>
      <link>https://www.nextpertise.net/using_ssh1/</link>
      <pubDate>Tue, 11 Aug 2020 12:36:12 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/using_ssh1/</guid>
      <description>&lt;p&gt;SSH is a pretty well known protocol that&amp;rsquo;s used for a lot of different things.  Most of us are familiar with the basics and a trick or two.  This article is to try to consolidate a lot of the uses I have for SSH and share them.  The article is a quick review of basic terminal access and banners.  This is the first in a series, so more advanced topics are covered in succeeding posts.&lt;/p&gt;
&lt;h2 id=&#34;the-basics&#34;&gt;The Basics&lt;/h2&gt;
&lt;p&gt;SSH is included in modern operating systems.  Apparently it can now also be installed on Windows (I&amp;rsquo;ve included a link).  If you use Windows, the standard client suggested is PuTTY (I really like Solar-PuTTY as well). I have not used Windows as a client or server in my testing, so hopefully my comments will be helpful but I suspect server setup is going to be different.&lt;/p&gt;
&lt;p&gt;My walk through assumes you are using a command-line client.  Note that the ssh &lt;em&gt;client&lt;/em&gt; is typically installed in the *nix world.  If you want your box to be the server then you&amp;rsquo;ll need to add it via &lt;strong&gt;sudo apt install openssh-server&lt;/strong&gt; (Debian/Ubuntu).&lt;/p&gt;
&lt;p&gt;Most of us encounter SSH as a secure replacement for telnet.  SSH allows us to connect to a remote terminal from the command line.  Assuming that I wanted to connect to my firewall by it&amp;rsquo;s IP address and that there was an account named &amp;ldquo;brent&amp;rdquo; there, I can connect using _&lt;em&gt;ssh &lt;em&gt;username&lt;/em&gt;@&lt;em&gt;Destination&lt;/em&gt;&lt;/em&gt;.  If this is the first time you&amp;rsquo;ve connected, you&amp;rsquo;ll be asked to confirm the fingerprint.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;ssh brent@192.168.24.230&lt;/strong&gt;&lt;br&gt;
The authenticity of host &amp;lsquo;192.168.24.230 (192.168.24.230)&amp;rsquo; can&amp;rsquo;t be established.&lt;br&gt;
ECDSA key fingerprint is SHA256:1XYZ12MBd5Sb345ABOBhoKx42D+STU56szGR/d3LkGs.&lt;br&gt;
Are you sure you want to continue connecting (yes/no/[fingerprint])? &lt;strong&gt;yes&lt;/strong&gt;&lt;br&gt;
Warning: Permanently added &amp;lsquo;192.168.24.230&amp;rsquo; (ECDSA) to the list of known hosts.&lt;br&gt;
&lt;a href=&#34;mailto:brent@192.168.24.230&#34;&gt;brent@192.168.24.230&lt;/a&gt;&amp;rsquo;s password:&lt;br&gt;
brent@inspiron:~$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The fingerprint is to protect against a man-in-the-middle attack, where your traffic is being re-directed to a malicious third party.  Before you type in (and reveal) your password, best to make sure that this is a trusted server!  So, where do we find the fingerprint to match it to?  The easiest way to get it is to go to your server and use ssh to connect to itself: &lt;strong&gt;ssh &lt;em&gt;username&lt;/em&gt;@127.0.0.1&lt;/strong&gt;.  This will show the local fingerprint.  If someone has already used this trick and accepted the fingerprint, you can delete ~/.ssh/knownhosts (&lt;em&gt;not recommended&lt;/em&gt;) or use ssh-keygen to examine the local public key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brent@MintyTwenty:~$ &lt;strong&gt;ssh-keygen -lf .ssh/id_rsa.pub&lt;/strong&gt;&lt;br&gt;
4096 SHA256:cjyCsHXYZ12dESNo+12AB/oGGaxY1JHSTU%1p3Aeouw brent@X (RSA)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;banners&#34;&gt;Banners&lt;/h2&gt;
&lt;p&gt;SSH banners are specified in the ssh daemon configuration (&lt;em&gt;/etc/sshd_config&lt;/em&gt;),  To specify a banner, find the line reads &amp;ldquo;#banner none&amp;rdquo; and edit it to specify a file.  The contents of this file will be displayed &lt;em&gt;before&lt;/em&gt; the password prompt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo nano /etc/sshd_config&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;banner /etc/banner.txt&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;After authentication the prompt displays the server hostname.  You can display a banner &lt;em&gt;after&lt;/em&gt; authentication by editing &lt;em&gt;~/.bashrc&lt;/em&gt;.  This has a side benefit - the terminal, when connected to locally or remotely, processes &lt;em&gt;~/.bashrc&lt;/em&gt; before it produces a prompt.  Go to the end of that file and add whatever you like - that output will be displayed before a prompt is produced.  I&amp;rsquo;ve listed some cool ideas to build a dynamic banner below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;neofetech&lt;/strong&gt; is a popular script that summarizes system information.  There&amp;rsquo;s a ppa available to add this from apt.&lt;img src=&#34;https://www.nextpertise.net/neofetch.png#floatright&#34; alt=&#34;neofetch&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo add-apt-repository ppa:dawidd0811/neofetch&lt;br&gt;
sudo apt install neofetch&lt;br&gt;
echo &amp;ldquo;neofetch&amp;rdquo; &amp;raquo; /home/brent/.bashrc            # Add the command to the end of .bashrc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Figlet&lt;/strong&gt; - draws letters in ASCII for a nice banner and any command can be piped through it (echo &amp;ldquo;for example&amp;rdquo; | figlet).  It&amp;rsquo;s available in the standard Ubuntu repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/figlet.png#floatright&#34; alt=&#34;figlet&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Curl&lt;/strong&gt; - pull in data from the web.  Try &lt;strong&gt;curl v2.wttr.in/Hickory+NC&lt;/strong&gt;.  A more practical example might be:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;curl wttr.in/Hickory+NC?format=2                  # check out the github page for lots more options&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server stats&lt;/strong&gt; - display information about the server such as IP (&lt;strong&gt;hostname -I)&lt;/strong&gt; or temperature (&lt;strong&gt;sensors&lt;/strong&gt;).  This snippet will display just the main temperature.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;data=$(sensors | grep &amp;ldquo;id 0:&amp;rdquo; | cut -c16-23)      &lt;em&gt;#sensors displays a lot of data. Grep just grabs the one line, and cut pulls temp out.&lt;/em&gt;&lt;br&gt;
echo &amp;ldquo;CPU Temp:${data}&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Part two of this series will cover secure authentication options.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reasonably Secure Browsing</title>
      <link>https://www.nextpertise.net/reasonablysecurebrowsing/</link>
      <pubDate>Wed, 05 Aug 2020 11:23:41 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/reasonablysecurebrowsing/</guid>
      <description>&lt;p&gt;Most of my articles are aimed at helping me remember how I did something &lt;em&gt;cool&lt;/em&gt; years later, and helping other people who share my interest and want to solve similar problems.  This one is a little different.  When I speak to non-technical folks - at church, other parents, or within my family - I&amp;rsquo;m disappointed with the lack of understanding about computer security.  I was going to say &amp;ldquo;surprised&amp;rdquo;, but sadly I&amp;rsquo;m not.&lt;/p&gt;
&lt;p&gt;I get that we can&amp;rsquo;t all be aware of &lt;strong&gt;everything&lt;/strong&gt;.  For instance, I&amp;rsquo;m not really interested in cars.  Still, if you are participating in an area (driving a car or browsing the web), then there&amp;rsquo;s a basic level of awareness that is needed and that you should aim for.  So this post is written for the non-technical in order to provide that grounding.  I&amp;rsquo;ll try to keep this up to date (pay attention to the posting date!) and I&amp;rsquo;ll start pointing people who ask those questions to this resource.
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/en/0/09/Timmcgee.jpg#floatleft&#34; alt=&#34;Tim McGee from NCIS&#34;&gt;
I need to define &amp;ldquo;reasonable&amp;rdquo; before I get started.  Internet paranoia comes in three flavors - fear of malicious actors, fear of giant companies assembling dossiers to feed into marketing, and Orwellian fears about nation-states.  All three are reasonable things to be concerned about but this post only addresses the first.  Hiding from the NSA is beyond the ability of most people - even if they unplug.  Hiding from creepy companies is possible, but requires foregoing a lot of services that most of us are loathe to do without.  However, there are small steps that you can take that will give you a good degree of protection against maliciousness.  Reasonable means simple steps picking up bad code or leaking sensitive personal information.&lt;/p&gt;
&lt;p&gt;Finally, what makes me think I&amp;rsquo;m an expert?  Well, I have a Master&amp;rsquo;s in Information Security and I&amp;rsquo;ve worked in IT operations and security for many, many years.  I&amp;rsquo;m no Tim McGee, but I get by.&lt;/p&gt;
&lt;h2 id=&#34;general-safe-browsing-advice&#34;&gt;General safe-browsing advice&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;If possible, run Linux&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Setup your home to use OpenDNS or CloudFlare Family DNS servers&lt;/li&gt;
&lt;li&gt;Check for browser updates regularly, and apply them.  Keep plugins up to date as well.&lt;/li&gt;
&lt;li&gt;Use Anti-Virus.&lt;/li&gt;
&lt;li&gt;Don’t &lt;strong&gt;ever&lt;/strong&gt; click on links in email.&lt;/li&gt;
&lt;li&gt;Use a secure password, and don’t re-use passwords between sites.&lt;/li&gt;
&lt;li&gt;Do not save passwords within the browser. Use a password safe and subscribe to &lt;strong&gt;Have I been Pwned?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Use SSL – Sites that use “HTTPS:” instead of “HTTP” are encrypting your traffic.&lt;/li&gt;
&lt;li&gt;Have a solution to monitor your bank accounts and credit reports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general-browser-checklist&#34;&gt;General Browser checklist&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Do not save passwords in the browser.  Use a password safe.&lt;/li&gt;
&lt;li&gt;Do not use autofill.  Sites use hidden fields to send more than you think.&lt;/li&gt;
&lt;li&gt;Have the browser ask you where to save files.  This alerts you to files being downloaded and allows you to cancel or put them in a folder for latter consideration.&lt;/li&gt;
&lt;li&gt;Enable click-to-play for plugins.  This will speed up the browser and allow you to decide when to use useful but potentially dangerous plugins like JavaScript, Flash, and Silverlight.&lt;/li&gt;
&lt;li&gt;Do not accept third-party cookies except by exception.  Clear all cookies after each session.&lt;/li&gt;
&lt;li&gt;Use Do Not Track.  This is more aimed at commercial privacy, and depends on the server honoring the request, but why not?&lt;/li&gt;
&lt;li&gt;Be cautious using extensions, however there are a few that are suggested:
&lt;ul&gt;
&lt;li&gt;AdBlock Plus&lt;/li&gt;
&lt;li&gt;HTTPS Everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refer to the following sections for specific help with your browser.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;chromehttpswwwmozillaorgmediaprotocolimglogosfirefoxbrowserlogo-lg-high-resfbc7ffbb50fdpngfloatright-chrome&#34;&gt;&lt;img src=&#34;https://www.mozilla.org/media/protocol/img/logos/firefox/browser/logo-lg-high-res.fbc7ffbb50fd.png#floatright&#34; alt=&#34;Chrome&#34;&gt; Chrome&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Settings are found under the “stacked dots” icon on the right.&lt;/li&gt;
&lt;li&gt;Under “set up sync”
&lt;ul&gt;
&lt;li&gt;Choose “encrypt all synced data with your sync password”.&lt;/li&gt;
&lt;li&gt;Uncheck Autofill and Passwords.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select advanced options&lt;/li&gt;
&lt;li&gt;Under Privacy, check “protect you and your device from dangerous sites” and “send Do Not Track”.&lt;/li&gt;
&lt;li&gt;Under Passwords and Forms, uncheck both options (do not autofill or remember passwords).&lt;/li&gt;
&lt;li&gt;Under Downloads, check “Ask where to save each file before downloading”.&lt;/li&gt;
&lt;li&gt;Under Plugins, select “Let me choose when to run plugin content”.&lt;/li&gt;
&lt;li&gt;Under Cookies, block third-party cookies.&lt;/li&gt;
&lt;li&gt;Add recommended Extensions and remove un-needed ones.
&lt;ul&gt;
&lt;li&gt;AdBlock Plus&lt;/li&gt;
&lt;li&gt;HTTPS Everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;firefoxhttpsp1hiclipartcompreview4981015635mozilla-sleek-icons-firefox-256x256-mozilla-firefox-logo-png-clipartjpgfloatright-firefox&#34;&gt;&lt;img src=&#34;https://p1.hiclipart.com/preview/498/1015/635/mozilla-sleek-icons-firefox-256x256-mozilla-firefox-logo-png-clipart.jpg#floatright&#34; alt=&#34;Firefox&#34;&gt; Firefox&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Options are found under the “hamburger” icon on the right.  In the drop down menu, select preferences.&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Files and Applications&lt;/em&gt; and select “Always ask me where to save files.”&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;Network Settings&lt;/em&gt; select the settings button.  Choose &lt;strong&gt;enable DNS over HTTPS&lt;/strong&gt; and set it to Cloudflare.&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;Privacy &amp;amp; Security&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Select the Standard Tracking Protection option and “Always apply Do Not Track”&lt;/li&gt;
&lt;li&gt;Set third-party cookies to delete when Firefox is closed.&lt;/li&gt;
&lt;li&gt;Under Logins and Passwods, disable &amp;ldquo;ask to save&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Under Forms and Autofill, disable Autofill&lt;/li&gt;
&lt;li&gt;Under Permissions, check &amp;ldquo;Warn me when sites try to install an add-on&amp;rdquo; and &amp;ldquo;Block pop-up windows&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Disable Firefox data collection.&lt;/li&gt;
&lt;li&gt;Under Security, choose to Block dangerous and deceptive content, block dangerous downloads, and warn about unwanted software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back to the hamburger menu and select &lt;em&gt;Add Ons&lt;/em&gt;.  Remove any extensions you don&amp;rsquo;t need and add these two.
&lt;ul&gt;
&lt;li&gt;AdBlock Plus&lt;/li&gt;
&lt;li&gt;HTTPS Everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;internet-explorer&#34;&gt;Internet Explorer&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Don’t use Internet Explorer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;other-browsers---&#34;&gt;Other browsers . . .&lt;/h2&gt;
&lt;p&gt;There are some other browsers that are marketed as &amp;ldquo;secure&amp;rdquo;.  Examples include Avast, AVG, and Comodo.  My experience is that these are just custom versions of Chrome.  It&amp;rsquo;s difficult to keep up with all the customizations these different groups make, but generally I find that they are based on an older version of Chromium and aren&amp;rsquo;t always transparent about what changes they are making.  They tend to be updated less often and sometimes behave in unexpected ways because of the changes.  I do not recommend these today, but I&amp;rsquo;m open to the idea.&lt;/p&gt;
&lt;p&gt;Another set of browsers attempt to compete more directly with Firefox and Chrome.  These include names like Brave and Opera.  I have a good opinion of both these options, but they are more common with power users and not really in scope of this guide.  Safari is used on Macs and is quite good.  I&amp;rsquo;ll try to add it in at a later date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux Home Cloud Backup</title>
      <link>https://www.nextpertise.net/homebackup/</link>
      <pubDate>Tue, 04 Aug 2020 09:12:52 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/homebackup/</guid>
      <description>&lt;p&gt;At one point, I was taught to divide tasks by priority A, B, C.  As I&amp;rsquo;ve gotten older, I&amp;rsquo;ve converted that scale into &amp;ldquo;things that will immediately get me fired or divorced&amp;rdquo;, &amp;ldquo;things that will eventually get me fired or divorced&amp;rdquo;, and &amp;ldquo;things I&amp;rsquo;d like to do if I have time&amp;rdquo;.  One of the &amp;ldquo;A&amp;rdquo; tasks on this scale is making sure that we don&amp;rsquo;t lose our family digital pictures!&lt;/p&gt;
&lt;p&gt;Our home file server is an Ubuntu VM.  Over the years, I&amp;rsquo;ve used a variety of strategies to maintain personal backups.  Recently, I felt the time was right to move to cloud based backup - both for the convenience and the security of having things off-site.  I considered AWS S3, but Backblaze offers a similar and less-expensive service.  A former employer used Backblaze for laptop backups and I administered that system, and I always felt they did a good job and were reasonable to work with.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/BB_bucket_setup.png#floatright&#34; alt=&#34;Backblaze Dashboard&#34;&gt;  I settled on using Duplicati for the backkup software.  Duplicati runs on everything (Linux + various less secure OS), has a DEB, and is FOSS.  Duplicati has built in support for cloud backup, including Backblaze and S3.  I have a friend that uses Duplicati and it&amp;rsquo;s discussed on Jupiter Broadcasting, so I wanted to give it a try.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with Backblaze.  I setup an account and configured it for 2FA.  Then I created an ID and application key at the Backblaze dashboard and setup a bucket.  You can specify the bucket policy, and I recommend keeping older copies to protect against crypto-locking malware.  I setup my bucket to retain older copies for 180 days.&lt;/p&gt;
&lt;p&gt;Setting up Duplicati is as easy as installing the DEB and enabling the app to autostart.  My server runs Mate, so I opened the Control Center (alt&amp;ndash;f2, &amp;ldquo;mate-control-center&amp;rdquo;) and added Duplicati to the autoruns (at the bottom of the control center window).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/Mate-autorun-Duplicati.png#floatleft&#34; alt=&#34;Mate Autorun&#34;&gt; Once running, Duplicati shows a menu-bar applet. The application is administered from a web page on port 8200.  This webpage can be accessible from other machines and I usually manage the backups from my desktop.  Duplicati has excellent documentation on their website, but I was able to get it up and running quickly without investing a lot of time.&lt;/p&gt;
&lt;p&gt;From the initial Duplicati page choose &amp;ldquo;Add backup&amp;rdquo; and a wizard will walk you through specifying the details.  Make sure you keep track of the passphrase used by the backup!  Here&amp;rsquo;s a quick rundown on the selections I used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General - AES-256 Encryption.  Other options are no encryption and GNU Privacy Guard.  I don&amp;rsquo;t protect nuclear secrets, but I get itchy not encrypting data at rest, so I definitely don&amp;rsquo;t recommend that option.  I don&amp;rsquo;t know much about GNU PG, but AES-256 is considered a solid and well researched encryption so I used it.&lt;/li&gt;
&lt;li&gt;Backup destination - this is where you&amp;rsquo;ll plug in the ID and Key you generated at Backblaze earlier.&lt;/li&gt;
&lt;li&gt;Source data - gives you a file tree to select what you&amp;rsquo;d like to backup.  I&amp;rsquo;m cheap, so I separated out the non-private stuff into another directory (like installation ISOs) so I didn&amp;rsquo;t pay to back them up.&lt;/li&gt;
&lt;li&gt;Schedule - We&amp;rsquo;ll get into a discussion of RTO and RPO another time perhaps.  Basically, think about your cost to transfer files (with Backblaze, there is no incremental cost) and how much data you are willing to lose between backups.  I setup my schedule to run every night - with Backblaze there&amp;rsquo;s not really a reason &lt;em&gt;not to&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Options - Duplicati allows you to set the remote volume size.  I kept this at the recommended 50Mb.  Basically, it chunks your data so that it&amp;rsquo;s easier to restore and so that an adversary can&amp;rsquo;t identify individual file sizes, which could be a way that you&amp;rsquo;d leak information.  I also chose to keep all backups, again to protect against crypto-lockers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/Duplicati_Wiz.png#floatright&#34; alt=&#34;Duplicati Wizard&#34;&gt; After all that, just let it run!  My biggest knock on the combination of Duplicati and Backblaze is that there&amp;rsquo;s not an easy way to confirm backups are happening.  Backblaze has a 10 day trial and I didn&amp;rsquo;t initially put in a credit card.  To be clear, kudos to them for letting you try it and being easy to work with.  But . . . I forgot and the trial ran out and my backups stopped for several days.  Worse, I was clueless.&lt;/p&gt;
&lt;p&gt;Duplicati has options to setup a confirmation email after backups, which I recommend.  You&amp;rsquo;ll know there&amp;rsquo;s a problem when you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; get an email.  Unless you are more clever than me, that&amp;rsquo;s suboptimal but it is something.  Backblaze doesn&amp;rsquo;t have an alerting option for things that don&amp;rsquo;t happen.  I&amp;rsquo;m thinking that I could setup a Lambda to check via API, then send an SNS, but that&amp;rsquo;s for another day.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;rsquo;m please with the setup and the results I&amp;rsquo;m getting and would recommend either component to someone trying to solve a similar home problem.  I don&amp;rsquo;t see a reason this wouldn&amp;rsquo;t be good for a work environment, but I&amp;rsquo;ll need to use it for a while before I feel comfortable making that a recommendation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Postscript</title>
      <link>https://www.nextpertise.net/funwithpostscript/</link>
      <pubDate>Mon, 03 Aug 2020 16:59:30 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/funwithpostscript/</guid>
      <description>&lt;p&gt;I really enjoy being a computer professional.  I like the  creativity, problem solving, and the sense that things can be understood.  Sometimes this is directly applicable, sometimes it&amp;rsquo;s just &lt;em&gt;fun&lt;/em&gt;.  One example of the latter is Postscript.&lt;/p&gt;
&lt;p&gt;Most of you know Postscript only as a printer thing, but it&amp;rsquo;s actually a programming language.  Postscript builds a mathematical model of a page and then converts that to a bitmap for printing as a final step.  Postscript files always print at the best resolution available on the output device without having to be reformatted.&lt;/p&gt;
&lt;p&gt;Postscript uses a single stack and then pops off the required number of values to execute a command.  For instance, you might give it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 2 add&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In college, I &amp;ldquo;discovered&amp;rdquo; postscript by printing a file for an Apple LaserWriter to an HP Laserjet. Since the Laserjet didn&amp;rsquo;t speak Postscript (they use PCL) it just dumped raw text onto a stack of paper. I was fascinated because I could kinda read it, so I researched it and bought three books and just started playing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Postscript Language: Tutorial and Cookbook by Adobe
Graphic Design with Postscript by Gerard Kunkel
Postscript by Example by Henry McGilton and Mary Campione&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first, I wrote text files and dumped them to the LaserWriter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;copy myfile.ps &amp;gt; lpt1:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later I started using early ghostscript to output to my dot matrix printer. I recently rediscoverd some of my files from the 1980&amp;rsquo;s and found that I could display them in Linux with modern Ghostscript.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a simple Postscript program I took from the Postscript Cookbook:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Helvetica-Bold findfont&lt;br&gt;
30 scalefont setfont&lt;br&gt;
/oshow  %stack: {string}&lt;br&gt;
{true charpath stroke} def&lt;br&gt;
/circleofBrent&lt;br&gt;
{ 20 20 340&lt;br&gt;
{ gsave&lt;br&gt;
rotate 0 0 moveto&lt;br&gt;
(Brent) oshow&lt;br&gt;
grestore&lt;br&gt;
} for&lt;br&gt;
} def&lt;/p&gt;
&lt;p&gt;% &amp;ndash;Begin Program &amp;ndash;&lt;br&gt;
250 400 translate&lt;/p&gt;
&lt;p&gt;.5 setlinewidth&lt;br&gt;
circleofBrent&lt;/p&gt;
&lt;p&gt;0 0 moveto&lt;br&gt;
(Brent Stewart) true charpath&lt;br&gt;
gsave 1 setgray fill grestore&lt;br&gt;
stroke&lt;/p&gt;
&lt;p&gt;showpage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/CircleofBrent.png#floatright&#34; alt=&#34;Circle of Brent&#34;&gt;&lt;/p&gt;
&lt;p&gt;Without a lot of explanation, you get the sense of how postscript works.  There&amp;rsquo;s a routine to print my name and rotate the coordinate system in increments of 20 degrees.  That routine is looped through and then the final full name is printed at the end.  Instead of printing this page, in Linux I just typed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gs CircleofBrent.ps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the page is rendered in a window.  I discovered that you GIMP can directly load postscript files (!) and used that to create the logo and favicon for this site.  You can print the file to a postscript printer using lpr.  MFC9340CDW is a brother printer I use, and I opened system-config-printer to confirm the name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lpr -P MFC9340CDW rays.ps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve built a repo with some examples.  I actually found some of my code from 30 years ago! PostScript is a simple enough language to quickly accomplish things with, but complicated enough to get some interesting results.  In fact, you can do things in the language that I&amp;rsquo;ve never seen translated to an app.  I hope this post will encourage you to give it a try and have some fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS S3 Review</title>
      <link>https://www.nextpertise.net/s3review/</link>
      <pubDate>Tue, 28 Jul 2020 15:44:02 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/s3review/</guid>
      <description>&lt;p&gt;In a previous post, I described hosting this website on Render.  I mentioned that I am coming up to speed on AWS and it was my intention to host the site on S3 as well.  This post documents my experience.&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;
&lt;p&gt;Render has a CI-step that builds the html from Hugo auto-magically.  AWS isn’t integrated with Github, so I needed to build the website.  This is pretty easy, just navigate to the directory and type “hugo”.  This produces a “public” directory that needs to be copied to your webserver.&lt;/p&gt;
&lt;p&gt;AWS allows you to specify an error page.  In Hugo, I setup a &lt;em&gt;404.html&lt;/em&gt; page under &lt;em&gt;theme/layouts&lt;/em&gt; and used the S3 Properties page to specify that URL for the error page.&lt;/p&gt;
&lt;h2 id=&#34;aws&#34;&gt;AWS&lt;/h2&gt;
&lt;p&gt;The short version of hosting a site on S3 is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an S3 bucket&lt;/li&gt;
&lt;li&gt;The bucket needs to be public, so set &amp;ldquo;Block all public access&amp;rdquo; to OFF.&lt;/li&gt;
&lt;li&gt;Navigate to S3, select the bucket and go to the Properties tab.  Under &amp;ldquo;Static Website Hosting&amp;rdquo; select &amp;ldquo;Use this bucket to host a website&amp;rdquo;.  You can also grab the URL from this screen.  This will look something like  &lt;a href=&#34;http://mybucket.s3-website-us-east-1.amazonaws.com&#34;&gt;http://mybucket.s3-website-us-east-1.amazonaws.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your DNS, setup a CNAME for www to the bucket URL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above is pretty well documented at various places and it&amp;rsquo;s pretty easy.  So obviously, that&amp;rsquo;s not the way I did it.&lt;/p&gt;
&lt;p&gt;AWS has a feature called Cloud Formation that let&amp;rsquo;s you specify an environment in JSON or YAML.  This approach is called &lt;em&gt;Infrastructure as Code&lt;/em&gt;.  There are a lot of scenarios where IaC is useful.  It reduces the time and cost of setting up an environment, which could be useful if you wanted to quickly setup a dev environment or duplicate an environment for some other purpose.  This approach reduces errors because you can troubleshoot the setup script when you build it and then iteratively improve it.  It also allows for the environment to be specified and reviewed by security specialists, improving communication between operations and security and reducing risks.&lt;/p&gt;
&lt;p&gt;Cloud Formation is free to use.  I built a JSON &lt;a href=&#34;https://www.nextpertise.net/CloudFormation-Setup_Public_S3.json&#34;&gt;file&lt;/a&gt; that creates an S3 bucket, marks the bucket public, and then applies a security policy.  My template also outputs the URL back to you when it completes.  The Amazon online user guide has a lot of examples I used to understand the process, plus there is a template designer that let&amp;rsquo;s you draw out your target environment a la Visio and builds the JSON for you.  I didn&amp;rsquo;t use the designer to draw, but I pasted the file I developed into the designer and it was a good way to &amp;ldquo;debug&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Doing initial development of a Cloud Formation template meant running the process several times and fixing issues.  For me, most of these were formatting.  This took a little over an hour to iron out.  When everything was ready, I instantiated my S3 web bucket and I just needed to copy my Hugo public folder into the bucket.&lt;/p&gt;
&lt;p&gt;AWS has a &amp;ldquo;free tier&amp;rdquo; that&amp;rsquo;s offered during your first 12 months.  Five gigs of S3 space is included in this tier, so the initial cost isn&amp;rsquo;t bad and S3 isn&amp;rsquo;t expensive after that.  Whether you my example to use Cloud Formation or not, this is a cheap and effective way to get a static website setup.  Amazon provides a very durable and scalable environment, there&amp;rsquo;s a ton of tools available, and it&amp;rsquo;s easy to imagine growing from this initial setup to a dynamic site using K8s.&lt;/p&gt;
&lt;p&gt;That said, updating the html feels a little clunky after using Render and it&amp;rsquo;s integration with Github.  I&amp;rsquo;m going to leave the S3 version up for a while and try some improvements.  I&amp;rsquo;d like to build a command line script to run the Cloud Formation process, run Hugo to compile the site, and then transfer files.  That seems doable and it would make this a lot easier to maintain.  AWS also has a CodeCommit repository that looks like Github from a distance.  It would be interesting to explore using CodeCommit for the site as well.&lt;/p&gt;
&lt;p&gt;For now, I&amp;rsquo;m very pleased with the Render workflow and I&amp;rsquo;ve decided to leave the &amp;ldquo;official&amp;rdquo; copy of the site there.&lt;/p&gt;
&lt;p&gt;As always, I&amp;rsquo;m interested in your experiences and suggestions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VMWare 3D Acceleration</title>
      <link>https://www.nextpertise.net/vmware_3d_acceleration/</link>
      <pubDate>Tue, 28 Jul 2020 15:44:02 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/vmware_3d_acceleration/</guid>
      <description>&lt;p&gt;I tried to load Chrome OS in VMWare Workstation the other day and got the message &amp;ldquo;No 3D Support is available&amp;rdquo;.  Apparently this is required for Chrome OS to boot.  I&amp;rsquo;ve gotten the message on other VMs, but never needed to worry about it.&lt;/p&gt;
&lt;p&gt;I assumed this was an issue with Chrome OS at first and tried several versions including &amp;ldquo;CloudReady&amp;rdquo;.  I was using the build put together by FydeOS and had a chance to talk with him on Telegram about the issue.  He recommended I look through a question on AskUbuntu.&lt;/p&gt;
&lt;p&gt;I edited &lt;strong&gt;.vmware/preferences&lt;/strong&gt; and added the following line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mks.gl.allowBlacklistedDrivers = &amp;ldquo;TRUE&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Chrome OS booted without a problem!  I had VMs on ESXi that I was accessing via Workstation, and this also resolved the issue for them.  If you are interested in running a ChromeOS VM, I suggest checking out FydeOS.  My testing has been smooth and they have a Telegram channel that is super helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Render</title>
      <link>https://www.nextpertise.net/render/</link>
      <pubDate>Fri, 24 Jul 2020 08:21:27 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/render/</guid>
      <description>&lt;h3 id=&#34;tldr-you-should-take-a-look-at-rendercom-&#34;&gt;TLDR: you should take a look at Render.com&lt;/h3&gt;
&lt;p&gt;I wrote in a previous post that I decided to build my site using Hugo, a decision I&amp;rsquo;m still really tickled with.  My initial draw to a Static Site Generator was to host my site in S3.  There&amp;rsquo;s a lot of attraction there - creating a public S3 bucket is easy, it&amp;rsquo;s low-cost, there&amp;rsquo;s no server to maintain, and the data is replicated within region between Availability Zones.  From a security perspective, S3 is easy to secure and the bucket is isolated.&lt;/p&gt;
&lt;p&gt;I have experience with the major cloud providers and my high-level opinion is that AWS is the most mature, has the most complete set of products, and is the easiest to deal with.  Plus, I&amp;rsquo;m working my way through the AWS certs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/render.png#floatright&#34; alt=&#34;Render Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;In coming up to speed on Hugo, I heard about a site called Render.  The salient points were that Render offered free static-site hosting and would pull your site from Git.  The Git integration was attractive - I had already decided to put the theme there and now I could just put the entire site there.  I decided to try Render.&lt;/p&gt;
&lt;p&gt;At the time of this writing, I&amp;rsquo;ve had a Render account for two days.  Signup was easy and didn&amp;rsquo;t require a credit card.  They support federation with Github, so I used that option and that may have made things easier later.&lt;/p&gt;
&lt;p&gt;Forcing me to give a card when I signup for something free always makes me feel like I&amp;rsquo;m being suckered into something.  In fact, I had an experience with Azure where I signed up for a &amp;ldquo;free&amp;rdquo; tier and ended up getting a big bill a couple months later so I have empirical reasons to be wary.&lt;/p&gt;
&lt;p&gt;I was super-impressed with the Git integration.  I went to Github and created a new &amp;ldquo;Nextpertise&amp;rdquo; project, then went to my Hugo directory and made it a repository and sync&amp;rsquo;d it to Github.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git init&lt;br&gt;
$ git add .&lt;br&gt;
$ git commit -m &amp;ldquo;Initial commit&amp;rdquo;&lt;br&gt;
$ git remote add origin &lt;a href=&#34;https://github.com/brentstewart/nextpertise.git&#34;&gt;https://github.com/brentstewart/nextpertise.git&lt;/a&gt;&lt;br&gt;
$ git push -f origin master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hugo takes your markdown content and compiles it against templates to generate a public directory of html files that can be copied to a web server.  When you are ready to deploy, just run &amp;ldquo;hugo&amp;rdquo; with no options.  The caveat here is that Hugo doesn&amp;rsquo;t clear out old content first, and will just copy the new build on top of the old.  Best practice then is to delete the public directory before regenerating.  So before setting up Render, I generated the public directory and sync&amp;rsquo;d my repo to Github.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/Render_setup.png#floatright&#34; alt=&#34;Render Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;From Render, I selected New &amp;ldquo;Web Service&amp;rdquo; and selected the repository I wanted to use.  Render asked for the web content directory (the &amp;ldquo;Publish directory&amp;rdquo;)  and the build command - here&amp;rsquo;s where I realized I messed up.  I went back and removed my &lt;strong&gt;public&lt;/strong&gt; directory and resync&amp;rsquo;d to Github, then used  &lt;strong&gt;hugo&lt;/strong&gt; as my build command.&lt;/p&gt;
&lt;p&gt;By default, Render published my site to &lt;strong&gt;nextpertise.onrender.com&lt;/strong&gt;, but adding a custom domain is super-easy.  The setup screen provides instructions on setting up your DNS and tests to confirm that this step is complete.  The Nextpertise DNS is at Network Solutions, so it was easy enough to add the required records and the changes replicated overnight and were working this morning.  Render automatically assigns certs and makes the site available via https (I literally did nothing to enable this feature, it &lt;em&gt;just worked&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Render can redirect traffic to unknown pages.  I setup a rule to redirect this traffic to 404.html.  In Hugo, I created a 404.html file under &lt;em&gt;theme/layouts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When I finish this update, I&amp;rsquo;ll commit my local changes and push to Github.  Then I need to go to Render and click Manual Deploy.  Render will pull the changes, build the site using Hugo, and the new site will be online!  Render supports a build api hook, so I may look into using Githubs CI to trigger a Render deploy.  For now, I&amp;rsquo;m focused on getting enough content onto the site to make it interesting and cleaning up the look.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of the pull and build.
&lt;img src=&#34;https://www.nextpertise.net/Render_deploy.png#floatright&#34; alt=&#34;Render build&#34;&gt;&lt;/p&gt;
&lt;p&gt;Render deployed my site to Oregon - I wasn&amp;rsquo;t given an option, but that seems reasonable for a free service.  They mention that &amp;ldquo;lightning-fast CDN&amp;rdquo; is included and accessing the site from the eastern US does seem reasonably quick.  &lt;em&gt;If one of my friends in India reads this, could you provide some feedback on what it&amp;rsquo;s like for you?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m really impressed with Render and - based on two days of playing - definitely recommend you take a look.  I still intend to deploy to S3, for comparison and to get some experience with S3, so I&amp;rsquo;ll write about that in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building this site</title>
      <link>https://www.nextpertise.net/building-this-site/</link>
      <pubDate>Mon, 20 Jul 2020 11:38:07 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/building-this-site/</guid>
      <description>&lt;p&gt;This site was built using Hugo, which is a static site generator.  Hugo allows me to create templates and then write my content in markdown.  This makes it easy to update the site without having to fiddle with HTML.  It also makes updating the look and feel easy, because I can update the template and regenerate the site.&lt;/p&gt;
&lt;p&gt;Hugo is found in most distributions - for Ubuntu I installed it with &amp;ldquo;apt install hugo&amp;rdquo;.  I&amp;rsquo;ve found that running the local Hugo dev server (&amp;ldquo;hugo server -D&amp;rdquo;) and working with the files in VSCodium is a super easy way to develop.&lt;/p&gt;
&lt;p&gt;Mike Dane at Giraffe Academy has done an excellent series of videos that walk through Hugo.  Rather than repeat his work, I will tell you a little about my site.&lt;/p&gt;
&lt;p&gt;Hugo supports multiple taxonomies, but for now I&amp;rsquo;ve focused on using tags.  I&amp;rsquo;ve defined some parameters in my front matter for a github link, youtube link, and other references.  If I populate those parameters, they automatically display on the single template.  I used an HTML Grid for the list pages and set it to scale based on window width to produce a nice responsive behavior.  Hugo supports using themes and there are some great options, but I&amp;rsquo;ve chosen to build my own theme (&amp;ldquo;next&amp;rdquo;) because I wanted to understand the process.  You&amp;rsquo;re welcome to clone the theme.  Better yet, tell me what I did wrong!&lt;/p&gt;
&lt;p&gt;This website is maintained on GitHub.  If you like the theme, clone the submodule.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Nextpertise</title>
      <link>https://www.nextpertise.net/about/</link>
      <pubDate>Mon, 20 Jul 2020 11:38:01 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/about/</guid>
      <description>&lt;p&gt;This website is a place where we can write about and share the things we&amp;rsquo;re working on.  Our interests are varied, so the content will range a bit.  Your respectful thoughts and suggestions are welcomed.  Articles will be updated as better ideas emerge!&lt;/p&gt;
&lt;p&gt;To help you make the most of the site, the articles are tagged in a way that lets you filter to the posts you need.  Some articles will have a youtube reference; this will point to a youtube channel where a video version of the article is available.  Some articles have a github reference.  As much as possible, we will create a repository of each project so that you can clone and improve it.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ve learned these things through the works of others.  Where possible, attributions or additional references for further reading have been included.&lt;/p&gt;
&lt;p&gt;We wish you the best on your journey!&lt;/p&gt;
&lt;h2 id=&#34;about-brent-stewart&#34;&gt;About Brent Stewart&lt;/h2&gt;
&lt;p&gt;I have been in the IT industry for about 30 years.  Early in my career, I benefitted enormously from a knowledgeable mentor.  I&amp;rsquo;ve found that my default approach to a lot of my career has been to teach, whether I&amp;rsquo;m part of a team, leadership, working with clients, or explaining things to management.  I hope that I&amp;rsquo;ve been able to mentor others along the way and &amp;ldquo;pay it forward.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I have a Bachelor&amp;rsquo;s in Physics and a Masters in Computer Science / Information Security.  I&amp;rsquo;ve written numerous books, mostly for Cisco Press.  I&amp;rsquo;ve included links below to the ones still in print.  I&amp;rsquo;ve been employed as an IT Director and I&amp;rsquo;ve included my LinkedIn profile below - feel free to link to me and please mention that you saw my website!&lt;/p&gt;
&lt;p&gt;My professional interests include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Virtualization&lt;/li&gt;
&lt;li&gt;Automation and Cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My PCs all run Linux (mostly Ubuntu variants) and I work with and contribute to GNS3, so those topics will come up on this site.  On a personal note, I&amp;rsquo;ve been married 24 years and have four kids!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
