<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache on </title>
    <link>https://www.nextpertise.net/tags/apache/</link>
    <description>Recent content in Apache on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Sep 2021 13:00:30 -0400</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/tags/apache/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using WebDAV on Apache</title>
      <link>https://www.nextpertise.net/posts/210906_apachedav/</link>
      <pubDate>Mon, 06 Sep 2021 13:00:30 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/posts/210906_apachedav/</guid>
      <description>&lt;p&gt;In recent articles, I walked through how to setup a home &lt;a href=&#34;https://www.nextpertise.net/posts/210830_apache&#34;&gt;webserver&lt;/a&gt; with &lt;a href=&#34;https://httpd.apache.org&#34;&gt;Apache&lt;/a&gt; on Linux and how to configure home &lt;a href=&#34;https://www.nextpertise.net/posts/210831_dnsonubuntu&#34;&gt;DNS server&lt;/a&gt; using &lt;a href=&#34;https://www.isc.org/bind/&#34;&gt;bind&lt;/a&gt; on Linux, complete with custom in-home domain for local name resolution.  This article revisits the webserver and creates a second virtual host to handle WebDav.&lt;/p&gt;
&lt;p&gt;WebDAV is a file sharing protocol built on top of HTTP.  Many operating systems can attach to WebDAV folders to upload and download files, including Linux, Windows, Mac, IOS, and Android.  I have a password database that I want to keep sync&amp;rsquo;d between different computers and phones and I&amp;rsquo;m not comfortable hosting that &amp;ldquo;in the cloud&amp;rdquo;, so this allows me to self-host.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using Ubuntu Server 21.04 for this exercise.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-dns&#34;&gt;Setting Up DNS&lt;/h2&gt;
&lt;p&gt;My forward lookup zone file includes an A record for the server and a CNAME for the dav share, similar to the output below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www IN  A   192.168.26.53
dav IN  CNAME   www.stewart.lan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the zone file is updated and &lt;strong&gt;named&lt;/strong&gt; restarted, this can be tested by pinging &amp;ldquo;&lt;a href=&#34;http://www.stewart.lan&#34;&gt;www.stewart.lan&lt;/a&gt;&amp;rdquo; and &amp;ldquo;dav.stewart.lan&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-apache&#34;&gt;Setting up Apache&lt;/h2&gt;
&lt;p&gt;If you haven&amp;rsquo;t already done so, the first thing to do is to install apache2.  Next, enable the webdav Apache modules.  Apache using &lt;strong&gt;a2enmod&lt;/strong&gt; and &lt;strong&gt;a2dismod&lt;/strong&gt; for handling modules.  Finally, create a folder to handle the WebDAV files and set the permissions up.  When complete, restart Apache to load the modules.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install apache2
sudo a2enmod dav
sudo a2enmod dav_fs
sudo mkdir /var/www/dav
sudo chown -R wwwroot:wwwroot /var/www/dav
sudo systemctl restart apache2.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setting-up-the-dav-site&#34;&gt;Setting up the DAV site&lt;/h2&gt;
&lt;p&gt;Apache is now ready to host a WebDAV site, but needs a configuration.  For this, create a text file under /etc/apache2/sites-available (I named mine &lt;em&gt;dav.conf&lt;/em&gt;).  The serveralis parameter tells it to respond to requests to dav.stewart.lan and the alias directive tells Apache the root location is the &lt;em&gt;dav&lt;/em&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brent@webnamer:/etc/apache2/sites-available$ cat dav.conf 
DavLockDB /var/www/DavLock                      #database file Apache uses to lock files
&amp;lt;VirtualHost *:80&amp;gt;
    ServerName stewart.lan
    ServerAlias dav.stewart.lan
    alias / /var/www/dav
        ServerAdmin brent@stewart.tc
        DocumentRoot /var/www/dav/
        &amp;lt;Directory /var/www/dav/&amp;gt;
                Options Indexes MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
    &amp;lt;/Directory&amp;gt;
    &amp;lt;Location /dav&amp;gt;
        DAV On
        AuthType Basic
        AuthName &amp;quot;webdav&amp;quot;
        AuthUserFile /var/www/passwd.dav
        Require valid-user
    &amp;lt;/Location&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable the site and reload Apache&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a2ensite dav.conf
sudo systemctl restart apache2.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-authentication&#34;&gt;Add Authentication&lt;/h2&gt;
&lt;p&gt;Go to the directory referenced by DavLockDB and create an empty file named &lt;em&gt;users.password&lt;/em&gt;.  Set the file ownership to www-data.  Finally, add users to this file using htdigest (you&amp;rsquo;ll be prompted for passwords).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo touch /var/www/users.password
sudo chown www-data:www-data /var/www/passwd.dav
sudo htdigest /var/www/passwd.dav webdav newuser
Adding user newuser in realm webdav
New password:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;confirming-the-setup&#34;&gt;Confirming the setup&lt;/h2&gt;
&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of ways to test.  You can browse to that URL, use an application, or attach to it from your file manager using the url webdav://dav.myserver.  Confirm that you are prompted for a password as expected!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Apache Setup on Linux</title>
      <link>https://www.nextpertise.net/posts/210830_apache/</link>
      <pubDate>Mon, 30 Aug 2021 16:38:48 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/posts/210830_apache/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been running the free version of ESXi 6.5 for a while, but the vulnerabilities kept piling up and I had issues upgrading it.  I&amp;rsquo;ve been looking at ProxMox VE for a while and last week I decided to give it a chance.  I want to get more experience with the server before I write about it, so I&amp;rsquo;ll start by detailing a simple process to get a local webserver running.  Browsers keep trying to throw distracting junk in front of me for start pages when what I really want is to quickly get to the sites I need.  I put together a simple page that organizes my personal and work links for this purpose.&lt;/p&gt;
&lt;p&gt;I built this server on Ubuntu 21.04 Server and my instructions are written from that perspective.  Notes around the firewall and restarting the service will vary by distribution and version, but I&amp;rsquo;ll leave translation as an exercise to the reader.  Installing a webserver is straightfoward - there are a variety to choose from, but Apache is good for this purpose because it&amp;rsquo;s so well documented.  Once the package is downloaded and the service started, you should be able to browse to http://127.0.0.1 and see the default Apache page.  When I did this at home, Ubuntu 21.04 had the firewall up by default, so I needed to allow the Apache service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install apache2
sudo ufw allow &#39;Apache&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll need to put your files somewhere for serving.  Apache puts content in &lt;em&gt;/var/www&lt;/em&gt; by default so I created a directory for my site user at &lt;em&gt;/var/www/stewart&lt;/em&gt;.  With that done, the website needs to be defined for Apache.  The Apache config files are found at &lt;em&gt;/etc/apache2&lt;/em&gt;.  To setup a new site I created a &lt;em&gt;stewart.conf&lt;/em&gt; under &lt;em&gt;/etc/apache2/sites-available&lt;/em&gt;.  Below is a simple configuration file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin my@email
    ServerName www.stewart.local
    ServerAlias www.stewart.local
    DocumentRoot /var/www/stewart
    &amp;lt;Directory /var/www/stewart&amp;gt;
        Options Indexes FollowSymLinks Multiviews
        AllowOverride All
        Require all granted
        allow from all
    &amp;lt;/Directory&amp;gt;
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The site then needs to be activated.  Enabling the site is done with &lt;strong&gt;a2ensite&lt;/strong&gt; and it can be disabled with &lt;strong&gt;a2dissite&lt;/strong&gt;.  This will create a link into the &lt;em&gt;/etc/apache2/sites-enabled/&lt;/em&gt; directory.  The web service will need to be restarted at that point as well.  When it restarts, it reads the conf files it finds in sites-enabled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2ensite stewart.conf
sudo systemctl reload apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, you should be able to browse to the local server and see the site!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
