<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Nextpertise</title>
    <link>https://www.nextpertise.net/tags/hugo/</link>
    <description>Recent content in Hugo on Nextpertise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Aug 2020 08:25:02 -0400</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JAMStack</title>
      <link>https://www.nextpertise.net/jamstack/</link>
      <pubDate>Mon, 17 Aug 2020 08:25:02 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/jamstack/</guid>
      <description>&lt;p&gt;I wrote a few weeks ago about setting up this site using &lt;a href=&#34;https://www.nextpertise.net/building-this-site/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://www.nextpertise.net/render/&#34;&gt;Render&lt;/a&gt;.  It&amp;rsquo;s become clear since then that what I &amp;ldquo;discovered&amp;rdquo; was a developed concept aimed at solving big problems in web development and that my use case was the simplest use.  Some of you were no doubt well ahead of me, but couldn&amp;rsquo;t tell me because I didn&amp;rsquo;t have a comment system on the blog until this week.
Hugo and Render are one iteration of a concept called the JAMStack.&lt;/p&gt;
&lt;h3 id=&#34;you-should-consider-jamstack&#34;&gt;You should consider JAMStack&lt;/h3&gt;
&lt;p&gt;LAMP is a particular implementation of a web server.  By comparison, JAMStack is a loose collection of ideas about how to assemble the pieces needed to serve a webpage.  I have a diatribe on the &amp;ldquo;loose but enlightening concept&amp;rdquo; to &amp;ldquo;marketecture babble&amp;rdquo; cycle, but I won&amp;rsquo;t bore you with it.  Suffice to say that JAMStack is still early in the process and thus still valuable.&lt;/p&gt;
&lt;p&gt;With JAMStack we are removing the ediface of a database/content management system/webserver stack.  The old model stored content in a database and built HTML on the fly.  It was difficult on many levels - building, updating, and securing the pieces, maintaining capacity and availability, and difficult for content creators to view their finished page.&lt;/p&gt;
&lt;p&gt;JAMStack, as originally defined, is JavaScript, APIs, and Markup.  For Nextpertise, this is Hugo+Markup, 3rd Party APIs, and GitHub+Render.  Content is easily created and edited, then pushed straight to a Content Distribution Network (CDN) which provides fast response everywhere in the world.  I don&amp;rsquo;t have to build, license, or grow servers.  I have a local copy of Nextpertise in a local Git repository and can build as much as I want with very little effort.&lt;br&gt;
&lt;img src=&#34;https://www.nextpertise.net/JAMstack.png#floatright&#34; alt=&#34;JAMStack&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTML is a markup language, but it&amp;rsquo;s complicated and it entangles site design into the content.  Markdown is a simplified markup language that is human-readable.  I write content using VSCodium as a markdown file.  Hugo then compiles this markdown file against a template (in the case of this page, the &lt;em&gt;single.html&lt;/em&gt; file in the &lt;em&gt;themes/layouts/_default&lt;/em&gt; directory).  In the VSCodium terminal, I&amp;rsquo;m running &lt;strong&gt;Hugo server -D&lt;/strong&gt; and a browser is automatically updating a view of this page as I save.  When complete, I can run &lt;strong&gt;hugo server&lt;/strong&gt; and it will output my entire site as a set of html files in the &lt;em&gt;public&lt;/em&gt; directory.  Hugo and VSCodium are open source and well supported by their communities, but if you want to use something different there are too many choices for me to list.  I hear good things about Jekyll, Gatsby, and Eleventy, for instance.&lt;/p&gt;
&lt;p&gt;Once the site is updated, I push the local copy to Github.  Git provides a backup and handles version control.  It also handles permissions and tracks who makes changes, so I can invite collaborators over time.  Finally, Git provides the Continuous Integration piece.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t actually compile HTML locally.  Hugo shows it on the fly for development, but keeping a local public directory and dragging file to a host can create a problem with old file versions still present.  Better to compile a clean copy with each push, and GitHub handles that for me using a continuous integration (CI) process.  When I push a change to Github, a process automatically kicks off to compile the HTML and pass it to Render for distribution.&lt;/p&gt;
&lt;p&gt;Speaking of CDNs - I love working with Render.  I chose them after inadequate research and thought they were entirely unique.  It turns out that there are a number of ways to host static sites.  I wrote about S3: good, but doesn&amp;rsquo;t have a way to auto-deploy from Github.  I&amp;rsquo;ve heard good things about CloudFlare, Firebase, and GCP as well, but none of them have the CI integration.  If that&amp;rsquo;s a major factor for you, also look at GitHub pages and Netlify.  Of those options, I want to call out Netlify as providing a lot of support and documentation to the larger community.&lt;/p&gt;
&lt;p&gt;Everything I&amp;rsquo;ve discussed so far is around static content.  Great for a blog, but serious sites require user feedback for things like purchases and comments.  In the case of Nextpertise, adding a comment option looked like it was going to require standing up an EC2 instance and deploying a service that I could embed in the page.  But I really don&amp;rsquo;t want to build and secure a server and I especially don&amp;rsquo;t want to &lt;em&gt;pay&lt;/em&gt; for one.  This is where JAMStack gets into the API part.&lt;/p&gt;
&lt;p&gt;There are services to which I can subscribe that will provide a tenanted commenting capability for my site.  The biggest of these is Disqus.  Disqus appears to be a great choice and reasonable plans are available.  In the end, I used &lt;em&gt;utteranc.es&lt;/em&gt;, which is a bit of code that leverages Github APIs to store comments in Github issues.  I&amp;rsquo;m not building, I&amp;rsquo;m consuming.  The JAMStack model is to use APIs (like &lt;em&gt;utteranc.es&lt;/em&gt;) instead of incorporating that logic and - when you reflect on it - it&amp;rsquo;s a Unix-like philosophy of &lt;em&gt;doing one thing well&lt;/em&gt; and coupling those things at a higher level.  The philosophy I&amp;rsquo;ll take is to use third party APIs when possible, then to develop a Lambda if needed, then to stand up a server if I have to.  I&amp;rsquo;ve seen third party apis for maps, weather, jokes, and even shopping carts.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re working our way backward thorough the JAM.  Javascript would be added to help with interactivity, but at this point I don&amp;rsquo;t have a use case on my site.  So, mid-August Nextpertise is no javascript, utteranc.es API for commenting, and Hugo&amp;gt;Git&amp;gt;Render for the static site.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m continuing to read on this and I want to be careful not to present myself as an expert.  That said, I&amp;rsquo;m so enthusiastic about what I see that I wanted to share what I&amp;rsquo;ve learned with you.  I&amp;rsquo;ll check back on this topic as I have a more developed picture.  I&amp;rsquo;d also welcome your comments and suggestions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Render</title>
      <link>https://www.nextpertise.net/render/</link>
      <pubDate>Fri, 24 Jul 2020 08:21:27 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/render/</guid>
      <description>&lt;h3 id=&#34;tldr-you-should-take-a-look-at-rendercom-&#34;&gt;TLDR: you should take a look at Render.com&lt;/h3&gt;
&lt;p&gt;I wrote in a previous post that I decided to build my site using Hugo, a decision I&amp;rsquo;m still really tickled with.  My initial draw to a Static Site Generator was to host my site in S3.  There&amp;rsquo;s a lot of attraction there - creating a public S3 bucket is easy, it&amp;rsquo;s low-cost, there&amp;rsquo;s no server to maintain, and the data is replicated within region between Availability Zones.  From a security perspective, S3 is easy to secure and the bucket is isolated.&lt;/p&gt;
&lt;p&gt;I have experience with the major cloud providers and my high-level opinion is that AWS is the most mature, has the most complete set of products, and is the easiest to deal with.  Plus, I&amp;rsquo;m working my way through the AWS certs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/render.png#floatright&#34; alt=&#34;Render Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;In coming up to speed on Hugo, I heard about a site called Render.  The salient points were that Render offered free static-site hosting and would pull your site from Git.  The Git integration was attractive - I had already decided to put the theme there and now I could just put the entire site there.  I decided to try Render.&lt;/p&gt;
&lt;p&gt;At the time of this writing, I&amp;rsquo;ve had a Render account for two days.  Signup was easy and didn&amp;rsquo;t require a credit card.  They support federation with Github, so I used that option and that may have made things easier later.&lt;/p&gt;
&lt;p&gt;Forcing me to give a card when I signup for something free always makes me feel like I&amp;rsquo;m being suckered into something.  In fact, I had an experience with Azure where I signed up for a &amp;ldquo;free&amp;rdquo; tier and ended up getting a big bill a couple months later so I have empirical reasons to be wary.&lt;/p&gt;
&lt;p&gt;I was super-impressed with the Git integration.  I went to Github and created a new &amp;ldquo;Nextpertise&amp;rdquo; project, then went to my Hugo directory and made it a repository and sync&amp;rsquo;d it to Github.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git init&lt;br&gt;
$ git add .&lt;br&gt;
$ git commit -m &amp;ldquo;Initial commit&amp;rdquo;&lt;br&gt;
$ git remote add origin &lt;a href=&#34;https://github.com/brentstewart/nextpertise.git&#34;&gt;https://github.com/brentstewart/nextpertise.git&lt;/a&gt;&lt;br&gt;
$ git push -f origin master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hugo takes your markdown content and compiles it against templates to generate a public directory of html files that can be copied to a web server.  When you are ready to deploy, just run &amp;ldquo;hugo&amp;rdquo; with no options.  The caveat here is that Hugo doesn&amp;rsquo;t clear out old content first, and will just copy the new build on top of the old.  Best practice then is to delete the public directory before regenerating.  So before setting up Render, I generated the public directory and sync&amp;rsquo;d my repo to Github.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/Render_setup.png#floatright&#34; alt=&#34;Render Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;From Render, I selected New &amp;ldquo;Web Service&amp;rdquo; and selected the repository I wanted to use.  Render asked for the web content directory (the &amp;ldquo;Publish directory&amp;rdquo;)  and the build command - here&amp;rsquo;s where I realized I messed up.  I went back and removed my &lt;strong&gt;public&lt;/strong&gt; directory and resync&amp;rsquo;d to Github, then used  &lt;strong&gt;hugo&lt;/strong&gt; as my build command.&lt;/p&gt;
&lt;p&gt;By default, Render published my site to &lt;strong&gt;nextpertise.onrender.com&lt;/strong&gt;, but adding a custom domain is super-easy.  The setup screen provides instructions on setting up your DNS and tests to confirm that this step is complete.  The Nextpertise DNS is at Network Solutions, so it was easy enough to add the required records and the changes replicated overnight and were working this morning.  Render automatically assigns certs and makes the site available via https (I literally did nothing to enable this feature, it &lt;em&gt;just worked&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Render can redirect traffic to unknown pages.  I setup a rule to redirect this traffic to 404.html.  In Hugo, I created a 404.html file under &lt;em&gt;theme/layouts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When I finish this update, I&amp;rsquo;ll commit my local changes and push to Github.  Then I need to go to Render and click Manual Deploy.  Render will pull the changes, build the site using Hugo, and the new site will be online!  Render supports a build api hook, so I may look into using Githubs CI to trigger a Render deploy.  For now, I&amp;rsquo;m focused on getting enough content onto the site to make it interesting and cleaning up the look.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of the pull and build.
&lt;img src=&#34;https://www.nextpertise.net/Render_deploy.png#floatright&#34; alt=&#34;Render build&#34;&gt;&lt;/p&gt;
&lt;p&gt;Render deployed my site to Oregon - I wasn&amp;rsquo;t given an option, but that seems reasonable for a free service.  They mention that &amp;ldquo;lightning-fast CDN&amp;rdquo; is included and accessing the site from the eastern US does seem reasonably quick.  &lt;em&gt;If one of my friends in India reads this, could you provide some feedback on what it&amp;rsquo;s like for you?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m really impressed with Render and - based on two days of playing - definitely recommend you take a look.  I still intend to deploy to S3, for comparison and to get some experience with S3, so I&amp;rsquo;ll write about that in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building this site</title>
      <link>https://www.nextpertise.net/building-this-site/</link>
      <pubDate>Mon, 20 Jul 2020 11:38:07 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/building-this-site/</guid>
      <description>&lt;p&gt;This site was built using Hugo, which is a static site generator.  Hugo allows me to create templates and then write my content in markdown.  This makes it easy to update the site without having to fiddle with HTML.  It also makes updating the look and feel easy, because I can update the template and regenerate the site.&lt;/p&gt;
&lt;p&gt;Hugo is found in most distributions - for Ubuntu I installed it with &amp;ldquo;apt install hugo&amp;rdquo;.  I&amp;rsquo;ve found that running the local Hugo dev server (&amp;ldquo;hugo server -D&amp;rdquo;) and working with the files in VSCodium is a super easy way to develop.&lt;/p&gt;
&lt;p&gt;Mike Dane at Giraffe Academy has done an excellent series of videos that walk through Hugo.  Rather than repeat his work, I will tell you a little about my site.&lt;/p&gt;
&lt;p&gt;Hugo supports multiple taxonomies, but for now I&amp;rsquo;ve focused on using tags.  I&amp;rsquo;ve defined some parameters in my front matter for a github link, youtube link, and other references.  If I populate those parameters, they automatically display on the single template.  I used an HTML Grid for the list pages and set it to scale based on window width to produce a nice responsive behavior.  Hugo supports using themes and there are some great options, but I&amp;rsquo;ve chosen to build my own theme (&amp;ldquo;next&amp;rdquo;) because I wanted to understand the process.  You&amp;rsquo;re welcome to clone the theme.  Better yet, tell me what I did wrong!&lt;/p&gt;
&lt;p&gt;This website is maintained on GitHub.  If you like the theme, clone the submodule.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
