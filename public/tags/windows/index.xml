<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on </title>
    <link>https://www.nextpertise.net/tags/windows/</link>
    <description>Recent content in Windows on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2021 13:43:09 -0500</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deskreen</title>
      <link>https://www.nextpertise.net/posts/210201-deskreen/</link>
      <pubDate>Mon, 01 Feb 2021 13:43:09 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/210201-deskreen/</guid>
      <description>&lt;p&gt;Deskreen is an open-source utility that allows you to send your Windows, Mac, or Linux desktop onto another screen, including another computer, a tablet, or even a phone.  It can duplicate an application, duplicate an entire display, or extend the desktop and treat the other computer as an additional monitor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deskreen.com/img/plugs/hdmi.jpg#floatsmallleft&#34; alt=&#34;HDMI Plug&#34;&gt;
Deskreen outputs your display to a webpage with an embedded video.  Running the application prompts you to choose an application, existing display, or new display.  It then displays the produced webpage in text and with a 2D barcode.  The page, when opened on a separate device, allows you to play the video stream.&lt;/p&gt;
&lt;h2 id=&#34;testing-deskreen&#34;&gt;Testing Deskreen&lt;/h2&gt;
&lt;p&gt;An easy scenario to imagine would be using a tablet as a second screen for a laptop sitting in a coffee shop.  I tested exactly this setup using PopOS! on a 3rd Gen i7 and a Fire HD 10 9th gen tablet.  I downloaded Deskreen from Github as a DEB and installed it.  In order to fool my laptop into thinking it should produce a second screen, I bought &lt;a href=&#34;https://www.amazon.com/gp/product/B07C4TWZRM/ref=ppx_yo_dt_b_asin_title_o04_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;HDMI dummy plugs&lt;/a&gt;.  I used Deskreen version 1.02 and 1.03 while testing.&lt;/p&gt;
&lt;p&gt;Once running, Deskreen produced a barcode that I was able to scan from the tablet and use to connect to a webpage.  You can manually type in the link, but it&amp;rsquo;s long and it&amp;rsquo;s randomly generated each time the app start sharing.  I clicked a button on the web page to register.  Back to the PC, where I accepted the connection and chose the output.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/210201_Deskreen.jpg#floatsmallright&#34; alt=&#34;My Setup&#34;&gt;
The new display was initially set to the same as my main screen - 1920x1080.  The video was down-converted, but everything was too small to be usable.  I used the display options in PopOS! to adjust the size to 1280x720 and this created a very usable display.  The new screen is responsive, with maybe barely a touch of latency similar to using a low-refresh-rate monitor.  I imagine that the quality and usage of wifi will impact this, but I wasn&amp;rsquo;t able to test that scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/210201_Deskreen2.jpg#floatsmallleft&#34; alt=&#34;Phone&#34;&gt;
Just for fun, I sent the settings app to my phone at the same time.  Running two displays didn&amp;rsquo;t seem to bother the PC.  I left the webpage running on the tablet for hours and battery life on the tablet seemed surprisingly good.  I think I could run it for a full day (or more) without having to charge the tablet.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I could imagine a variety of cases where this could be useful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extra screens&lt;/li&gt;
&lt;li&gt;sharing screens for troubleshooting&lt;/li&gt;
&lt;li&gt;connecting to smart TVs or displays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The developer, Pavlo Buidenkov, has an excellent set of directions about using Deskreen at deskreen.com.  He also mentions that he&amp;rsquo;s hoping to find developers to collaborate with, so check it out!&lt;/p&gt;
&lt;p&gt;For me, this utility works well and fills a niche in my toolset.  It will be a part of my standard build from here on out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powerline Windows</title>
      <link>https://www.nextpertise.net/posts/201130_powerline-windows/</link>
      <pubDate>Mon, 30 Nov 2020 18:23:57 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/201130_powerline-windows/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://docs.microsoft.com/en-us/windows/terminal/images/powerline-powershell.png#floatright&#34; alt=&#34;Powerline on Windows&#34;&gt;
I work in Windows from time to time.  Writing the article on the &lt;a href=&#34;https://www.nextpertise.net/tilix&#34;&gt;Tilix&lt;/a&gt; Powerline setup made me realize that I wanted a similar spiffy prompt in Windows.  Let&amp;rsquo;s step through how to set that up!&lt;/p&gt;
&lt;h2 id=&#34;step-0-we-_are_-programmers---windows-terminal&#34;&gt;Step 0 (We &lt;em&gt;are&lt;/em&gt; programmers) - Windows Terminal&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha&#34;&gt;Windows Terminal&lt;/a&gt; is a nice addition to Windows, but doesn&amp;rsquo;t ship with Windows 10.  It is a terminal in the Linux-sense, and support tabs and customizations.  Alas, it doesn&amp;rsquo;t do tiling, but it supports Command Line, Powershell, WSL, SSH, and Azure Cloud.  The simplest way to get it is from the Windows Store, but you can also use the link above.&lt;/p&gt;
&lt;h2 id=&#34;step-1---install-a-font-that-supports-ligatures&#34;&gt;Step 1 - Install a Font that Supports Ligatures&lt;/h2&gt;
&lt;p&gt;I prefer &lt;a href=&#34;https://www.jetbrains.com/lp/mono/&#34;&gt;JetBrains Mono&lt;/a&gt;, but this is definitely a question of art.  Microsoft&amp;rsquo;s &lt;a href=&#34;https://github.com/microsoft/cascadia-code/releases&#34;&gt;Cascadia&lt;/a&gt; is one option.  Other options, like the excellent Inconsolata can be found at sites like &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Fonts&lt;/a&gt; or &lt;a href=&#34;https://www.programmingfonts.org/&#34;&gt;Programming Fonts&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-2---install-git&#34;&gt;Step 2 - Install Git&lt;/h2&gt;
&lt;p&gt;Because Powerline support Git, I recommend going ahead and getting it installed so you can see it work.  You can download and install it from &lt;img src=&#34;https://git-scm.com/downloads&#34; alt=&#34;here&#34;&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-3---setup-in-powershell&#34;&gt;Step 3 - Setup in Powershell&lt;/h2&gt;
&lt;p&gt;Open a Powershell session and install the posh-git and &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;oh-my-posh&lt;/a&gt; add-ins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Install-Module posh-git -Scope CurrentUser  
Install-Module oh-my-posh -Scope CurrentUser  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enable these modules to start with each new session via the terminal profile.  To open the profile, type &lt;strong&gt;notepad $profile&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#add these lines  &lt;/span&gt;
Import-Module posh-git  
Import-Module oh-my-posh  
Set-Theme agnoster  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that many &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh#themes&#34;&gt;themes&lt;/a&gt; are pre-built for oh-my-posh.  Refer to the github site to see samples.  Agnoster is my personal favorite because it&amp;rsquo;s less busy and keeps the prompt on one line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/WinTerminal.png#floatright&#34; alt=&#34;Settings&#34;&gt;
Next, you&amp;rsquo;ll need to update the terminal settings to use the font.  In Windows Termianl, go to &lt;em&gt;Menu &amp;gt; settings&lt;/em&gt; (this will open VSCode if you have it installed).  Search for the &lt;em&gt;profiles&lt;/em&gt; section and add the &lt;em&gt;fontFace&lt;/em&gt; directive as shown below.  Note that we&amp;rsquo;re setting up Powerline to work with Powershell, not in the other environments, but I also went into the Command Prompt, Ubuntu, and Azure sections and changed them to use my new font.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;profiles&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;  
    {  
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defaults&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;  
      {  
       // Put settings here that you want to apply to all profiles.  
      },  
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;  
        [  
          {  
            // Make changes here to the powershell.exe profile.  
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span&gt;,  
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Windows PowerShell&amp;#34;&lt;/span&gt;,  
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;commandline&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;powershell.exe&amp;#34;&lt;/span&gt;,  
            __&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fontFace&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JetBrains Mono&amp;#34;&lt;/span&gt;,__  
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; false  
            },  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;##Step 4 - Setup in WSL
For WSL, we&amp;rsquo;ll add a Go version of powerline.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;sudo apt install golang-go  
go get -u github.com/justjanne/powerline-go  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then edit the terminal settings to make sure it&amp;rsquo;s used to display new lines.  Edit via &lt;strong&gt;nano ~/.bashrc&lt;/strong&gt; and add the following snippet to the end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/go  
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; _update_ps1&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  
  PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;$GOPATH/bin/powerline-go -error $?&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$TERM&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GOPATH&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/powerline-go&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;  
  PROMPT_COMMAND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_update_ps1; &lt;/span&gt;$PROMPT_COMMAND&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Voila!&lt;/em&gt;  You should have Powerline functionality and cool fonts working in the different prompts available in Windows.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winapps</title>
      <link>https://www.nextpertise.net/posts/201110_winapps/</link>
      <pubDate>Tue, 10 Nov 2020 08:24:53 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/201110_winapps/</guid>
      <description>&lt;p&gt;Winapps is a project that allows running Windows applications as if they were a part of a Linux Desktop. It&amp;rsquo;s a sleight of hand - the apps run in a VM and an RDP window is created for just that application. However, it integrates with the Linux environment and even let&amp;rsquo;s you use &amp;ldquo;open with&amp;rdquo; types of functionality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brentstewart/winapps/develop/demo/demo.gif#floatright&#34; alt=&#34;WinApps&#34;&gt;&lt;/p&gt;
&lt;p&gt;To give it a try, clone the code from &lt;a href=&#34;https://github.com/Fmstrat/winapps&#34;&gt;GitHub&lt;/a&gt;. Remember that it&amp;rsquo;s running programs that are installed on a VM. If you don&amp;rsquo;t have a Windows VM, the project includes an empty KVM machine that Windows and applications can be installed within. You can use an existing Windows VM (or even physical machine) if you have one. Windows doesn&amp;rsquo;t have to be a VM on your local machine - I set this up to run with a copy of Windows I&amp;rsquo;m running on my ESXi server downstairs. Theoretically, you could use your laptop or a remote computer to be the &amp;ldquo;Windows source&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Create a text file at _~/.config/winapps/winapps.conf that looks like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;RDP_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyWindowsUser&amp;#34;&lt;/span&gt;  
RDP_PASS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyWindowsPassword&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#75715e&#34;&gt;#RDP_IP=&amp;#34;192.168.123.111&amp;#34;  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#DEBUG=&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The IP is only required if Windows is remote. The Debug command tells it to create a log and is optional.&lt;/p&gt;
&lt;p&gt;Finally, run the &lt;strong&gt;install.sh&lt;/strong&gt; script. This script will use the variables defined in the config file and login and scan Windows. If it finds a file it knows, it will setup the link, put an icon and entry in the local application menu, and link the appropriate mime-types.&lt;/p&gt;
&lt;p&gt;When I tested this, I ran into a couple issues running the install script. The script would timeout. Looking at the script, I saw that it was trying to use xfreerdp to login to Windows. I ran that command from the command line and saw that it wasn&amp;rsquo;t connecting. Troubleshooting on Windows revealed that I needed to enable remote desktop under settings&amp;gt;system&amp;gt;remote desktop. Doh! Re-testing with xfreerdp revealed that I needed to accept a certificate.&lt;/p&gt;
&lt;p&gt;With the RDP part confirmed working, I re-ran the script and &lt;em&gt;voila!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A lot of folks will be interested in running Office and those apps are defined, but I use my Windows VM mostly for things that can&amp;rsquo;t be done on Linux like running the Kindle application. Look in the repository under &lt;em&gt;apps&lt;/em&gt; and you&amp;rsquo;ll see that various programs are defined, each to a directory. In the directory is a definition file that includes mime-types consumed and a path to the application in Windows. There&amp;rsquo;s also an icon in the directory. This is what the install script references when it runs.&lt;/p&gt;
&lt;p&gt;I was able to create a Kindle definition file. I grabbed an SVG icon from Google Images and created an &lt;em&gt;info&lt;/em&gt; file that contained the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# GNOME shortcut name  &lt;/span&gt;
NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kindle&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Used for descriptions and window class  &lt;/span&gt;
FULL_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Amazon Kindle&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# The executable inside windows  &lt;/span&gt;
WIN_EXECUTABLE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\users\brent\appdata\local\amazon\kindle\application\kindle.exe&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# GNOME categories  &lt;/span&gt;
CATEGORIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Education&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# GNOME mimetypes  &lt;/span&gt;
MIME_TYPES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://microfilums.files.wordpress.com/2010/01/2260894625_ea1feecb2a.jpg#floatleft&#34; alt=&#34;Big Brains&#34;&gt;
I wanted to add the work I&amp;rsquo;d done back to the project, so I forked the &lt;em&gt;develop&lt;/em&gt; branch, added the files, and submitted a Pull Request back to &amp;ldquo;fmstrat&amp;rdquo;. I also added some troubleshooting suggestions for them based on my experience.&lt;/p&gt;
&lt;p&gt;This was a neat adventure to write up because it combines a lot of the things we&amp;rsquo;ve been discussing in this blog. The implementation is a lot like running an X application on a remote machine, which we discussed in &lt;a href=&#34;https://www.nextpertise.net/Using_SSH5&#34;&gt;Remotely Possible&lt;/a&gt;. Of course we talk a lot about Linux and using Linux in a Windows world, and we talk about Git.&lt;/p&gt;
&lt;p&gt;But this is another chance to hit on a favorite theme of mine. You don&amp;rsquo;t need to be gods-gift-to-programming to make meaningful and appreciated contributions to the open source community. In the day I took to play with this and contribute the Kindle definition, several other people also submitted apps and the library is quickly growing. Similar to defining GNS3 appliances, there&amp;rsquo;s a lot of ways to give back. There&amp;rsquo;s a real satisfaction to contributing in this way that I hope you have a chance to experience.&lt;/p&gt;
&lt;p&gt;As far as Winapps, as I mentioned at the beginning, it&amp;rsquo;s interesting and definitely looks cool. I&amp;rsquo;m not complete sold that it&amp;rsquo;s that much more useful than just pulling up a Windows VM, but it&amp;rsquo;s close enough that it will fit the work styles of some folks really well. It&amp;rsquo;s worth a look!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to write an event to Windows and Linux logs</title>
      <link>https://www.nextpertise.net/posts/201025_how_to_write_an_event_to_windows_event/</link>
      <pubDate>Sun, 25 Oct 2020 16:29:57 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/posts/201025_how_to_write_an_event_to_windows_event/</guid>
      <description>&lt;p&gt;Anyone who has trouble sleeping should discover the joys of reviewing Syslog data.  System logging contains a wealth of information that can assist in troubleshooting, security, and incident handling.  The hard part is wading through all the data to put together a useful and actionable story.  There are a wealth of tools to help us correlate and make sense these days, such as SIEM, but there are still times when we need to get into the data.&lt;/p&gt;
&lt;p&gt;One of the first problems we encounter in understanding syslog is figuring out where to start in the stream of events.  It would be nice if there were a bookmark that we could reference.  This article is about inserting that bookmark into either Windows Event logs or Linux Journals.&lt;/p&gt;
&lt;h2 id=&#34;powershell-sudo&#34;&gt;PowerShell sudo&lt;/h2&gt;
&lt;p&gt;A brief aside: The dichotomy of an admin PowerShell session and a regular PowerShell session is annoying.  One specific but near-to-my-heart example is the built-in terminal in Visual Studio Code (or VSCodium) for Windows, which uses a &amp;ldquo;non-admin&amp;rdquo; session.&lt;/p&gt;
&lt;p&gt;Linux systems have sudo.  Sudo allows a single command to run in an elevated state and sudo commands can be intermingled with un-priviledged commands.  The following script uses &lt;em&gt;scoop&lt;/em&gt; to grab a &amp;ldquo;sudo&amp;rdquo; application for Powershell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;iex (new-object net.webclient).downloadstring(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://get.scoop.sh&amp;#39;&lt;/span&gt;)
set-executionpolicy unrestricted -s cu &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt;  
scoop install sudo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-write-an-event-to-windows-event-log&#34;&gt;How to write an Event to Windows Event Log&lt;/h2&gt;
&lt;p&gt;This technique allows you to place comments into the Windows event logs, for instance to mark the beginning or completion of a change window.  We could also build this into certain scripts so that they left an entry when they ran.  It could even be automated into systems so that the markings took place without a person having to remember.&lt;/p&gt;
&lt;p&gt;The general process is to create an information &amp;ldquo;source&amp;rdquo; to write into (if it doesn&amp;rsquo;t already exist) and then to write the event.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-log-source&#34;&gt;Creating a log source&lt;/h3&gt;
&lt;p&gt;Since we&amp;rsquo;re creating log events for comments, let&amp;rsquo;s create a log source that matches our username.  If there are several admins, it may be a good idea to use a format like &amp;ldquo;admin-username&amp;rdquo; so that we can later search logs for &amp;ldquo;admin*&amp;rdquo;.  Creating a new source requires PowerShell to run with Administrator priviledges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;New-eventlog -logname application -source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brent&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that you can use the environment variable &lt;em&gt;$env:username&lt;/em&gt;.  You can build this into a script - if the source already exists, the command will return an error to that effect.&lt;/p&gt;
&lt;h2 id=&#34;logging-an-entry&#34;&gt;Logging an entry&lt;/h2&gt;
&lt;p&gt;To create a log entry use the &amp;ldquo;write-eventlog&amp;rdquo; cmdlet.  Specify the log (like Application or Security), the source that we defined, and the message.  The EventID isn&amp;rsquo;t significant, so you could also use this numeric field if you had something suitable (like a ticket number).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Write-EventLog -LogName Application -Source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brent&amp;#34;&lt;/span&gt; -EntryType Information -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample text&amp;#34;&lt;/span&gt; -EventID 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is also possible to write an entry on a remote computer. The example below assumes that the source &amp;ldquo;bstewart&amp;rdquo; exists on the remote computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Write-EventLog -computername &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server&amp;#34;&lt;/span&gt; -LogName Application -Source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bstewart&amp;#34;&lt;/span&gt; -EntryType Information -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample text&amp;#34;&lt;/span&gt; -EventID 1__  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scripting&#34;&gt;Scripting&lt;/h2&gt;
&lt;p&gt;This can all be simplified in a script, saved as &amp;ldquo;log.ps1&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;  
{  
        sudo New-eventlog -logname application -source $env:username  
}  
&lt;span style=&#34;color:#66d9ef&#34;&gt;Catch&lt;/span&gt;  
{  
    Write-Output &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Log source already exists&amp;#34;&lt;/span&gt;  
}  
Write-eventlog -logname application -source $env:username -entrytype information -message $args[0] -eventid 1  
write-host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The following was written to the Application log using the source $env:username for that log.&amp;#34;&lt;/span&gt;  
write-host $args[0]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run the command from powershell to write a string.  It will try to create a source based on your username.  If one exists, it will use it and keep moving.  The argument is passed through as the message.  You could easily extend this script to have a second argument to pass the eventid as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&amp;gt; .\log.ps1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Something happened&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;linux-much-easier&#34;&gt;Linux (much easier)&lt;/h1&gt;
&lt;p&gt;Writing to the Linux journal is pretty straight-forward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sample text&amp;#39;&lt;/span&gt; | Systemd-cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To take a look at this, just use &lt;strong&gt;journalctl -f&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll talk about logging to syslog another time, or maybe I can talk Myron into delving in because he has great experience with pulling things out of SIEMs.  Whether you use this in the scope of a SIEM or just for local logging, I&amp;rsquo;m sure you&amp;rsquo;ll find this idea useful.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
