<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on </title>
    <link>https://www.nextpertise.net/tags/aws/</link>
    <description>Recent content in AWS on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Dec 2020 20:35:31 -0500</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Changing EC2 IPs or Water Never Lies</title>
      <link>https://www.nextpertise.net/posts/201218_aws-changingec2ips/</link>
      <pubDate>Fri, 18 Dec 2020 20:35:31 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/201218_aws-changingec2ips/</guid>
      <description>&lt;p&gt;I had an issue that required changing the IP address of an EC2 instance.  &lt;strong&gt;The short version: you can&amp;rsquo;t change the primary IP of an EC2 instance.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;water-never-lies&#34;&gt;Water never lies&lt;/h2&gt;
&lt;p&gt;It seems intuitive to me that you can change an IP of a VM, so when asked I said &amp;ldquo;I think so&amp;rdquo;.  Turns out I answered from ignorance, but then I did a smart thing and actually tested the process to understand it better.&lt;/p&gt;
&lt;p&gt;My Dad was a builder.  One time when I was young he was questioned about grading, so he took me to the site and observed it in the rain.  Pointing out that the water ran away from the building, he said, &amp;ldquo;Water never lies&amp;rdquo;.  It seems obvious, but the older I get the more I find it profound.&lt;/p&gt;
&lt;p&gt;People &lt;em&gt;think&lt;/em&gt; a lot of things.  What someone &lt;em&gt;thinks&lt;/em&gt; will happen isn&amp;rsquo;t nearly as interesting as what actually happens.  It&amp;rsquo;s important to test our intuition against experience and continually validate and update our expectations.&lt;/p&gt;
&lt;h2 id=&#34;back-to-the-story&#34;&gt;Back to the story&lt;/h2&gt;
&lt;p&gt;To test IP address mobility in EC2, I created two t2.micro instances running Amazon Linux 2 (which we&amp;rsquo;ll call &amp;ldquo;A&amp;rdquo; and &amp;ldquo;B&amp;rdquo; for convenience). After choosing the AMI and instance type you are prompted to &amp;ldquo;Configure Instance&amp;rdquo;.  In this screen, after selecting the subnet the Network Interface details appear at the bottom of the page.  You can assign a valid unused IP - if left blank an IP will be assigned for you.  I allowed both instances to auto-assign an IP and they were assigned to the &amp;ldquo;primary&amp;rdquo; (eth0) interface.&lt;br&gt;
&lt;img src=&#34;https://www.nextpertise.net/AWS_Conf_IP.png#floatcenter&#34; alt=&#34;AWS IP configuration&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first thing I tried to do was to change the IP at the prompt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo ifconfig eth0 192.168.255.5 netmask 255.255.255.0  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That would work on a physical instance, but this left the instance unreachable.  After rebooting, I tried changing the IP address from the AWS console and then I tried to remove the interface.  Neither action was allowed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/AWS_Sec_IP.png#floatright&#34; alt=&#34;AWS Secondary IP&#34;&gt;
Next I assigned a secondary IP.  To do this, go to EC2 and select the instance and then select the network interface.  Under the network interface, go to the Actions button in the top right corner and select &amp;ldquo;Manage IP addresses.  In the ensuing screen, expand the &amp;ldquo;eth0&amp;rdquo; selection and you&amp;rsquo;ll see a button for &amp;ldquo;assign new IP address&amp;rdquo;.  When you add another address, AWS will limit you to only valid and available addresses on the subnet.  If the IP is used by another instance - whether active or not - you will &lt;em&gt;not&lt;/em&gt; be able to assign it.&lt;/p&gt;
&lt;p&gt;I tried removing the secondary IP and didn&amp;rsquo;t have a problem.  I was able to take the secondary IP assigned to &amp;ldquo;A&amp;rdquo;, unassign it, and put it on &amp;ldquo;B&amp;rdquo;.  This works, but on AL2 you&amp;rsquo;ll need to restart the network service before the secondary IP will be &amp;ldquo;seen&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl restart networking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;elastic-network-interfaces&#34;&gt;Elastic Network Interfaces&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/AWS_ENI_IP.png#floatright&#34; alt=&#34;Elastic Network Interface&#34;&gt;
I also played with ENIs.  Originally, my idea was to create a new network interface, add it to the VM, and remove the old one in order to move the IP.  Again, you can&amp;rsquo;t change or delete the primary interfaces of an EC2 instance once created.&lt;/p&gt;
&lt;p&gt;However, you can create a stand-alone ENI and associate an IP with it.  &lt;em&gt;This&lt;/em&gt; can be attached to &amp;ldquo;A&amp;rdquo;, unattached, and attached to &amp;ldquo;B&amp;rdquo; without a networking restart.  In practice, it works very similar to a secondary IP.&lt;/p&gt;
&lt;p&gt;In the Instances page, look in the menu on the left under networking and find &amp;ldquo;Network Interfaces&amp;rdquo;.  From here you can click the &amp;ldquo;create network interface&amp;rdquo; button to create an independent NIC and assign it an IP.&lt;/p&gt;
&lt;p&gt;Interface IPs cannot be reassigned without deleting the instance.  Yes, you can take a snapshot before deleting, but your tolerance for that kind of risk may be limited.&lt;/p&gt;
&lt;p&gt;The best option is to construct your VPC environment so that all references are done via Fully Qualified Domain Name (FQDN).  DNS can easily be updated to point the name &amp;ldquo;server&amp;rdquo; from 10.0.0.1 to 10.0.0.2.&lt;/p&gt;
&lt;p&gt;There are places where we are forced to refernce by IP.  In such cases, I recommend using an ENI.  Disable eth0 if having two IPs bother you.  Upgrading or replacing a VM can be as easy as standing up the new version and transferring the ENI.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve found several references on the Internet to the fact that you can&amp;rsquo;t move EC2 IPs, but not a more detailed walk through of what you &lt;em&gt;can&lt;/em&gt; do.  I hope this discussion has been helpful!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS S3 Review</title>
      <link>https://www.nextpertise.net/posts/200728_s3review/</link>
      <pubDate>Tue, 28 Jul 2020 15:44:02 -0400</pubDate>
      
      <guid>https://www.nextpertise.net/posts/200728_s3review/</guid>
      <description>&lt;p&gt;In a previous post, I described hosting this website on Render.  I mentioned that I am coming up to speed on AWS and it was my intention to host the site on S3 as well.  This post documents my experience.&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;
&lt;p&gt;Render has a CI-step that builds the html from Hugo auto-magically.  AWS isn’t integrated with Github, so I needed to build the website.  This is pretty easy, just navigate to the directory and type “hugo”.  This produces a “public” directory that needs to be copied to your webserver.&lt;/p&gt;
&lt;p&gt;AWS allows you to specify an error page.  In Hugo, I setup a &lt;em&gt;404.html&lt;/em&gt; page under &lt;em&gt;theme/layouts&lt;/em&gt; and used the S3 Properties page to specify that URL for the error page.&lt;/p&gt;
&lt;h2 id=&#34;aws&#34;&gt;AWS&lt;/h2&gt;
&lt;p&gt;The short version of hosting a site on S3 is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an S3 bucket&lt;/li&gt;
&lt;li&gt;The bucket needs to be public, so set &amp;ldquo;Block all public access&amp;rdquo; to OFF.&lt;/li&gt;
&lt;li&gt;Navigate to S3, select the bucket and go to the Properties tab.  Under &amp;ldquo;Static Website Hosting&amp;rdquo; select &amp;ldquo;Use this bucket to host a website&amp;rdquo;.  You can also grab the URL from this screen.  This will look something like  &lt;a href=&#34;http://mybucket.s3-website-us-east-1.amazonaws.com&#34;&gt;http://mybucket.s3-website-us-east-1.amazonaws.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your DNS, setup a CNAME for www to the bucket URL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above is pretty well documented at various places and it&amp;rsquo;s pretty easy.  So obviously, that&amp;rsquo;s not the way I did it.&lt;/p&gt;
&lt;p&gt;AWS has a feature called Cloud Formation that let&amp;rsquo;s you specify an environment in JSON or YAML.  This approach is called &lt;em&gt;Infrastructure as Code&lt;/em&gt;.  There are a lot of scenarios where IaC is useful.  It reduces the time and cost of setting up an environment, which could be useful if you wanted to quickly setup a dev environment or duplicate an environment for some other purpose.  This approach reduces errors because you can troubleshoot the setup script when you build it and then iteratively improve it.  It also allows for the environment to be specified and reviewed by security specialists, improving communication between operations and security and reducing risks.&lt;/p&gt;
&lt;p&gt;Cloud Formation is free to use.  I built a JSON &lt;a href=&#34;https://www.nextpertise.net/CloudFormation-Setup_Public_S3.json&#34;&gt;file&lt;/a&gt; that creates an S3 bucket, marks the bucket public, and then applies a security policy.  My template also outputs the URL back to you when it completes.  The Amazon online user guide has a lot of examples I used to understand the process, plus there is a template designer that let&amp;rsquo;s you draw out your target environment a la Visio and builds the JSON for you.  I didn&amp;rsquo;t use the designer to draw, but I pasted the file I developed into the designer and it was a good way to &amp;ldquo;debug&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Doing initial development of a Cloud Formation template meant running the process several times and fixing issues.  For me, most of these were formatting.  This took a little over an hour to iron out.  When everything was ready, I instantiated my S3 web bucket and I just needed to copy my Hugo public folder into the bucket.&lt;/p&gt;
&lt;p&gt;AWS has a &amp;ldquo;free tier&amp;rdquo; that&amp;rsquo;s offered during your first 12 months.  Five gigs of S3 space is included in this tier, so the initial cost isn&amp;rsquo;t bad and S3 isn&amp;rsquo;t expensive after that.  Whether you my example to use Cloud Formation or not, this is a cheap and effective way to get a static website setup.  Amazon provides a very durable and scalable environment, there&amp;rsquo;s a ton of tools available, and it&amp;rsquo;s easy to imagine growing from this initial setup to a dynamic site using K8s.&lt;/p&gt;
&lt;p&gt;That said, updating the html feels a little clunky after using Render and it&amp;rsquo;s integration with Github.  I&amp;rsquo;m going to leave the S3 version up for a while and try some improvements.  I&amp;rsquo;d like to build a command line script to run the Cloud Formation process, run Hugo to compile the site, and then transfer files.  That seems doable and it would make this a lot easier to maintain.  AWS also has a CodeCommit repository that looks like Github from a distance.  It would be interesting to explore using CodeCommit for the site as well.&lt;/p&gt;
&lt;p&gt;For now, I&amp;rsquo;m very pleased with the Render workflow and I&amp;rsquo;ve decided to leave the &amp;ldquo;official&amp;rdquo; copy of the site there.&lt;/p&gt;
&lt;p&gt;As always, I&amp;rsquo;m interested in your experiences and suggestions!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
