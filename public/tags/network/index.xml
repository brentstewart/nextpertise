<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on </title>
    <link>https://nextpertise.net/tags/network/</link>
    <description>Recent content in Network on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Oct 2022 17:26:07 -0400</lastBuildDate>
    
        <atom:link href="https://nextpertise.net/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Packer</title>
      <link>https://nextpertise.net/posts/221019_packer/</link>
      <pubDate>Wed, 19 Oct 2022 17:26:07 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/221019_packer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hashicorp.com&#34;&gt;Hashicorp&lt;/a&gt; makes some &lt;em&gt;cool&lt;/em&gt; tools for playing in the cloud or a virtualized environment, especially if you want to build out an Infrastructure as Code approach and make infrastructure updates a CI process. &lt;a href=&#34;https://packer.io&#34;&gt;Packer&lt;/a&gt; is a tool that let&amp;rsquo;s you define a server - OS, cores, storage, packages, and all - in a script that can be built on demand.  You can even define your  environment, like LAMP, in the packer script and load your application files.&lt;/p&gt;
&lt;p&gt;A very practical use of Packer would be to use it to build a custom AWS AMI for your company.  You want every EC2 instance to look like this image, so it might include security settings or agents, centralized logging setup, connections to centralized authentication, and other common resources.  I would probably load any required data files when the EC2 instance is instantiated, maybe through Cloud Formation.&lt;/p&gt;
&lt;p&gt;Packer scripts are written in HCL (Hashi Corp Language?  Dunno.), which ends up looking like YAML.&lt;/p&gt;
&lt;p&gt;I built a Packer repo that builds a simple Ubuntu server for VMWare Workstation.  It should be simple enough to customize this, including having it output an AWS AMI (Amazon Machine Image). It is tested and works with Pop! 22.04 with a 5.19 kernel and VMWare Workstation 16.2.4.&lt;/p&gt;
&lt;p&gt;The packer file (&lt;em&gt;custom.pkr.hcl&lt;/em&gt; in my example) can be broken into three parts.  The first section defines the virtual machine, including the installation media and the CD image with customization steps.  It looks like this:&lt;/p&gt;
&lt;p&gt;source &amp;ldquo;vmware-iso&amp;rdquo; &amp;ldquo;jammy-development&amp;rdquo; {
iso_urls         =[
&amp;ldquo;file:/media/brent/Ventoy/ubuntu-22.04.1-live-server-amd64.iso&amp;rdquo;,
&amp;ldquo;https://releases.ubuntu.com/22.04.1/ubuntu-22.04.1-live-server-amd64.iso&amp;rdquo;]
iso_checksum     = &amp;ldquo;sha256:10f19c5b2b8d6db711582e0e27f5116296c34fe4b313ba45f9b201a5007056cb&amp;rdquo;
iso_target_path  = &amp;ldquo;/media/brent/Ventoy&amp;rdquo;
version          = &amp;ldquo;16&amp;rdquo;
memory           = 4096
cd_files = [
&amp;ldquo;./http/meta-data&amp;rdquo;,
&amp;ldquo;./http/user-data&amp;rdquo;]
cd_label = &amp;ldquo;cidata&amp;rdquo;
cpus = 1
cores = 2
disk_type_id = 0
network = &amp;ldquo;nat&amp;rdquo;
network_adapter_type = &amp;ldquo;vmxnet3&amp;rdquo;
vm_name          = &amp;ldquo;Ubuntu2204-dev&amp;rdquo;
ssh_username     = &amp;ldquo;vmadmin&amp;rdquo;
ssh_password     = &amp;ldquo;Password&amp;rdquo;
shutdown_command = &amp;ldquo;sudo shutdown -P now&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Ubuntu can be booted into an autoinstall script (&amp;ldquo;user-data&amp;rdquo; in this example).  Typically the way this is done is by placing a file (user_data in this case) into the http folder. Packer makes that folder available through a local Apache installation. However, I could not get the VM to &amp;ldquo;see&amp;rdquo; the website and draw down the file. I tried several iterations of network configuration to no avail.  One other approach I took was to take the auto-install files and place them in an ISO image, then attaching the image to the VM. To do this, I installed the cloud utilities from Ubuntu. I used cloud-localds to put the two data files into a small ISO.&lt;/p&gt;
&lt;p&gt;sudo apt install cloud-image-utils
cloud-localds ./seed.iso user-data meta-data&lt;/p&gt;
&lt;p&gt;Later I discovered that this can be done in the packer specification:&lt;/p&gt;
&lt;p&gt;cd_files = [
&amp;ldquo;./http/meta-data&amp;rdquo;,
&amp;ldquo;./http/user-data&amp;rdquo;]
cd_label = &amp;ldquo;cidata&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The second part of the packer file describes how to interact with the server as it boots.  You can actually specify &lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt; and walk through an entire installation wizard.  With Ubuntu, I found that to be fragile.  As I made changes to the network to try to get it to see the local webserver, the installation prompts changed and broke the sequence.  Instead of walking through the wizard, this script boots into the custom setup and tells it to load the autoinstall script from the CD-image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boot_wait = &amp;quot;5s&amp;quot;
boot_command = [
  &amp;quot;c&amp;lt;wait&amp;gt;&amp;quot;,
  &amp;quot;linux /casper/vmlinuz ds=nocloud-net s=/cidata&amp;quot;,
  &amp;quot;&amp;lt;enter&amp;gt;&amp;quot;,
  &amp;quot;initrd /casper/initrd&amp;quot;,
  &amp;quot;&amp;lt;enter&amp;gt;&amp;quot;,
  &amp;quot;boot&amp;lt;enter&amp;gt;&amp;lt;wait60&amp;gt;&amp;quot;,
  &amp;quot;yes&amp;lt;wait120&amp;gt;&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
boot_wait = &amp;ldquo;5s&amp;rdquo;
boot_command = [
&amp;ldquo;c&lt;!-- raw HTML omitted --&gt;&amp;rdquo;,
&amp;ldquo;linux /casper/vmlinuz ds=nocloud-net s=/cidata&amp;rdquo;,
&amp;ldquo;&lt;!-- raw HTML omitted --&gt;&amp;rdquo;,
&amp;ldquo;initrd /casper/initrd&amp;rdquo;,
&amp;ldquo;&lt;!-- raw HTML omitted --&gt;&amp;rdquo;,
&amp;ldquo;boot&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;rdquo;,
&amp;ldquo;yes&lt;!-- raw HTML omitted --&gt;&amp;rdquo;
]
}&lt;/p&gt;
&lt;p&gt;The third piece is the autoinstall script (user-data).  This describes some of the setup attributes, like keyboard, and the initial set of packages to be loaded.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autoinstall:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;version: 1
apt:
geoip: true
disable_components: []
preserve_sources_list: false
primary:
- arches: [amd64, i386]
uri: &lt;a href=&#34;http://us.archive.ubuntu.com/ubuntu&#34;&gt;http://us.archive.ubuntu.com/ubuntu&lt;/a&gt;
- arches: [default]
uri: &lt;a href=&#34;http://ports.ubuntu.com/ubuntu-ports&#34;&gt;http://ports.ubuntu.com/ubuntu-ports&lt;/a&gt;
early-commands:
- sudo systemctl stop ssh
locale: en_US
keyboard:
layout: us
identity:
hostname: jammy-daily
username: vmadmin
password: $6$Da/Bin6we2OOJCVD$HM00JdEP47D.cVfSYzwf71khVHPD8NqbYLGw/iXPswndEqI2TNsMELWRCt0tA2.mVMPjFZlPI0B/xOBO9OhF01
ssh:
install-server: true
allow-pw: true
packages:
- openssh-server
- open-vm-tools
- cloud-init
- whois
- zsh
- wget
- tasksel
user-data:
disable_root: false
timezone: UTC
late-commands:
- sed -i -e &amp;rsquo;s/^#?PasswordAuthentication.*/PasswordAuthentication yes/g&amp;rsquo; /target/etc/ssh/sshd_config
- echo &amp;lsquo;vmadmin ALL=(ALL) NOPASSWD:ALL&amp;rsquo; &amp;gt; /target/etc/sudoers.d/vmadmin
- curtin in-target &amp;ndash;target=/target &amp;ndash; chmod 440 /etc/sudoers.d/vmadmin
- &amp;ldquo;lvresize -v -l +100%FREE /dev/mapper/ubuntu&amp;ndash;vg-ubuntu&amp;ndash;lv&amp;rdquo;
- &amp;ldquo;resize2fs -p /dev/mapper/ubuntu&amp;ndash;vg-ubuntu&amp;ndash;lv&amp;rdquo;&lt;/p&gt;
&lt;p&gt;My repo is linked and you can grab the original files there and build on them.  Packer is free and open-source and works with a variety of local and cloud backends, including VMWare, VirtualBox, HyperV, KVM, and AWS.  This is an easy way to produce repoducable server environments and treat your servers like &amp;ldquo;cattle not cats&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tailscale</title>
      <link>https://nextpertise.net/posts/221004_tailscale/</link>
      <pubDate>Tue, 04 Oct 2022 14:48:18 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/221004_tailscale/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m interested in TailScale.  I&amp;rsquo;ve been hearing good things about it from my friend, Jared, and TailScale has a fair set of proponents on my favorite podcasts.  A couple years ago, I setup ZeroTier and built a dedicated Linux device to attach to the ZeroTier network and route into my local LAN.  I wrote a well-received set of articles about that experience (&lt;a href=&#34;https://nextpertise.net/posts/201027_zerotier/&#34;&gt;Zerotier Basic Configuration&lt;/a&gt; and &lt;a href=&#34;https://nextpertise.net/posts/201027_zerotierrouter/&#34;&gt;ZeroTier Router&lt;/a&gt;).  ZeroTier continues to work well, but I haven&amp;rsquo;t been traveling as much and have left the VM off lately.  This investigation doesn&amp;rsquo;t come from any frustration with Zerotier or urgent need, just from an interest in trying something new.&lt;/p&gt;
&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;
&lt;p&gt;Both ZeroTier and TailScale are &amp;ldquo;overlay networks&amp;rdquo;.  I have a Meraki stack at home with two Internet connections (WISP and Starlink).  Meraki has horrible VPN support and I&amp;rsquo;m not over-enthused about cutting holes in my firewall.  Plus, anything that requires an ISP failover would kill VPN, so these overlay-style connections fit my needs closely.&lt;/p&gt;
&lt;p&gt;Both solutions use NAT traversal techniques and some of the same encryption suite.  Tailscale is an implementation of Wireguard (which is all the rage in Linux circles), but Zerotier predates wireguard and is a custom solution.  I&amp;rsquo;m not aware of any active security issues with either.  Obviously though, you&amp;rsquo;re only as secure as who you trust.&lt;/p&gt;
&lt;p&gt;Both ZeroTier and Tailscale operate in a &amp;ldquo;freemium&amp;rdquo; model, where the rendezvous server allows 20 connections.  Larger networks require a subscription, but both have self-hosted rendezvous servers as an option (presumably you&amp;rsquo;d set these up on something like EC2). I solved this with ZeroTier by configuring an Ubuntu server as a router from the ZT network into my home network.&lt;/p&gt;
&lt;h2 id=&#34;experience-with-tailscale&#34;&gt;Experience with TailScale&lt;/h2&gt;
&lt;p&gt;The Tailscale experience starts with signing up on the &lt;a href=&#34;https://tailscale.com&#34;&gt;website&lt;/a&gt;.  Instructions are provided for all the supported operating systems - Windows, Mac, Linux, iOS and Android.  Mobile operating systems send you to the respective App Stores to pick up a client.  My Pop! desktop is Ubuntu-based, so I was able to add a PPA and install from there.  TailScale doesn&amp;rsquo;t have a Linux GUI client, it is invoked through the command line as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tailscale up 
tailscale ip -4  #shows private TS IP, can also be seen using &amp;quot;ip a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once clients are instantiated, the VPN network is maintained at the &lt;a href=&#34;https://tailscale.com&#34;&gt;tailscale website&lt;/a&gt;.  My machines were given addresses in the 100.64/10 range, but not in the same /24, which is a little different than Zerotier.  Clients &lt;em&gt;should&lt;/em&gt; be able to communicate after they are registered and visible on the dashboard.  Tailscale functions as expected - I was able to access internal TailScale-attached resources without having to provision access on the firewall and speeds were comporable to ZeroTier.&lt;/p&gt;
&lt;p&gt;With Zerotier, I had to build a router to access non-attached devices.  TailScale allows any device to be an &amp;ldquo;exit node&amp;rdquo; and to route traffic into the local network.  Here I ran into some minor issues.  Tailscale documentation is pretty good, but there are still some mental hurdles to getting this to work correctly.&lt;/p&gt;
&lt;p&gt;First, the node has to be setup as an exit node.  To enable this, I re-enabled the tailscale client with the advertise flag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tailscale down
sudo tailscale up --advertise-exit-node 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The node will now show in the dashboard as an available exit, but it won&amp;rsquo;t have any routes.  It turns out the node has to explicitly advertise local routes.  In ZT, this is controlled through the dashboard.  To enable this, I re-enabled the tailscale client with the routes.  For the record, I&amp;rsquo;m not sure that you have to take the service down everytime you make the change.  That might just be years of conditioning coming out on my part.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tailscale down
sudo tailscale up --advertise-routes=192.168.0.0/22 --advertise-exit-node --accept-routes=true  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By way of reference, I have four VLANs locally.  I could use seperate tailscale endpoints to attach into each of them, but I want to advertise them all as a block and thus have the /22 above.&lt;/p&gt;
&lt;p&gt;At this point, routing onto the local network from Tailscale will still not work.  There are two issues left to deal with, one obvious and one bug.  Let&amp;rsquo;s deal with the bug first.  When I review the Linux routing table, it does not show the tailscale network.  After beseeching the Great Google, I found references to a known bug in Ubuntu that doesn&amp;rsquo;t add these routes.  Since the computer doesn&amp;rsquo;t have a route in the tailscale network, it can&amp;rsquo;t pass traffic back.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;route
Kernel IP routing table
Destination     Gateway         Genmask http://192.168.26.53/ worked, but not to other devices in the same VLAN or to other VLANs.

sudo route add -net 100.64.0.0/10 dev tailscale0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remaining issue is that local devices have my firewall as their default gateway.  When they receive traffic from a tailscale-connected IP, they reply using their default route back to the firewall.  The firewall then uses it&amp;rsquo;s default route to pass the traffic to the public Internet!  To fix this, I went into firewall (for those of you with Meraki, it&amp;rsquo;s on the dashboard under &lt;em&gt;Security &amp;amp; SD-WAN &amp;gt; Addressing &amp;amp; VLAN&lt;/em&gt;) and added a static route.  The route should target 10.64.0.0/10 and the next hop should be the IP of the tailscale exit node.  With this in place, everything works!&lt;/p&gt;
&lt;h2 id=&#34;nix-setup&#34;&gt;Nix setup&lt;/h2&gt;
&lt;p&gt;Setup in Nix involves two steps and also varied slightly for me from the docs.  First, add tailscale to &lt;em&gt;configuration.nix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;environment.systemPackages = with pkgs; [
. . .
pkgs.tailscale
]
services.tailscale.enable=true;&lt;/p&gt;
&lt;h1 id=&#34;exit-the-text-editor&#34;&gt;exit the text editor&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo nixos-rebuild switch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once tailscale is installed, run &lt;strong&gt;sudo tailscale up&lt;/strong&gt; as before.  This will provide a URL for authentication.  Finally, go into the tailscale dashboard and authorize the new machine (click the ellipsis to the right of the machine and choose authorize).  Nix runs on my travel laptop, so I didn&amp;rsquo;t try to advertise it as an exit node.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/221005_Tailscale.png#floatright&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailscale-dashboard&#34;&gt;Tailscale Dashboard&lt;/h2&gt;
&lt;p&gt;My impression of the Tailscale dashboard is mixed.  There&amp;rsquo;s a download link, and a place to add users.  Free accounts cannot have multiple users, so the main user would have to setup the client on each device (like my wifes&amp;rsquo; or kids&amp;rsquo; computers).&lt;/p&gt;
&lt;p&gt;The documentation is pretty good, but I ran into several questions where it gave insufficient answers and I needed to just experiment to get things working.  The &lt;strong&gt;Machines&lt;/strong&gt; tab shows devices that are currently connected.  This also allows you to set tags and enable routing (assuming that the client is also configured to support routing).  The &lt;strong&gt;Services&lt;/strong&gt; tab collects a list of services so that you are aware of what you are sharing into the TailScale network.  This has the potential to be very useful, but you cannot &amp;ldquo;click to block&amp;rdquo; on this screen and it only shows services from the Tailscale-connected machine.  No services were shown from elsewhere on the connected network.  This could lead someone to a misunderstanding about their risk profile.&lt;/p&gt;
&lt;p&gt;Other dashboard tabs allow you to setup access-lists and control DNS.  &lt;strong&gt;Access control&lt;/strong&gt; is configured through a JSON document.  The controls available are pretty good - they allow you to block access by user or group (both rendered useless on the free account), by host IP, or by service port.  The JSON ACL can be managed through Github using Github actions which is very exciting, but you&amp;rsquo;d have to make sure that repo is marked private.  The &lt;strong&gt;DNS&lt;/strong&gt; tab allows you to point Tailscale clients to an internal resolver or to use &amp;ldquo;MagicDNS&amp;rdquo;.  MagicDNS, as near as I can tell, is basically a shared &lt;em&gt;hosts&lt;/em&gt; file, but it&amp;rsquo;s nice for folks who don&amp;rsquo;t have a private name server.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;What does this all boil down to?  I&amp;rsquo;m attracted to Tailscale because it uses wireguard and because it doesn&amp;rsquo;t require a dedicated router-vm.  Zerotier seems to have better access controls.  In both cases, the free-tier accounts offer analogous features (20 devices, 1 user).  Setup complexity is different, but equal.  If one or the other is working for you already,  I don&amp;rsquo;t think a change is necessary.  I&amp;rsquo;ve decided to keep Tailscale in place for at least a little while and I&amp;rsquo;m very interested in investigating the self-hosted option and seeing what additional capabilities that would provide.  Tailscale also offers a $5/month package of five users that would support a family and less work than spinning up an EC2 instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Palemoon for legacy Flash support</title>
      <link>https://nextpertise.net/posts/220819_palemoon/</link>
      <pubDate>Fri, 19 Aug 2022 09:07:14 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/220819_palemoon/</guid>
      <description>&lt;p&gt;Flash was a technology to extend the functionality of websites past what was possible with HTML at the time.  It allowed for highly interactive experiences and was used for streaming, video games, and for &amp;ldquo;application like&amp;rdquo; experiences inside the browser.  Flash was implemented on the client-side via a browser &amp;ldquo;plug-in&amp;rdquo; and was notorious for security issues.  In my experience, a big part of the problem with Flash was the update process.  The plug-in was updated seperately from the Operating System and browser, leading to many cases to persistence of older versions.  Furthermore, the installer would commonly not clean up old versions, leaving an attack surface.&lt;/p&gt;
&lt;p&gt;Why do we care?  For the most part we don&amp;rsquo;t.  Flash was deprecated in 2020 and is no longer supported by the major browsers.  The functionality of Flash has been ably replaced by HTML5.  However, there was a range of IT products created in the mid-teens that used a Flash console for administrative access.  Cisco used Flash in equipment like ASA firewalls, SOHO switches, and UCS servers.  Much of that equipment is ageing out, but some of it is still in good shape and capable of delivering value.  One example is my home server, which is an old Cisco UCS M3.&lt;/p&gt;
&lt;h2 id=&#34;accessing-a-flash-console&#34;&gt;Accessing a Flash Console&lt;/h2&gt;
&lt;p&gt;ProxMox recently crashed - I&amp;rsquo;ll write about that seperately - but I suspected a disk issue.  The best way to access the information I needed was through the CIMC (Cisco Integrated Management Console), an out-of-band server management interface other vendors refer to as Integrated Lights Out access (ILO) or DRAC (Cell Remote Access Controller).&lt;br&gt;
I hadn&amp;rsquo;t accessed the CIMC in a long time.  Rebooting the server displays the assigned IP and let&amp;rsquo;s you setup the interface.  I had assigned an IP and identified it as in a VLAN on a trunk port.  However, pinging the IP was unsuccessful.  I used the Meraki &amp;ldquo;clients&amp;rdquo; display to identify the switch port used and setup a continuous ping from my workstation.  I tried a variety of configurations on the CIMC and switch, but ultimately what worked was to set the port as access (turn off 802.1q) and let the speed and duplex auto-negotiate.  I originally had this set for trunk, then tried trunk and identified the VLAN as the &amp;ldquo;native&amp;rdquo; VLAN which should have removed the .1Q shim from the header.  I &lt;em&gt;suspect&lt;/em&gt; that the UCS wanted to run fast ethernet and had some compatibility issue with .1Q as spoken by the Meraki.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step 1 - set the port to auto/auto, define the VLAN and set the mode to access&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the CIMC port responding, I could browse to it using it&amp;rsquo;s IP address.  The next problem is that the site presents a security warning.  Although the CIMC uses TLS 1.2 (which is still supported), it uses 128b keys (which are not).  Mozilla &lt;a href=&#34;https://wiki.mozilla.org/Security/Features/Certs_Disallow_Weak_Keys&#34;&gt;phased out&lt;/a&gt; key sizes smaller than 2048b at the end of 2013.  Even getting around this issue still leaves us with the Flash problem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://linux.palemoon.org/download/mainline/&#34;&gt;Palemoon&lt;/a&gt; is a browser forked from Firefox years ago and developed in the years since.  It maintains compatibility with the older XUL-based plugins.  It is distributed as a tar-ball, so I just extracted it to my &lt;em&gt;apps&lt;/em&gt; directory and ran the palemoon executable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step 2 - Download Palemoon, extract and run&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The flash plugin was abandoned at version 34.0.0.137 and can be obtained from &lt;a href=&#34;https://github.com/darktohka/clean-flash-builds/releases/tag/v1.7&#34;&gt;Github&lt;/a&gt;.  Again, it can be installed directly from github using the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; mkdir -p ~/.mozilla/plugins &amp;amp;&amp;amp; wget -q https://github.com/darktohka/clean-flash-builds/releases/download/v1.7/flash_player_patched_npapi_linux.$( (( $(getconf LONG_BIT) == 32 )) &amp;amp;&amp;amp; echo &amp;quot;i386&amp;quot; || echo &amp;quot;x86_64&amp;quot;).tar.gz -O - | tar -zxf - -C ~/.mozilla/plugins libflashplayer.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After installation, Palemoon is able to access the Flash-based admin console for the UCS server.  The installation did not impact my current (104) version of Firefox.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step 3 - Install Flash from Github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;this-is-a-bad-idea&#34;&gt;This is a bad idea&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Palemoon&lt;/em&gt; is an interesting browser and - to my knowledge - hasn&amp;rsquo;t had security concerns associated with it specifically.  However, Flash was deprecated for a reason and this article walks through installing unpatched and unsupported legacy software into a browser.  I would limit Palemoon to internal trusted addresses as long as the Flash plug-in is present and active. This can be addressed to some extent by limiting when Flash is allowed to run, as shown below, but I would still be very cautious.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/220818_palemoon_always_activate.png&#34; alt=&#34;Limiting Palemoon/Flash exposure&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Length of a bit</title>
      <link>https://nextpertise.net/posts/220815_lengthofabit/</link>
      <pubDate>Mon, 15 Aug 2022 12:59:02 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/220815_lengthofabit/</guid>
      <description>&lt;p&gt;In the category of unexpected questions:&lt;/p&gt;
&lt;p&gt;Over a glass of good whisky, a semi-technical friend of mine said, &amp;ldquo;Ok - I&amp;rsquo;ve been wondering about this, it&amp;rsquo;s appropos of nothing, but
have no idea how to figure it out: How long (in length) is a bit?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;After thinking about it, I said it depends on a few factors, the most important of which is the frequency of the signal and the media that carries the signal.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;What does the media have to do with it, I thought electromagnetic signals traveled at the speed of light.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I affirmed that they do - in a perfect vacuum. Wanna just go with that?  &amp;ldquo;Sure, let&amp;rsquo;s start there.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Since he was asking about the length of a single bit, we need a unit of distance; meters (m) works well here I think. We&amp;rsquo;ll start with a frequency of 1MHz.&lt;/p&gt;
&lt;p&gt;The basic formula is $ length = \frac{speed}{frequency} $ so &amp;hellip;&lt;/p&gt;
&lt;p&gt;$$ length = \frac{300,000,000 m/s}{1,000,000 b/s} = 300 m/b$$&lt;/p&gt;
&lt;p&gt;&amp;ldquo;That&amp;rsquo;s a lot longer than I thought it would be&amp;rdquo; he said.&lt;/p&gt;
&lt;p&gt;You want it shorter?  Increase the frequency of the signal. How about 1GHz?  It&amp;rsquo;s just under a foot.
$$ length = \frac{300,000,000 m/s}{1,000,000,000 b/s} = 0.3 m/b$$&lt;/p&gt;
&lt;p&gt;He said he got that, but what about the carrying medium?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;OK, light (and electromagnetic fields) travels about 300,000,000 m/sec in a vacuum. What about in a wire or fiber optic cable? I&amp;rsquo;d bet light travels slower there.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Yup, you&amp;rsquo;re right.  There is a velocity factor that is applicable to any conductor that carries a signal. That factor is sometimes expressed as a percentage of the speed of light in a vacuum.  For example, in air the Velocity Factor (VF) is about 99%. In the typical coaxial cable used in cable TV it&amp;rsquo;s about 77%.
For good ol&amp;rsquo; twisted pair (Cat 6) the VF is 65%. The VF depends on the materials and the construction of the transmission line.  Calculated by electrical
engineers, the VF depends on the line&amp;rsquo;s tendency to impede the progress of the signal at various frequencies. That&amp;rsquo;s why each type of transmission line has a characteristic impedance which is related to the VF.&lt;/p&gt;
&lt;p&gt;So, in space, a 1GHz &amp;ldquo;bit&amp;rdquo; is about a foot long.  In a Cat 6 twisted pair cable it would be&lt;/p&gt;
&lt;p&gt;$$ length = \frac{300,000,000 m/s \times 0.65}{1,000,000,000/s} = 0.195 m/b$$&lt;/p&gt;
&lt;p&gt;So as the signal goes through a higher impedance cable, the bits get shorter.&lt;/p&gt;
&lt;p&gt;There are, of course, other factors to consider when engineering signal transmission systems in the real world.  Very high- and low signaling rates need their own special considerations.  One of the big advances in recent years is the ability to build smaller and more efficient integrated circuit (IC) chips that allow for faster and faster signal processing at lower power consumption. This is why we have supercomputers that can use so-called 5G frequencies and protocols - and also fit in your pocket.  Sometimes we can even use them to make phone calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/lengthofbit.png&#34; alt=&#34;Length of a bit&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5G Troubleshooting</title>
      <link>https://nextpertise.net/posts/220723_5g_troubleshooting/</link>
      <pubDate>Sat, 23 Jul 2022 12:14:47 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/220723_5g_troubleshooting/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/220723_droid_signal.jpg#floatsmallleft&#34; alt=&#34;Signal Strength on Android&#34;&gt;&lt;/p&gt;
&lt;p&gt;My office sits beside an Interstate and generally the Interstate corridor is one of the best places to find cellular coverage.  Sure enough, we have towers reasonably close to the east and west of the building along the Interstate.  The construction of the buildings, like many office buildings, has a strong steel and concrete &amp;ldquo;core&amp;rdquo; with open office space around the perimeter.    My analysis is that those cores, along with the way the buildings set next to each other, creates 5G/LTE shadows within the buildings.&lt;/p&gt;
&lt;p&gt;My buildings are setup along &amp;ldquo;modern&amp;rdquo; cubicle-farm ideas.  To get a feel for where the dead zones are, I got readings on signal strength using my phone at all the cube row intersections.  Wireless signal strength is denoted in decibel-milliwats (dBm).  A decibel is a comparison of two numbers, with a 10dB difference translating as a 10 fold increase.  A 100x difference would be 20dB.  dBm compare a signal to a milliwat.&lt;/p&gt;
&lt;p&gt;For LTE, signals weaker than -85dB are poor service.  5G uses newer radios and can do pretty well down to -105dB.  T-Mobile, through the acquisition of Sprint, uses low and high bands (800 MHz, 1.9 GHz, and 2.5 GHz) and the lower frequencies penetrate obstructions better (remember how Nextel used to work everywhere?).  Verizon and AT&amp;amp;T use higher frequencies and don&amp;rsquo;t penetrate building interiors as well.  Work uses Verizon, so helps explain the reception issues.&lt;/p&gt;
&lt;h2 id=&#34;determing-5g-signal-strength&#34;&gt;Determing 5G signal strength&lt;/h2&gt;
&lt;p&gt;Using Android, you can find signal strength under &lt;em&gt;Settings &amp;gt; About Phone &amp;gt; Status &amp;gt; SIM card status&lt;/em&gt;.  In my testing this display updated dynamically, so I could just leave it up and walk around.  In the example pictured, my signal strength is -91dB on my LTE phone.&lt;/p&gt;
&lt;p&gt;On an IOS device, dial &lt;em&gt;3001#12345#&lt;/em&gt;.  This brings up some technician information.  Go to the second tab and choose &lt;em&gt;RAT &amp;gt; Serving Cell Info&lt;/em&gt;.  The signal strength is labeled &lt;strong&gt;RSRP&lt;/strong&gt;.  In my experience, this display updates over minutes.  If readings are needed faster, just redial the number to refresh the display.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/220723_IOS4.jpg#floatsmallright&#34; alt=&#34;Signal Strength on IOS-2&#34;&gt;  &lt;img src=&#34;https://nextpertise.net/220723_IOS3.jpg#floatsmallright&#34; alt=&#34;Signal Strength on IOS-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;I understand there are apps that measure signal strength, but this was a pretty basic setup and I was fine was a more ad hoc approach.  It seems like every app is a new way to track or show ads anyway, and this prevented yet another app on my phone.&lt;/p&gt;
&lt;h2 id=&#34;pico-cells&#34;&gt;Pico Cells&lt;/h2&gt;
&lt;p&gt;My office purchased &amp;ldquo;pico cells&amp;rdquo; - devices that produce a 5G signal over a small indoor area and transmit the traffic over your network to the provider.  I positioned these on the opposite sides of the building that face cell towers and stuck the 5G &amp;ldquo;hockey puck&amp;rdquo; in the window.  The pico cells made an impressive difference.  Close by, my signal went from -110dBm to -65dBm and the zone that received better than -100 dBm extended out about 60 meters.  I repeated the measurement to ensure I had good coverage and here I noticed that the phones tended to be &amp;ldquo;sticky&amp;rdquo; to a particular cell.  Notice in the screen shot that the cellular tower ID is identified.  Intuitively, one might expect the phone to &amp;ldquo;flip&amp;rdquo; to the next tower as soon as the signal was better but what I saw was that the phone tended to keep a tower until it&amp;rsquo;s signal got very weak.&lt;/p&gt;
&lt;p&gt;Of course, the cellID will be useful if we have user coverage complaints.  Each of the picocells reported a different ID and I noted those in our recordds so we can trace issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting GNS3 to Real Networks</title>
      <link>https://nextpertise.net/posts/210417_connecting_gns3/</link>
      <pubDate>Sat, 17 Apr 2021 10:48:58 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/210417_connecting_gns3/</guid>
      <description>&lt;p&gt;I mentioned a month or so ago that I wanted to set out on a journey to create a set of template networks and then substitute in the various appliances that are supported under GNS3.  The idea is to start with Cisco, which I know best, and then explore the differences.  I&amp;rsquo;m still really excited about that but . . .  life.  So we&amp;rsquo;re off to a slow start.  I&amp;rsquo;m going to break down some of the topics into smaller pieces so I can keep that project moving forward.  First up - how to connect you GNS3 lab environment to a &amp;ldquo;real&amp;rdquo; network.&lt;/p&gt;
&lt;h2 id=&#34;current-lab-state&#34;&gt;Current Lab State&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/210417_labinprogress.png#floatright&#34; alt=&#34;GNS3 Lab state&#34;&gt;
My home network is built using Meraki gear.  That&amp;rsquo;s not a typical home setup, but I was supporting a lot of Meraki for a while and it was a good way to &amp;ldquo;eat the dogfood&amp;rdquo;.  I divide the home into subnets so that high risk devices (IoT, kids computers) are isolated.  I have an ESXi server that hosts my GNS3 VM, but I haven&amp;rsquo;t switched over to the web client yet.  I&amp;rsquo;m still using the GNS3 front end running on PopOS!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a diagram of the lab I&amp;rsquo;m building.  In this first step we want to use 192.168.28.0/22 for our GNS3 environment and communicate from it to the local network and the Internet.&lt;/p&gt;
&lt;h2 id=&#34;attaching-the-cloud&#34;&gt;Attaching the Cloud&lt;/h2&gt;
&lt;p&gt;My local network is represented by &amp;ldquo;Cloud1&amp;rdquo;.  I placed this into the lab and attached a connection to the virtual Cisco router.  I chose the G0/1 interface when I placed the connection, but this can later be found by hovering over the virtual router in GNS3.  You can label connections in GNS3 by clicking the &amp;ldquo;Show/Hide Inteface Labels&amp;rdquo; button.  In this case I just placed some text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/210417_LocalRouting.png#floatleft&#34; alt=&#34;Understanding Local Routing&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Meraki device isn&amp;rsquo;t really within the GNS3 topology, it&amp;rsquo;s just a link to the Meraki Dashboard.  It&amp;rsquo;s convenient to have this easily accessible - refer to &lt;a href=&#34;https://nextpertise.net/posts/210113_gns3_links/&#34;&gt;Adding Hyperlinks to GNS3 Topologies&lt;/a&gt; for a walk through on how to do that.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-routing&#34;&gt;Setting up routing&lt;/h2&gt;
&lt;p&gt;My &amp;ldquo;real&amp;rdquo; Meraki router knows how to reach all the local VLANs because it&amp;rsquo;s directly attached to each of them.  It&amp;rsquo;s going to need to know how to reach the lab environment.  This is done under &amp;ldquo;Security &amp;amp; SD-WAN&amp;rdquo; &amp;gt; &amp;ldquo;Addressing and VLANs&amp;rdquo;.  At the bottom of that page is a place for static routes.  Identify an IP on the local network that you&amp;rsquo;ll use for the virtual router and then add a static route.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/210417_MerakiStatic.png#floatleft&#34; alt=&#34;Meraki Static Route&#34;&gt;&lt;/p&gt;
&lt;p&gt;I added a route to 192.168.28.0/22 going to the virtual router.  Even though I&amp;rsquo;m setting up a simple switching lab, giving a block of addresses to the lab means that I won&amp;rsquo;t have to revisit this process when we start talking about more complicated networks.&lt;/p&gt;
&lt;p&gt;The virtual router needs a default route pointing to the home router.  It&amp;rsquo;s also worth noting that I&amp;rsquo;m &lt;strong&gt;not&lt;/strong&gt; using a DHCP address for the virtual router.  You can do this and it &lt;em&gt;will&lt;/em&gt; work, but the address will change with each reboot and you&amp;rsquo;ll need to update the router configuration constantly.  Another option would be to use DHCP and a routing protocol.  This might be more of an option with another home router, but the Meraki is particularly weak in supporting dynamic routing.  Finally, I put an address on the inside of the virtual router.&lt;/p&gt;
&lt;p&gt;The following output has been edited for brevity, but shows the added commands and the test ping to Google.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Router# sh run  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hostname Router  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interface GigabitEthernet0/0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ip address 192.168.28.1 255.255.255.0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; interface GigabitEthernet0/1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ip address 192.168.25.82 255.255.255.0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route 0.0.0.0 0.0.0.0 192.168.25.1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Router#ping __8.8.8.8__  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type escape sequence to abort.  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!!!!!  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success rate is 100 percent (5/5), round-trip min/avg/max = 20/25/29 ms  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also want to verify that traffic is flowing from the Internet into our virtual GNS3 lab environment.  To do this I&amp;rsquo;ll source a ping from the G0/0 interface.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Router# ping  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Protocol [ip]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Target IP address: 8.8.8.8  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Repeat count [5]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Datagram size [100]:   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timeout in seconds [2]:   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Extended commands [n]: y  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ingress ping [n]:   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Source address or interface: 192.168.28.1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type of service [0]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set DF bit in IP header? [no]:   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Validate reply data? [no]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Data pattern [0x0000ABCD]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Loose, Strict, Record, Timestamp, Verbose[none]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sweep range of sizes [n]:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type escape sequence to abort.  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sending 5, 100-byte ICMP Echos to 8.8.8.8, timeout is 2 seconds:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Packet sent with a source address of 192.168.28.1   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!!!!!  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Success rate is 100 percent (5/5), round-trip min/avg/max = 20/27/31 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Router#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-1-complete&#34;&gt;Step 1 complete&lt;/h2&gt;
&lt;p&gt;Our lab environment is reachable from the local network and it can reach out to the public Internet as needed at this point.  The next step will be to setup the switches!&lt;/p&gt;
&lt;h2 id=&#34;play-along-at-home&#34;&gt;Play along at home&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s an associated Github repository for these labs (brentstewart/gns3labs).  So far it just has this initial version of the switching lab in it.  The topology is there, but it doesn&amp;rsquo;t have configurations anything other than the router.  I&amp;rsquo;ll continue to refine this lab and add more labs to that repository as we continue this adventure.  Please clone the repo and work these with me!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZeroTier Router</title>
      <link>https://nextpertise.net/posts/201027_zerotierrouter/</link>
      <pubDate>Tue, 27 Oct 2020 22:10:59 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/201027_zerotierrouter/</guid>
      <description>&lt;p&gt;This article continues the exploration of ZeroTier started in a previous &lt;a href=&#34;https://nextpertise.net/posts/201027_zerotier/&#34;&gt;posting&lt;/a&gt;.  The first article described zerotier - an overlay virtual wire that hangs on the internet to connect disparate clients into a psuedo local network.  At the end of the discussion, we had a PC at home and a 4G mobile phone talking over Zerotier.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll continue the thought describing how to connect your local home network to your Zerotier virtual network.  For purposes of this article, let&amp;rsquo;s consider a home network with a little complexity.
&lt;img src=&#34;https://nextpertise.net/ZeroTier_Routing.png#center&#34; alt=&#34;Sample Network&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example, there is a base network of 192.168.100.0/24.  The 101 network is routed through the firewall and is used for IoT devices, while 102 is used for wireless.  104/22 has a next-hop in GNS3, so that a network can be establish and ennumberated using the network simulator and still route out to the &amp;ldquo;real&amp;rdquo; world.&lt;/p&gt;
&lt;p&gt;We want to create a router that has one interface in the local 192.168.100.0/24 network and a virtual interface in the virtual Zerotier 103.0/24 network, able to route between them.  To do this, I built a new Linux server (an Ubuntu 20.10 VM, but any distro physical or virtual should work).  I named the router &amp;ldquo;ZTRouter&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A quick note - use care when routing 192.168.0.0/24 and 192.168.1.0/24.  A lot of home routers use these ranges and adding a ZeroTier route to the same destination might lead to confusion.  Select a space out of 10/8, 172.16/12, or 192.168/16 that won&amp;rsquo;t conflict with other routes you need to support.&lt;/p&gt;
&lt;h2 id=&#34;zerotier-routing&#34;&gt;ZeroTier Routing&lt;/h2&gt;
&lt;p&gt;I assigned ZTRouter 192.168.100.2/24 with a default route to the local router at 192.168.100.1.  Next I installed Zerotier and attached it to the SDN built in the last article.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s https://install.zerotier.com | sudo bash  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo zerotier-cli join 0123456789ABCDEF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo zerotier-cli listnetworks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/ZTrouting.png#floatright&#34; alt=&#34;Zero Tier Routing Configuration&#34;&gt;The router will be automatically assigned an address on the ZeroTier network - in this case I received 192.168.103.88.  &lt;strong&gt;listnetworks&lt;/strong&gt; is used to confirm the connection.&lt;/p&gt;
&lt;p&gt;The routing that will need to be setup might not be obvious, so let&amp;rsquo;s walk through each route.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.103.0/24 is the Zerotier network.  A range from this network should be used in &amp;ldquo;auto-assign pools&amp;rdquo; in ZeroTier Central, such as 192.168.103.1 - 192.168.103.50.&lt;/li&gt;
&lt;li&gt;192.168.100.0/22 is the summary route to the local network and it points to ZTRouter.  This tells the other ZeroTier clients that this range is available through ZTRouter.&lt;/li&gt;
&lt;li&gt;192.168.104.0/22 is another summary route, this time for GNS3.  Again, this communicates the availability of the range to the ZeroTier network via ZTRouter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;routing-between-zerotier-and-the-lan&#34;&gt;Routing between ZeroTier and the LAN&lt;/h2&gt;
&lt;p&gt;Next, ZTRouter needs to be enabled as a router.  Edit /etc/sysctl.conf and uncomment the line that says &lt;strong&gt;net.ipv4.forward&lt;/strong&gt;.  This will enable the Linux machine to route when it reboots.  Since we want it to work &lt;em&gt;now&lt;/em&gt;, well use this command as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sysctl -w net.ipv4.ip_forward&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The local firewall also has to permit the traffic.  Depending on the distro, you may have nftables, iptables, or ufw.  Assuming the system uses iptables, start by getting the interface names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip link
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For purposes of the article, let&amp;rsquo;s assume it shows you that the ethernet is enp1s0 and ZeroTier is zt1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PHY_IFACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enp1s0; ZT_IFACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zt1 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo iptables -t nat -A POSTROUTING -o $PHY_IFACE -j MASQUERADE  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo iptables -A FORWARD -i $PHY_IFACE -o $ZT_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo iptables -A FORWARD -i $ZT_IFACE -o $PHY_IFACE -j ACCEPT  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make the iptables changes persistent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install iptables-persistent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c iptables-save &amp;gt; /etc/iptables/rules.v4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reciprocal-routes&#34;&gt;Reciprocal Routes&lt;/h2&gt;
&lt;p&gt;If testing is done at this point, it will show that ZT clients can ping the LAN interface of ZTRouter but can&amp;rsquo;t reach other users on the LAN.  What gives?  The problem is that we&amp;rsquo;ve built a path from the ZT cloud into our LAN, but not the reciprocal path &lt;em&gt;back&lt;/em&gt;.  The local users have a default gateway of the Internet router and &lt;em&gt;it&lt;/em&gt; doesn&amp;rsquo;t have a route to 192.168.103.0/24.  The easy way to fix that is to give it a route.  Everyone&amp;rsquo;s home router will be different, so in psuedo-code you just need to &lt;strong&gt;route 192.168.103.0/24 via 192.168.100.2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Testing will now show that ZeroTier clients can ping devices in the &amp;ldquo;100&amp;rdquo; network!  But, they can&amp;rsquo;t reach the other local VLANs.  The problem is that ZTRouter doesn&amp;rsquo;t have a route.  To fix that, add a summary route going to the Internet router.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route add 192.168.100.0/22 gw 192.168.100.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add this line to &lt;em&gt;/etc/rc.local&lt;/em&gt; so that it is persistent.&lt;/p&gt;
&lt;p&gt;Note that this summary includes the ZeroTier network.  The routing table prefers the most specific path, so traffic to 103/24 will continue to route to ZeroTier and everything else will take the less specific route to the inter-vlan router.&lt;/p&gt;
&lt;p&gt;At this point, ZeroTier clients will be able to reach all the local subnets (100/24, 101/24, and 102/24).  Traffic to GNS3 can also be pointed to the Internet router, or it can be directed to a GNS3 router.  Note that 100/22 and 104/22 can&amp;rsquo;t be summarized into 100/21 because they fall across a bit-boundary, so they&amp;rsquo;ll have to be configured as two routes.&lt;/p&gt;
&lt;p&gt;One place that can cause trouble is route selection.  On ZTRouter, the ZeroTier summary route for 100/22 will be in the routing table.  The static route created &lt;em&gt;must&lt;/em&gt; be a lower metric so that it takes precedence.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is a slick setup.  ZeroTier makes a great VPN client, punches through NATs, and can create sophisticated routing.  The two places I expect folks to get hung up are getting the routes correctly configured in ZeroTier Central and making sure there is a reciprocal route back to the ZeroTier VPN range.  If you have problems, work your way out from the router one step at a time and make sure you understand how the routes are working going in &lt;em&gt;both&lt;/em&gt; directions (I&amp;rsquo;ve taught routing for twenty years and everyone always forgets to check the path back).&lt;/p&gt;
&lt;p&gt;Of course, most networks won&amp;rsquo;t be as sophisticated as the one shown here and will be very straightforward to setup.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZeroTier Basic Configuration</title>
      <link>https://nextpertise.net/posts/201027_zerotier/</link>
      <pubDate>Sun, 25 Oct 2020 16:29:57 -0400</pubDate>
      
      <guid>https://nextpertise.net/posts/201027_zerotier/</guid>
      <description>&lt;p&gt;Zerotier is a virtualized network that runs &amp;ldquo;on top of&amp;rdquo; the Internet.&lt;/p&gt;
&lt;p&gt;Traditional VPN solutions are built around a VPN server, which acts as a hub location with a stable IP.  Modern teams feature mobile workers and home connections with random IPs behind service-provider NATs.  Start-up teams and home users are left with few options, all of which involve some level of compromise.&lt;/p&gt;
&lt;p&gt;Zerotier works around this by offering a stable point to connect end-points.  The connection strategy resembles VoIP connections - there&amp;rsquo;s a registration to a central point, that tries a variety of ways to create a connection to end points.  It then allows the end-points to speak directly.  All traffic between end-points is encrypted peer-to-peer.&lt;/p&gt;
&lt;p&gt;Zerotier allows the creation of a &amp;ldquo;virtual ethernet&amp;rdquo; that connects disparate endpoints.  I created a ZeroTier network and tested it with Fedora and Ubuntu Linux, as well as an Android phone.  I was able to connect to the ZeroTier network from a guest wifi and over a 4G connection.  Once connected, it behaved like a local network.  I was able to SSH, browse and download files, access a Calibre server, and use KDE Connect.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-zerotier-network&#34;&gt;Setting up a ZeroTier network&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://www.zerotier.com&#34;&gt;ZeroTier&lt;/a&gt; and scroll down to the bottom to &lt;strong&gt;Sign Up&lt;/strong&gt;.  After signing up, you&amp;rsquo;ll be taken to the ZeroTier Central page and be given a 16-digit hex network id and a made up name (like &amp;ldquo;gratious_donut&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/ZTnetworks.png#floatright&#34; alt=&#34;Zero Tier Networking&#34;&gt;&lt;/p&gt;
&lt;p&gt;Make sure under Access Control that you set your network to private.  This will not allow new connections without your permission.&lt;/p&gt;
&lt;p&gt;Under advanced, choose a network range.  You can use one of the &amp;ldquo;easy&amp;rdquo; options or select an IP address range of your own.  For now, just choose a pre-defined range.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an option to use IPv6.  The easy way is to click the ZeroTier 6PLANE option.  It&amp;rsquo;s a great idea to be learning about IPv6, but most of us are still using v4 and if that&amp;rsquo;s the case for you then just leave this turned off.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for Central for now.  Copy your network ID (the 16 digit hex number).  We&amp;rsquo;ll need to revisit Central later, but next we need to setup devices.&lt;/p&gt;
&lt;h2 id=&#34;client-installation&#34;&gt;Client installation&lt;/h2&gt;
&lt;p&gt;The instructions  for setting up clients can be found at &lt;a href=&#34;https://www.zerotier.com/download&#34;&gt;ZeroTier Downloads&lt;/a&gt;.  There&amp;rsquo;s a clicky MSI installer for Windows, and a pkg for Mac.  Smartphone users are directed to their stores.&lt;/p&gt;
&lt;p&gt;On Linux, the software can be installed with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s https://install.zerotier.com | sudo bash  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After installation, use &lt;strong&gt;zerotier-cli&lt;/strong&gt; to join the new virtual network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo zerotier-cli join 123456789ABCDEF  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://nextpertise.net/ZTclient.png#floatright&#34; alt=&#34;ZeroTier Client&#34;&gt;
Go back to Central and scroll down to clients.  Find the new client and check the Auth? box.  You should add a name and description here as well to help identify this client as you add more endpoints.&lt;/p&gt;
&lt;p&gt;Back at Linux, confirm that you&amp;rsquo;re on the network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo zerotier-cli status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let&amp;rsquo;s setup an Android endpoint to have something to talk to.  Grab the app from the Play store.  Click the + in the upper right and type in the network ID.  Slide the ON button over and go back to Central and Authorize the client.&lt;/p&gt;
&lt;p&gt;You can continue to add clients in this manner, but I suggest you pause here.  My next article will be about routing between networks with Zerotier and that may be useful before you move further.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
