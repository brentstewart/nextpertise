<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on </title>
    <link>https://www.nextpertise.net/tags/shell/</link>
    <description>Recent content in shell on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jan 2022 19:05:41 -0500</lastBuildDate>
    
        <atom:link href="https://www.nextpertise.net/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Oh My Posh</title>
      <link>https://www.nextpertise.net/posts/220124_oh_my_posh/</link>
      <pubDate>Tue, 25 Jan 2022 19:05:41 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/220124_oh_my_posh/</guid>
      <description>&lt;p&gt;I really like the powerline-style prompts that jazz up the command line and I&amp;rsquo;d like to be able to carry that experience through from Linux to Windows.  It seems like everytime I install a new systema and think about this, I find another slightly different way to do something similar.  Recently I found &lt;em&gt;Oh My Posh&lt;/em&gt;, which is designed to support Windows, Linux, and MacOS.  The attraction here is that this gives me the prompt style I like from a consolidated source and with a defined way to set it up.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of OMP installed in Linux running inside Tilix.  You can see that it&amp;rsquo;s providing me collapsed directory information, git info, and the time of the last command.  OMP can be customized and the details of that are described extensively in the online docs.
&lt;img src=&#34;https://www.nextpertise.net/omp_tilix.png#center&#34; alt=&#34;Oh My Posh in Tilix on Linux&#34;&gt;
This has some marginal productivity - the Agnoster theme condenses directory structure in a very visible way and helps me understand the state of Git.  Regardless, it looks cool and a little terminal rice establishes some credibility.  If it looks cool to you too, I&amp;rsquo;ve put together some notes on how it&amp;rsquo;s done.  Follow along!&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;p&gt;Installation on Linux involves grabbing the file from Github and making it executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
sudo chmod +x /usr/local/bin/oh-my-posh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, grab the themes JSON collection, uncompress them, and set the permissions appropriately.  With the themes locally stored, you can easily switch as the mode strikes.  Agnoster fits my needs, so that&amp;rsquo;s what is used in the examples, but you can substitute anywhere you see it mentioned.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/.poshthemes
wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip
unzip ~/.poshthemes/themes.zip -d ~/.poshthemes
chmod u+rw ~/.poshthemes/*.json
rm ~/.poshthemes/themes.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, edit ~/.bashrc to run Oh My Posh as part of the shell.  Notice in the code below that I&amp;rsquo;ve specified the &amp;ldquo;agnosterplus&amp;rdquo; layout.  Substitute whichever theme you are interested in there.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval &amp;quot;$(oh-my-posh --init --shell bash --config ~/poshthemes/agnosterplus.omp.json)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll need to specify the terminal font in your terminal application.  A lot of the styling is done through extra ligatures included in &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd fonts&lt;/a&gt; - font files that are re-compiled to include additional symbols.  Grab a font you like (I&amp;rsquo;m using Meslo in this example, but I&amp;rsquo;m also partial to JetBrains NF) and set it as the default in the terminal profile.&lt;/p&gt;
&lt;p&gt;This setup is used by bash, regardless of the terminal application.  I have Tabby, Tilix, and the included Terminal from Pop! and all three &amp;ldquo;just work&amp;rdquo;.  As mentioned, the only cavaet is getting a good font setup in the terminal profile.&lt;/p&gt;
&lt;h2 id=&#34;windows-powershell&#34;&gt;Windows PowerShell&lt;/h2&gt;
&lt;p&gt;As mentioned, Oh My Posh works swimmingly with PowerShell on Windows.  I have it working in the Powershell terminal and in the Windows Terminal (but recommend the later).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/omp_windows.png&#34; alt=&#34;Om My Posh in Windows Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;OMP can be installed on Windows using PowerShell, &lt;a href=&#34;https://www.nextpertise.net/posts/220118_choco/&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://www.nextpertise.net/posts/211228_winget/&#34;&gt;Winget&lt;/a&gt;, or scoop.  I prefer Choco, so that&amp;rsquo;s what is used in the examples below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install oh-my-posh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then edit the profile.  You may get an error because there&amp;rsquo;s not an existing profile.  If so, just create one.  Type &lt;strong&gt;$profile&lt;/strong&gt; in PowerShell to see what the filename and location should be.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notepad $profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add the following into the profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import-Module oh-my-posh
oh-my-posh --init --shell pwsh --config ~/agnosterplus.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, you&amp;rsquo;ll need to use the &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd font&lt;/a&gt; of your choice.  Set this up in the PowerShell Terminal or Microsoft Terminal.  Both apps use the same $profile, so you just need to change the font in the terminal.&lt;/p&gt;
&lt;h2 id=&#34;windows-cmd&#34;&gt;Windows CMD&lt;/h2&gt;
&lt;p&gt;OMP is even available for the traditional command line.  For cmd, install &lt;a href=&#34;https://chrisant996.github.io/clink/&#34;&gt;clink&lt;/a&gt;.  Clink adds some of the editing features of Bash to the traditional CMD.  Download clink and run the installer.  You can verify the installer by running &lt;strong&gt;clink info&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clink info
version  : 1.3.2.222baa
session  : 8504
binaries : C:\Program Files (x86)\clink\1.3.2.222baa
state    : C:\Users\Brent\AppData\Local\clink
    &amp;lt; output trimmed&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create a file called oh-my-posh.lua in your clink directory.  Note that this directory is given from &lt;strong&gt;clink info&lt;/strong&gt;.  The load string below starts OMP - note the theme is specified as well.  This section of text can be replaced if you disagree with me on the theme to be used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notepad AppData\Local\clink\oh-my-posh.lua
    &amp;lt;add this text&amp;gt;
load(io.popen(&#39;oh-my-posh --config=&amp;quot;C:/Users/Brent/.oh-my-posh/themes/agnosterplus.omp.json&amp;quot; --init --shell cmd&#39;):read(&amp;quot;*a&amp;quot;))()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sudo for Windows Powershell</title>
      <link>https://www.nextpertise.net/posts/220124_sudo_on_windows/</link>
      <pubDate>Sun, 23 Jan 2022 18:28:41 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/220124_sudo_on_windows/</guid>
      <description>&lt;p&gt;Some Windows Powershell commands must be run from Powershell running in an administrative context.  It&amp;rsquo;s a little bit of a pain when you need to invoke Powershell this way (right click it in the menu).  The real problem is once there&amp;rsquo;s a terminal up, do you limit this to just the command that requires it or do you just work out of the open (administrative) terminal window?  Choosing to remain in that admin context could lead to trouble.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/sudologo.png#floatsmallleft&#34; alt=&#34;Sudo Logo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-need-for-sudo&#34;&gt;The need for sudo&lt;/h2&gt;
&lt;p&gt;Unix has a nice way of handling this.  The command prompt starts with your user priviledges.  It can be escalated for a single command with &amp;ldquo;sudo&amp;rdquo; - substitute user do.  Wouldn&amp;rsquo;t it be cool (and more secure) if a similar command existed for Powershell on Windows?&lt;/p&gt;
&lt;p&gt;Luke Sampson has a set of powershell scripts that appropximate Linux commands on &lt;a href=&#34;https://github.com/lukesampson/psutils/blob/master/sudo.ps1&#34;&gt;Github&lt;/a&gt;.  These include sudo and are meant to be installed using &lt;em&gt;scoop&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-scoop&#34;&gt;Using Scoop&lt;/h2&gt;
&lt;p&gt;Scoop is an installer, like winget or choco, but it&amp;rsquo;s aimed more at simple installs.  Scoop doesn&amp;rsquo;t require a developer to make a special installer - it can use a ZIP and instructions in a JSON.  These JSON files are stored in buckets - basically these are curated compilations of JSON files stored in a Git.&lt;/p&gt;
&lt;p&gt;Scoop specializes in simple programs, like command-line tools such as sudo.  In fact, many linux-like tools can be easily installed by scoop such as sudo, git, and curl.  Scoop puts everything in your users directory, so it doesn&amp;rsquo;t cause a lot of UAC pop-ups.&lt;/p&gt;
&lt;p&gt;Scoop and sudo can be installed as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# allow powershell scripts
Set-ExecutionPolicy unrestricted
# install scoop
iwr -useb get.scoop.sh |iex
# install sudo 
scoop install sudo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;strong&gt;scoop search&lt;/strong&gt; to see if a program is available through scoop.  Check out the github site to see other buckets that are available as well.&lt;/p&gt;
&lt;h2 id=&#34;using-sudo-in-powershell-for-windows&#34;&gt;Using Sudo in Powershell for Windows&lt;/h2&gt;
&lt;p&gt;Once installed, you can escalate priviledges on a command-by-command basis by prefixing them with &amp;ldquo;sudo&amp;rdquo;, just like you would on Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo set-executionpolicy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey Installer for Windows</title>
      <link>https://www.nextpertise.net/posts/220118_choco/</link>
      <pubDate>Tue, 18 Jan 2022 15:27:47 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/220118_choco/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m setting up a new Windows 10 VM (this time in VMWare) and decided to use Chocolatey to install applications this time, since I tried &lt;em&gt;winget&lt;/em&gt; last time.  I haven&amp;rsquo;t tried Chocolatey in a while, and I&amp;rsquo;ve spent a lot of time exclusively in Linux since then so I was curious what I would make of it, especially in comparison to &lt;a href=&#34;https://www.nextpertise.net/posts/211228_winget/&#34;&gt;Winget&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; is a package manager like apt.  You can use it to search for, install, update, and uninstall programs.  This is particularly useful if you have a &amp;ldquo;standard setup&amp;rdquo; for new computers - it&amp;rsquo;s possible to build a script to install the apps you expect.  Windows Update only covers Microsoft programs, so Chocolatey fills another gap by updating all the programs it installs from the command line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/chco-square.svg#floatsmallleft&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h2&gt;
&lt;p&gt;Chocolatey is free open-souce software that has been around for a while and I&amp;rsquo;ve used it before.  Chocolatey works like &lt;em&gt;apt&lt;/em&gt;, using the &lt;em&gt;choco&lt;/em&gt; command.  You can search for a package, install it, or uninstall it. &lt;em&gt;Choco upgrade&lt;/em&gt; will upgrade all the Chocolatey-managed applications on your system.  This last piece is especially useful, since Windows Update focuses just on Microsoft properties.&lt;/p&gt;
&lt;p&gt;Chocolatey uses the command &lt;em&gt;choco&lt;/em&gt;.  The command sequence below shows looking for all packages in the repository that are include &amp;ldquo;libre&amp;rdquo;.  That allows me to see the name of the LibreWolf package, which I then choose to install.  Finally, the upgrade command can be used to upgrade specific packages or to get them all.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco list libre
choco install librewolf
choco upgrade all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;em&gt;choco list &amp;ndash;local-only&lt;/em&gt; to see a list of programs installed on the local system by choco.  There&amp;rsquo;s also a GUI, installed by &lt;em&gt;choco install chocolateygui&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Choco compares very well to Microsoft&amp;rsquo;s &lt;em&gt;winget&lt;/em&gt;.  The application set available seems a little larger.  Like &lt;em&gt;winget&lt;/em&gt;, choco will be familiar to &lt;em&gt;apt&lt;/em&gt; users (but there are some syntactical differences.  I used winget to easily install Git, WinFSP, SSHFS, the Microsoft Terminal, and Librewolf.   A later upgrade picked up new versions of Librewolf and Git and installed them without difficulty.   &lt;em&gt;Choco&lt;/em&gt; also seemed to apply some KB patches I was missing and even upgraded itself!&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Setup is very easy.  Installation can be done from an administrative powershell using these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy AllSigned
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pretty-solid&#34;&gt;Pretty Solid&lt;/h2&gt;
&lt;p&gt;When I tried winget, I had issues with dependencies.  Chocolatey picked these up and installed without an issue, so Librewolf grabbed the Visual C redistributable module and installed it without prompting, for instance.  &lt;em&gt;Choco&lt;/em&gt; has a wide range of supported applications, particularly if you like to use FOSS.&lt;/p&gt;
&lt;p&gt;The biggest issue with Chocolatey is image.  The name doesn&amp;rsquo;t build credibility, and with Microsoft building a competing product now I expect IT departments to focus on &lt;em&gt;winget&lt;/em&gt;.  That said, &lt;em&gt;choco&lt;/em&gt; is a more complete solution with a bigger catalog as of today and it&amp;rsquo;s definitely the better fit for home.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winget</title>
      <link>https://www.nextpertise.net/posts/211228_winget/</link>
      <pubDate>Tue, 28 Dec 2021 11:46:32 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/211228_winget/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m experimenting with KVM and decided to build a new Windows VM.  I&amp;rsquo;m currently using Pop!_OS 21.10 which uses the 5.15 kernel.  Turns out that breaks Windows on VMWare workstation and it looks like the cause is VMWare not keeping up with the latest kernels.  There are some patches available, but it&amp;rsquo;s the week between Christmas and New Years and seemed like a good chance to review the FOSS alternative.&lt;/p&gt;
&lt;p&gt;Part of my troubleshooting process on Linux was to make sure that I haven&amp;rsquo;t made a change that&amp;rsquo;s impacting VMWare.  Pop! has a really cool feature that will roll-back to a clean install, but leave your personal files.  Reinstalling missing applications is pretty easy in linux.  Installing hugo again is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h2&gt;
&lt;p&gt;Chocolatey is free open-souce software that has been around for a while and I&amp;rsquo;ve used it before.  Chocolatey works like &lt;em&gt;apt&lt;/em&gt;, using the &lt;em&gt;choco&lt;/em&gt; command.  You can search for a package, install it, or uninstall it. &lt;em&gt;Choco upgrade&lt;/em&gt; will upgrade all the Chocolatey-managed applications on your system.  This last piece is especially useful, since Windows Update focuses just on Microsoft properties.&lt;/p&gt;
&lt;h2 id=&#34;winget&#34;&gt;Winget&lt;/h2&gt;
&lt;p&gt;Microsoft has developed a similar tool called &lt;em&gt;winget&lt;/em&gt;.  I have a bias toward open source, but my job is in a corporate Windows environment.  I&amp;rsquo;m not sure that I could get Chocolatey in the door, but Winget might be something that could be used.  I decided to give it a whirl in this VM and try to get some experience.&lt;/p&gt;
&lt;p&gt;Installation is a little non-obvious.  If you go to the &lt;a href=&#34;https://github.com/microsoft/winget-cli/&#34;&gt;Github page&lt;/a&gt;, it recommends installation through the Windows Store.  However, I searched the store and didn&amp;rsquo;t find anything.  Instead, I downloaded the &lt;strong&gt;msixbundle&lt;/strong&gt; file from the latest release and ran it.&lt;/p&gt;
&lt;p&gt;Winget will be intuitive for apt users.  &lt;strong&gt;Winget search libre&lt;/strong&gt; showed me available applications with &lt;em&gt;libre&lt;/em&gt; in the title including LibreOffice and Librewolf.  &lt;strong&gt;Winget install librewolf&lt;/strong&gt; installed the firefox-based web browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/211228_Winget.png&#34; alt=&#34;Winget Example&#34;&gt;&lt;/p&gt;
&lt;p&gt;One of the best features of apt is the easy way that components are upgraded.  Running &lt;strong&gt;winget upgrade&lt;/strong&gt; will list installed applications that have an upgrade avaialable.  It even caught an application I did not install with winget!  &lt;strong&gt;Winget upgrade &amp;ndash;all&lt;/strong&gt; will install all available upgrades.  You can also specify specific applications that you want to upgrade.&lt;/p&gt;
&lt;h2 id=&#34;not-baked-yet&#34;&gt;Not baked yet&lt;/h2&gt;
&lt;p&gt;I identified three issues in my early experimentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apt&lt;/strong&gt; will identify dependencies and include them during the application installation.  Librewolf completed installation without an error, but wouldn&amp;rsquo;t run without the &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;Visual C redistributable module&lt;/a&gt;.  &lt;strong&gt;Winget search&lt;/strong&gt; didn&amp;rsquo;t turn up a way to install the dependency, so I installed it directly from the Microsoft site.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that winget identified upgrades even for applications it didn&amp;rsquo;t install.  That true and would be an enormous advantage of the tool.  But . . . it didn&amp;rsquo;t work.  The upgrade failed and pointed me to a log.  The log showed that the service needed to be stopped before upgrading.  Once I stopped the service and re-ran the &lt;strong&gt;winget upgrade &amp;ndash;all&lt;/strong&gt; command, the process completed successfully.&lt;/p&gt;
&lt;p&gt;Winget doesn&amp;rsquo;t get a &amp;ldquo;half-point&amp;rdquo; with the upgrade problem.  Instead of a simple update, this requires that I identify and shutdown services before running the upgrade, then manually restart them.  It&amp;rsquo;s doable, but far from the easy process that is expected on Linux.&lt;/p&gt;
&lt;p&gt;The third issue I found was that the Windows Decrapifier wasn&amp;rsquo;t included in winget.  Is this because the pool of installable applications is comparitvely shallow?  This seems reasonable since it&amp;rsquo;s a relatively new project.  You can see the complete list of currently supported applications (here)[https://github.com/microsoft/winget-pkgs/tree/master/manifests/d].  Is the lack of the decrapifier an editorial decision?  Possibly, but if so it portends an anemic future for the tool.&lt;/p&gt;
&lt;p&gt;##So?
Winget shows promise and it&amp;rsquo;s worth keeping an eye on.  But I won&amp;rsquo;t be recommending it to the end-user support group today.  Give me dependency recognition, easy upgrading, and broader support and this will be a standard part of the tool bag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tsukae - A tool for graphing command usage</title>
      <link>https://www.nextpertise.net/posts/210306_tsukae/</link>
      <pubDate>Sat, 06 Mar 2021 22:59:08 -0500</pubDate>
      
      <guid>https://www.nextpertise.net/posts/210306_tsukae/</guid>
      <description>&lt;p&gt;Readers may recall that six months ago I wrote about the &lt;a href=&#34;https://www.nextpertise.net/posts/200817_mostcommonlinuxcommand/&#34;&gt;most commonly used Linux commands&lt;/a&gt;.  I had seen a series of articles with that title and decided to see what my most common commands were.  I suggested the following as a way to pull command history and count usage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;history | awk ‘&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;print $2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;’ | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/irevenko/tsukae&#34;&gt;Tsukae&lt;/a&gt; is a much better way to accomplish this task.  It&amp;rsquo;s much simpler and can produce the output in Bar or Pie chart, or as a list.  Tsukae is written by Ilya Revenko and can be cloned from GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.nextpertise.net/tsukae.gif&#34; alt=&#34;Tsukae Demo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-tsukae&#34;&gt;Installing Tsukae&lt;/h2&gt;
&lt;p&gt;Tsukae needs Go to run (&lt;strong&gt;apt install golang-go&lt;/strong&gt;).  Once cloned, just go into the directory and build the executable.  Tsukae expects a &lt;em&gt;blacklist&lt;/em&gt; file to be present at &lt;em&gt;~/.config/tsukae/blacklist&lt;/em&gt;.  &lt;del&gt;This may be created automatically in future releases, but I got an error when I first ran the program and so created the file myself.&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/irevenko/tsukae.git  
cd tsukae  
go get -d ./...  
go build   
~~mkdir ~/.config/tsukae  
touch blacklist~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Update!&lt;/strong&gt;  I posted an issue for the above on GitHub and the author published an update today to fix.  I tested it and confirmed it resolved the issue.  This is a great example of the power of GitHub - everyone contributes in whatever way they can, and all contributions are appreciated.  In my case, by suggesting an improvement and helping test.  It&amp;rsquo;s why I continue to recommend that everyone participate in that community.  And thanks again to Ilya!&lt;/p&gt;
&lt;h2 id=&#34;running-tsukae&#34;&gt;Running Tsukae&lt;/h2&gt;
&lt;p&gt;When you run Tsukae you must specify the shell, as well as the number of commands to pull.  In the example below, I&amp;rsquo;ve gotten the top six bash commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./tsukae bash &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; Most Used bash Commands  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;255&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; git  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;148&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; apt  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;148&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; cd  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;107&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ls  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;74&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; hugo  
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; nano  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commands list &lt;em&gt;cd&lt;/em&gt; and &lt;em&gt;ls&lt;/em&gt; might be uninteresting.  Adding those to the &lt;em&gt;blacklist&lt;/em&gt; text file will omit them in the future.&lt;/p&gt;
&lt;p&gt;Git is a weird command to run most often, but I tend to run it a lot to sync the blog and upload new content.  I use the hugo command in development mode at the same time.  Tsukae is an interesting insight into how I&amp;rsquo;m using this computer.  It&amp;rsquo;s not a vital command to accomplish work, but the next time you see one of those &amp;ldquo;Top 25 Linux Command&amp;rdquo; articles you can see how closely their list matches yours.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
