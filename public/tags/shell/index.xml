<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on </title>
    <link>http://localhost:1313/tags/shell/</link>
    <description>Recent content in Shell on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Oct 2023 21:14:12 -0400</lastBuildDate>
    
        <atom:link href="http://localhost:1313/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Biz card</title>
      <link>http://localhost:1313/posts/231025_bizcard/</link>
      <pubDate>Wed, 25 Oct 2023 21:14:12 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/231025_bizcard/</guid>
      <description>&lt;p&gt;One of the guys on Jupiter Broadcasting spoke about a curl-able business card and I thought, &amp;ldquo;Gotta try it&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A little searching led me to an example - the card of &lt;a href=&#34;https://github.com/tallguyjenks/BusinessCard/blob/master/business_card&#34;&gt;Bryan Jenks&lt;/a&gt;.  I used Bryan&amp;rsquo;s work as a template.  Here&amp;rsquo;s what my finished version looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bizcard.png#floatleft&#34; alt=&#34;My curlable business card&#34;&gt;&lt;/p&gt;
&lt;p&gt;The basic concept is simple enough - put a slug of text on a web server and anyone can curl it.  Following Bryan&amp;rsquo;s example, I&amp;rsquo;m using console escape codes to provide color.  Here&amp;rsquo;s a few I find useful.&lt;/p&gt;




     
    
    
     







&lt;table class=&#34;table table-responsive table-hover&#34;&gt;
&lt;caption&gt;Table: Console escape codes&lt;/caption&gt;
  &lt;thead class=&#34;table-info&#34;&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Esc&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Effect&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Esc&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Color&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[0m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Plain text&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[30m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Black&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[1m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;bold&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[31m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Red&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[2m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;dim&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[32m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Green&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[4m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;underscore&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[33m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Gold&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[5m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;blink&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[34m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Blue&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[7m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;reverse&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[35m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Magenta&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[36m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Cyan&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[37m&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;White&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You&amp;rsquo;ll notice from the screen shot that I was able to test this with Hugo&amp;rsquo;s built-in server.  I want to deploy this publicly though, so I went to &lt;strong&gt;bit.ly&lt;/strong&gt; and took the long URL &lt;em&gt;&lt;a href=&#34;http://nextpertise.net/business&#34;&gt;http://nextpertise.net/business&lt;/a&gt;_card.text&lt;/em&gt; and shortened it to &lt;em&gt;bit.ly/brentbizcard&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The hardest part of this short project was getting the spacing to work out.  There&amp;rsquo;s no magic, just testing, adjusting, and retesting.  Not the most useful project, but it has a certain geek-cred.  To access the card, just use curl.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sL http://bit.ly/brentbizcard
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Terminal Weather</title>
      <link>http://localhost:1313/posts/230910_terminal_weather/</link>
      <pubDate>Sun, 10 Sep 2023 19:45:03 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/230910_terminal_weather/</guid>
      <description>&lt;p&gt;I found a fun addition to my command line - wttr.in.  I live in Hickory, NC, and the following curl command will return the weather to the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl &#39;https://wttr.in/Hickory%20NC&#39;?0?A?u
Weather report: Hickory NC

  _`/&amp;quot;&amp;quot;.-.     Thunderstorm in vicinity, light rain
    ,\_(   ).   68 °F          
    /(___(__)  ↓ 2 mph        
      ⚡‘‘⚡‘‘  9 mi           
      ‘ ‘ ‘ ‘   0.0 in  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seeing a three day forcast is even easier.
curl &amp;lsquo;&lt;a href=&#34;https://wttr.in/Hickory%20NC&#39;&#34;&gt;https://wttr.in/Hickory%20NC&#39;&lt;/a&gt;
Weather report: Hickory NC&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  _`/&amp;quot;&amp;quot;.-.     Thunderstorm in vicinity, light rain
    ,\_(   ).   68 °F          
    /(___(__)  ↓ 2 mph        
      ⚡‘‘⚡‘‘  9 mi           
      ‘ ‘ ‘ ‘   0.0 in         
                                                      ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Sun 10 Sep ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│               Fog            │               Overcast       │    \  /       Partly cloudy  │     \   /     Clear          │
│  _ - _ - _ -  68 °F          │      .--.     71 °F          │  _ /&amp;quot;&amp;quot;.-.     +77(80) °F     │      .-.      +73(77) °F     │
│   _ - _ - _   ↓ 3-4 mph      │   .-(    ).   ↙ 3-4 mph      │    \_(   ).   ← 1-2 mph      │   ― (   ) ―   ↓ 1-4 mph      │
│  _ - _ - _ -  6 mi           │  (___.__)__)  6 mi           │    /(___(__)  6 mi           │      `-’      6 mi           │
│               0.0 in | 0%    │               0.0 in | 0%    │               0.0 in | 0%    │     /   \     0.0 in | 0%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                      ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Mon 11 Sep ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│    \  /       Partly cloudy  │     \   /     Sunny          │    \  /       Partly cloudy  │  _`/&amp;quot;&amp;quot;.-.     Patchy rain po…│
│  _ /&amp;quot;&amp;quot;.-.     68 °F          │      .-.      +82(84) °F     │  _ /&amp;quot;&amp;quot;.-.     +77(80) °F     │   ,\_(   ).   71 °F          │
│    \_(   ).   ↘ 2-3 mph      │   ― (   ) ―   ↑ 3-4 mph      │    \_(   ).   ↓ 3-6 mph      │    /(___(__)  ↘ 3-7 mph      │
│    /(___(__)  6 mi           │      `-’      6 mi           │    /(___(__)  6 mi           │      ‘ ‘ ‘ ‘  6 mi           │
│               0.0 in | 0%    │     /   \     0.0 in | 0%    │               0.0 in | 0%    │     ‘ ‘ ‘ ‘   0.0 in | 82%   │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                      ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Tue 12 Sep ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│     \   /     Sunny          │     \   /     Sunny          │  _`/&amp;quot;&amp;quot;.-.     Patchy rain po…│  _`/&amp;quot;&amp;quot;.-.     Patchy rain po…│
│      .-.      71 °F          │      .-.      +84(86) °F     │   ,\_(   ).   68 °F          │   ,\_(   ).   68 °F          │
│   ― (   ) ―   → 2-3 mph      │   ― (   ) ―   ↗ 4-5 mph      │    /(___(__)  ↘ 4-9 mph      │    /(___(__)  ↘ 6-13 mph     │
│      `-’      6 mi           │      `-’      6 mi           │      ‘ ‘ ‘ ‘  5 mi           │      ‘ ‘ ‘ ‘  5 mi           │
│     /   \     0.0 in | 0%    │     /   \     0.0 in | 0%    │     ‘ ‘ ‘ ‘   0.0 in | 60%   │     ‘ ‘ ‘ ‘   0.0 in | 73%   │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
Location: Hickory, Catawba County, North Carolina, United States [35.7333312,-81.3442915]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also go to this web page to see the forcast as a graphic file: &lt;a href=&#34;https://wttr.in/hickory+nc.png&#34;&gt;https://wttr.in/hickory+nc.png&lt;/a&gt;
&lt;img src=&#34;http://localhost:1313/hickory+nc.png&#34; alt=&#34;Hickory Weather&#34;&gt;&lt;/p&gt;
&lt;p&gt;All well and good, but that&amp;rsquo;s a complicated command to remember.  I know, that&amp;rsquo;s what the up-arrow and &lt;em&gt;history&lt;/em&gt; are for, but still there needs to be an easier way.  I created two aliases to let me easily see the current and three day forcast.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias weather=&amp;quot;curl &#39;https://wttr.in/Hickory%20NC&#39;?m&amp;quot;
alias forcast=&amp;quot;curl &#39;https://wttr.in/Hickory%20NC&#39;?0?A?u?m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;alias&lt;/strong&gt; will remain in place for that session.  If you use BASH and want to make that permanently available, add the alias command into .bashrc.  You can also add one of those alias at the end of ,bashrc to have it automatically display your current conditionsa and forcast every time you start a session - I&amp;rsquo;ve found &lt;em&gt;forecast&lt;/em&gt; works pretty well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save to Kindle with a DIY CI</title>
      <link>http://localhost:1313/posts/230514_save2kindle/</link>
      <pubDate>Tue, 09 May 2023 21:20:24 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/230514_save2kindle/</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;http://localhost:1313/posts/230509_word2obsidian/&#34;&gt;previous post&lt;/a&gt; dealt with building an easy way to convert Word files to Markdown and automatically incorporate them in Obsidian.  That was accomplished by copying the DOCX file into a directory and having automation to perform the actions to get the file into the right place with the right format.  I was pleased with the way that worked out and thought about other places where I&amp;rsquo;d like to use a similar approach.&lt;/p&gt;
&lt;h1 id=&#34;print-to-tablet&#34;&gt;Print to Tablet&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve always wanted a way to &amp;ldquo;print to tablet&amp;rdquo;.  I&amp;rsquo;ve had IPads and Galaxy Tabs and enjoy the form factor - tablets are an easy way to read.  But there&amp;rsquo;s never been a great way to move something I create on my desktop over to the tablet.  I&amp;rsquo;ve resorted to saving it to PDF, emailing it to myself, and then opening it on the tablet.  But wait!  Because of the way tabllet break up storage, it&amp;rsquo;s usually confusing to understand where the file is stored and which programs should be used.  Bah!&lt;/p&gt;
&lt;p&gt;This really galls me because sometimes I&amp;rsquo;ll print out a document and think, &amp;ldquo;This would save a lot of paper if I could just print it to my tablet&amp;rdquo;.  The thought of saving printing costs, saving a fraction  of a tree, and having the file in a convenient form would really be nice.&lt;/p&gt;
&lt;h2 id=&#34;ingredients&#34;&gt;Ingredients&lt;/h2&gt;
&lt;p&gt;How did I get this to work?  In my mind, the basic building blocks would be &lt;strong&gt;inotifywait&lt;/strong&gt; (discussed in the previous post), kindle&amp;rsquo;s email import function and ssmtp (discussed in &lt;a href=&#34;http://localhost:1313/posts/230313_command_line_email/&#34;&gt;Command Line Email&lt;/a&gt;).  Expiriments with ssmtp determined that it&amp;rsquo;s hard to use with attachments, but researching that led me to &lt;strong&gt;mpack&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This project will use &lt;strong&gt;inotifywait&lt;/strong&gt; to monitor a directory.  When a file is put in that directory it will be copied out to the kindle app on my tablet.  There&amp;rsquo;s a little longer discussion of inotifywait in the previous post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/230514_Amazon_Devices.png#floatsmallleft&#34; alt=&#34;Amazon Devices&#34;&gt;&lt;/p&gt;
&lt;p&gt;Amazon provides an email associated with every Kindle, physical or app, that can be used to import files.  Sending an email to that address will copy the attached file into the Kindle&amp;rsquo;s local library (and convert it if needed).  You can find this email address two ways - either login to Amazon and navigate to &amp;ldquo;Accounts &amp;amp; List&amp;rdquo; and choose &amp;ldquo;Devices&amp;rdquo;.  From here you can select either a Fire Tablet or a Kindle app and see it&amp;rsquo;s assigned email address.  It will look like _&lt;a href=&#34;mailto:name_ABCD@kindle.com&#34;&gt;name_ABCD@kindle.com&lt;/a&gt;.  You can also go into the kindle app and find it under &amp;ldquo;More&amp;rdquo;, then &amp;ldquo;Settings&amp;rdquo; and it will be shown as &lt;strong&gt;Send to Kindle Email Address&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Amazon calls this function the &amp;ldquo;Kindle Personal Document Service&amp;rdquo; and claim that it can convert several types of files.  I tested PDF, DOCX, and EPUB and didn&amp;rsquo;t have any issues.




     
    
    
     







&lt;table class=&#34;table table-responsive table-hover&#34;&gt;
&lt;caption&gt;Table of supported import formats&lt;/caption&gt;
  &lt;thead class=&#34;table-info&#34;&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;DOC&lt;/td&gt;
          &lt;td&gt;DOCX&lt;/td&gt;
          &lt;td&gt;RTF&lt;/td&gt;
          &lt;td&gt;TXT&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;HTM&lt;/td&gt;
          &lt;td&gt;HTML&lt;/td&gt;
          &lt;td&gt;ZIP&lt;/td&gt;
          &lt;td&gt;x-zip&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MOBI&lt;/td&gt;
          &lt;td&gt;EPUB&lt;/td&gt;
          &lt;td&gt;PDF&lt;/td&gt;
          &lt;td&gt;JPEG&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GIF&lt;/td&gt;
          &lt;td&gt;BMP&lt;/td&gt;
          &lt;td&gt;PNG&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;The last piece is &lt;strong&gt;mpack&lt;/strong&gt;.  I used &lt;strong&gt;ssmtp&lt;/strong&gt; in my previous project and found some ideas on how to attach a file using ssmtp, but never got that to work.  In the process of researching that issue I found &lt;strong&gt;mpack&lt;/strong&gt;, which uses ssmtp (at least the settings and a library) to send an email with attachment.  Install mpack on Ubuntu using &lt;strong&gt;sudo apt install mpack&lt;/strong&gt;.  Once it&amp;rsquo;s installed, here&amp;rsquo;s a usage example to help you test.  The part being echo&amp;rsquo;d in is the body of the email - unnecessary when sending to kindle.  Email subject is set with &amp;ldquo;-s&amp;rdquo;.  Attachment is defined with &amp;ldquo;-a&amp;rdquo;, and then followed by the email address this should go to.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;Sent from your linux desktop&amp;quot; | mpack -s &amp;quot;Subject Line&amp;quot; -a &amp;quot;File.TXT&amp;quot; destination_email@ddress
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are issues, I suggest going back to the ssmtp setup and making sure that part is working.&lt;/p&gt;
&lt;h2 id=&#34;mixing-it-all-together&#34;&gt;Mixing it all together.&lt;/h2&gt;
&lt;p&gt;I defined a directory &lt;em&gt;send2kindle&lt;/em&gt;.  Anything copied in will be sent to my kindle email address and imported into that kindle library.  I created a batch file (watch_send2kindle.sh) and made it executable.  That script is shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
TARGET=~/send2kindle/

inotifywait -m -e create -e moved_to --format &amp;quot;%f&amp;quot; $TARGET | while read FILENAME
do
  echo Detected $FILENAME
  echo &amp;quot;Sent from your linux desktop&amp;quot; \
  | mpack -s &amp;quot;$FILENAME&amp;quot; -a &amp;quot;send2kindle/$FILENAME&amp;quot; user_ABCD@kindle.com
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This follows the logic used in the previous post.  Note that the backslash (&amp;quot; \ &amp;ldquo;) shows line continuation, so the echo and pipe are one line.  I did it that way to make it easier to read here.  I&amp;rsquo;ve setup &lt;strong&gt;innotify&lt;/strong&gt; to trigger on something being copied in.  The previous discussion has a few more details on that command if you are interested.  Note that I leave the files in the directory, so you may need to occassionally clean up and delete them.  I could have added a &lt;strong&gt;rm&lt;/strong&gt; command, but I decided that it might be useful to have a copy.  Once they&amp;rsquo;re copied in, they won&amp;rsquo;t trigger the workflow again.&lt;/p&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;With everything in place, all that&amp;rsquo;s left is testing.  Run the script and then copy a file into that directory.  It should pop into the Kindle library of your choice in less than a minute.&lt;/p&gt;
&lt;p&gt;Just like I did in the previous discussion, I recommend settting up the watcher script to start itself after reboot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;crontab -e  # gets us into edit mode
# add below entry
@reboot /home/brent/watch-send2kindle.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;in-closing&#34;&gt;In closing&lt;/h2&gt;
&lt;p&gt;This really extends some of the recent things I&amp;rsquo;ve been doing in a very useful way.  For instance, I can Print from any file and choose &amp;ldquo;PDF&amp;rdquo; as the printer.  When prompted for a filename, directing that to ~/send2kindle/newfile.pdf will send it to my tablet.  It&amp;rsquo;s not very complex to get setup and working and it &amp;ldquo;scratches an itch&amp;rdquo; I had.  Hope it is useful to you as well!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Word to Obsidian with a DIY CI</title>
      <link>http://localhost:1313/posts/230509_word2obsidian/</link>
      <pubDate>Tue, 09 May 2023 21:20:24 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/230509_word2obsidian/</guid>
      <description>&lt;p&gt;I use Obsidian as a note taking journal, but I get a lot of documents in other formats that I&amp;rsquo;d like to include in that journal.  One example is Word docs, such as my weekly reports.  I&amp;rsquo;ve copied some PDFs into my Obsidian vault, but for some reason I hit on the idea of converting DOCX to Markdown.&lt;/p&gt;
&lt;h2 id=&#34;what-didnt-work&#34;&gt;What Didn&amp;rsquo;t Work&lt;/h2&gt;
&lt;p&gt;Just to save you time, I&amp;rsquo;ll mention a few ideas that I tried and discarded on the way.  There is a plugin to save files from Word in Markdown called &lt;a href=&#34;https://www.writage.com/&#34;&gt;Writage&lt;/a&gt;.  It&amp;rsquo;s $29, but a trial version is available.  I&amp;rsquo;m obstinately opposed to closed source and I&amp;rsquo;m feeling less and less comfortable about downloading and installing EXEs and MSIs from random websites, so I haven&amp;rsquo;t tried it.&lt;/p&gt;
&lt;p&gt;I also found an old github repo that purported to address this issue.  That project has pivoted to HTML and deprecated the markdown code.&lt;/p&gt;
&lt;h2 id=&#34;the-beginning-of-an-idea&#34;&gt;The beginning of an idea&lt;/h2&gt;
&lt;p&gt;Looking for a FOSS solution lead me back to Pandoc.  Long, &lt;em&gt;long&lt;/em&gt; time readers may recall one of my early &lt;a href=&#34;http://localhost:1313/posts/200919_pandoc_improved/&#34;&gt;experiments&lt;/a&gt; with Pandoc.  &lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt; is a file converter and will handle conversions between things like DOC, EPUB, PDF, and HTML.  I setup a continuous integration (CI) pipeline using Github actions so that I uploaded some markdown files and they were automatically assembled and formatted as chapters into a PDF book.  That was a cool project, and perfect for maintaining SOPs, but a cloud solution seems like a lot of steps to get this into my Obsidian vault.&lt;/p&gt;
&lt;p&gt;I took a moment to confirm that pandoc will do the conversion I wanted.  After a little back and forth, here&amp;rsquo;s the command I came up with.  I&amp;rsquo;ve tested this with business memos and it worked fine.  I haven&amp;rsquo;t tried it with complex tables or graphs.  -f and -t are the from and to formats, -o is the output and the first file in quotes is the input.  The wrap command prevents pandoc from setting line length to 72 and adding a line return in every line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pandoc -wrap=none -f docx -t markdown &amp;quot;test.doc&amp;quot; -o &amp;quot;test.md&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;automating-markdown-conversion-and-ingestion&#34;&gt;Automating markdown conversion and ingestion&lt;/h2&gt;
&lt;p&gt;Pandoc gets the conversion, but I really don&amp;rsquo;t want to have to remember that command and then move files around.  I want something that is a DIY pipeline to go from DOCX to Markdown.  Here&amp;rsquo;s how I did it - explanation to follow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
TARGET=~/doc2obs/
PROCESSED=~/Downloads

inotifywait -m -e create -e moved_to --format &amp;quot;%f&amp;quot; $TARGET | while read FILENAME
do
  echo Detected $FILENAME
  pandoc -wrap=none -f docx -t markdown &amp;quot;/home/brent/doc2obs/$FILENAME&amp;quot; -o &amp;quot;/home/brent/doc2obs/$FILENAME.md&amp;quot;
  echo converted to Markdown
  rm &amp;quot;/home/brent/doc2obs/$FILENAME&amp;quot;
  echo removed doc file
  mv &amp;quot;/home/brent/doc2obs/$FILENAME.md&amp;quot; &amp;quot;/home/brent/2nd Brain/Notes/$(date +%y%m%d)_$FILENAME.md&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created a directory (doc2obs) and created a watcher shell script.  It waits for a DOCX file to be copied into &lt;em&gt;doc2obs&lt;/em&gt;.  When that occurs, it converts the file into markdown, deletes the DOCX, and renames and moves the markdown file.  Of course, the script needs to be executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x watch-doc2obs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s take that script step by step and explain a little more.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TARGET=~/doc2obs/
inotifywait -m -e create -e moved_to --format &amp;quot;%f&amp;quot; $TARGET | while read FILENAME
do
  ...
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This batch of done defines the directory to be monitored.  If your Linux of choice doesn&amp;rsquo;t have &lt;strong&gt;inotify&lt;/strong&gt;, it can be loaded using yum or apt as inotify-tools.  -m tells it to monitor, -e defines the events to be monitored.  You can notify on a variety of events.&lt;/p&gt;




     
    
    
     







&lt;table class=&#34;table table-responsive table-hover&#34;&gt;
&lt;caption&gt;Table of inotify events&lt;/caption&gt;
  &lt;thead class=&#34;table-info&#34;&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;access&lt;/td&gt;
          &lt;td&gt;create&lt;/td&gt;
          &lt;td&gt;move_self&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;attrib&lt;/td&gt;
          &lt;td&gt;delete&lt;/td&gt;
          &lt;td&gt;moved_to&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;close_write&lt;/td&gt;
          &lt;td&gt;delete_self&lt;/td&gt;
          &lt;td&gt;moved_from&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;close_nowrite&lt;/td&gt;
          &lt;td&gt;modify&lt;/td&gt;
          &lt;td&gt;open&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;close&lt;/td&gt;
          &lt;td&gt;move&lt;/td&gt;
          &lt;td&gt;unmount&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;strong&gt;echo&lt;/strong&gt; commands are present for debugging.  Note that the &lt;strong&gt;mv&lt;/strong&gt; moves the markdown file into my Obsidian vault and names it.  My daily notes all start with a date prefix like 230510 (two digits for year, month, and date), so the date command embedded in the move automatically prefixes the markdown file with the current date in the correct format.&lt;/p&gt;
&lt;h2 id=&#34;automating-the-script&#34;&gt;Automating the script&lt;/h2&gt;
&lt;p&gt;So the script is ready.  I can run it and it will monitor the &lt;em&gt;doc2obs&lt;/em&gt; directory until I stop it or reboot.  The next step is to make this into something that just runs automatically, so I don&amp;rsquo;t have to open a shell and worry about restarting it.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;ll refer back to the process I used in &lt;a href=&#34;http://localhost:1313/posts/230313_blog2obsidian/&#34;&gt;Automatically adding Hugo articles to Obsidian&lt;/a&gt;, which is to use &lt;strong&gt;cron&lt;/strong&gt;.  That script ran periodically and this one runs continuously, so we&amp;rsquo;ll modify the approach to ask &lt;strong&gt;cron&lt;/strong&gt; to run it once at startup.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;crontab -e  # gets us into edit mode
# add below entry
@reboot /home/brent/watch-doc2obs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;things-to-fix&#34;&gt;Things to fix&lt;/h2&gt;
&lt;p&gt;This does what I need it to do, but I have a few ideas about how it could be improved.  I&amp;rsquo;m not sure if I&amp;rsquo;ll ever get to them, but they&amp;rsquo;re worth noting.&lt;/p&gt;
&lt;p&gt;I build daily notes from a template.  The template is essentially some buttons, backlinks, tags, and such.  I may try to add those elements into the markdown output.  Right now my thought is just to append the tags at the end, which would be easy.&lt;/p&gt;
&lt;p&gt;I could build a set of these CI actions.  Sometimes I get business documents and want to read them later on my tablet, so another idea is to setup a directory that converts to PDF or EPUB and emails it to my kindle email address.  This one I really think I&amp;rsquo;ll do, and will probably blog about.&lt;/p&gt;
&lt;p&gt;This version of the script generates an error when the markdown is created because it&amp;rsquo;s created in the directory I&amp;rsquo;m monitoring.  I could maybe just create it straight into my vault, but I&amp;rsquo;d need to handle the date prepending.  That&amp;rsquo;s not a big issue, but it&amp;rsquo;s a bigger issue than just ignoring an error that doesn&amp;rsquo;t really do anything.&lt;/p&gt;
&lt;h2 id=&#34;toodles&#34;&gt;Toodles&lt;/h2&gt;
&lt;p&gt;So that&amp;rsquo;s it.  This is a cool project for Obsidian obsessives (hand raised) because it makes it easy to ingest all the &lt;em&gt;other&lt;/em&gt; documents in our lives.  But the part I&amp;rsquo;m most excited about is that in a clumsy and hacky way, this is a really easy home delivery pipeline that could be adopted for &lt;em&gt;anything&lt;/em&gt; that you want to automate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automaticly adding Hugo articles to Obsidian</title>
      <link>http://localhost:1313/posts/230313_blog2obsidian/</link>
      <pubDate>Mon, 13 Mar 2023 18:08:17 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/230313_blog2obsidian/</guid>
      <description>&lt;h2 id=&#34;incorporating-blog-articles-in-obsidian&#34;&gt;Incorporating blog articles in Obsidian&lt;/h2&gt;
&lt;p&gt;Most of my writing occurs in two places, but I&amp;rsquo;d like to consolidate it into my &amp;ldquo;second brain&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;My blog articles are written in Visual Studio Code, in markdown so that they can be compiled via &lt;a href=&#34;http://localhost:1313/posts/210102_hugoafter6&#34;&gt;hugo&lt;/a&gt;.  I&amp;rsquo;ve discussed in this blog that Obsidian - also in Markdown -  is setup as my &amp;ldquo;second brain&amp;rdquo;.  My blog posts represent an important part of that &amp;ldquo;second brain&amp;rdquo;, so I&amp;rsquo;d like to make sure they&amp;rsquo;re included in my vault.  Since both are markdown, this should be fairly simple.  This should just require that I copy my hugo content directory into my obsidian directory.  To test this, I made a quick script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp ~/git/nextpertise/content/posts/*.md ~/2nd\ Brain/Nextpertise/
echo &amp;quot;blog2obs.sh ran&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also made this file executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x blog2obs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works as expected.  The markdown files are copied from my hugo git directory into my Obsidian vault under the &amp;ldquo;Nextpertise&amp;rdquo; folder.  Obsidian actually updates dynamically as soon as the files are present.  There are some issues - my website has a directory for graphics that I&amp;rsquo;m not copying over, for instance, and the internal linking and tagging I expect in Obsidian wouldn&amp;rsquo;t be present in these files.  External links in the posts seem to work as expected though.  All I need to do is remember to run this occassionally . . .&lt;/p&gt;
&lt;h2 id=&#34;automatically&#34;&gt;Automatically&lt;/h2&gt;
&lt;p&gt;So the next step was to have this run as a &lt;em&gt;cron&lt;/em&gt; job.  On Linux, use &lt;strong&gt;crontab -e&lt;/strong&gt; to setup the job.  Below is the way I have this setup and working.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MAILTO=MYEMAILADDRESS
0 0 * * * /home/brent/blog2obs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/230314_Linux_Email.jpg#floatright&#34; alt=&#34;It works!&#34;&gt;
The five variables before the job are minute, hour, day, month, and day of the week.  So my entry is to run at 00 minutes and 0 hour (midnight) every day.  Cron defaults to outputting to system mail, but I use the MAILTO entry and SSMTP to redirect this to a public email address.  For more information on how to set this up see my &lt;a href=&#34;http://localhost:1313/posts/230313_command_line_email/&#34;&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The received email is on the right, and now it&amp;rsquo;s clear why the &lt;em&gt;echo&lt;/em&gt; command is in the batch file.  The echo provides some text - without that text there&amp;rsquo;s no output from the script and nothing to email.&lt;/p&gt;
&lt;p&gt;There are some possible improvements that might make this worth revisiting in the future.  The simple script doesn&amp;rsquo;t indicate if there was an error copying the files.  I could also imagine inserting links and tags that are used in my Obsidian vault as a header to the imported files.  However, this is a straight-forward process and it&amp;rsquo;s meeting my immediate need.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending Email through Google from the Command Line</title>
      <link>http://localhost:1313/posts/230313_command_line_email/</link>
      <pubDate>Sun, 12 Mar 2023 18:22:33 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/230313_command_line_email/</guid>
      <description>&lt;p&gt;In the course of another project, I recently worked out how to send email through Gmail from the Linux shell.  This is both a really cool and powerful tool as well as something I could see incorporating into a lot of future work.  Since it had such utility, I wanted to document the process for myself and share that with you.&lt;/p&gt;
&lt;p&gt;Some Linux operations, such as cron, will send output to the local mail spooler.  Files sent this way end up in /var/mail/$USER or /var/spool/mail/$USER.  Sendmail can be configured as well so that the output goes to a public email address, however running Sendmail involves a more complication and overhead.  For instance, mail coming from an SMTP server has to be trusted by the receiver and a lot of places (O365, Gmail, etc) don&amp;rsquo;t trust random SMTP servers that pop up - for good reason.&lt;/p&gt;
&lt;p&gt;SSMTP is a program that takes this &amp;ldquo;local mail&amp;rdquo; and sends it to an external SMTP system.  It can be configured to work with any SMTP server, but I use Google Mail and so that&amp;rsquo;s the example I&amp;rsquo;ll walk through.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;SSMTP doesn&amp;rsquo;t have a facility to handle two factor authentication, so before you begin you&amp;rsquo;ll need to generate an app-password at Google.  Log into your Google account, use the menu icon (3x3 squares) to choose &amp;ldquo;account&amp;rdquo;, and 2-step Verification.  App Password setup is at the bottom of the 2FA screen.  To create a new app password, specify the app (I used &amp;ldquo;Linux&amp;rdquo;) and device and choose generate.  You have to copy the password shown - it will never be displayed for you again!  If you forget it, you&amp;rsquo;ll need to follow this procedure to delete the forgotten app password and create a new one.&lt;/p&gt;
&lt;p&gt;On Ubuntu, install ssmtp using apt (no PPA needed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install ssmtp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the SSMTP configuration file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/ssmtp/ssmtp.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My configuration file is shown below and is verified working.  You&amp;rsquo;ll need to change the email address to your gmail address and change the AuthPass line based on the app password you generated earlier.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AuthUser=YOU@YOURCOMPANY.COM
AuthPass=YOURAPPPASSWORD
FromLineOverride=YES
mailhub=smtp.gmail.com:587
UseSTARTTLS=YES
FROM:YOU@YOURCOMPANY.COM
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Once this is complete, an easy way to test is to pipe something to ssmtp as shown below.  In the first example, I&amp;rsquo;m just sending some text.  The trailing email address will be used as the &amp;ldquo;to&amp;rdquo; address.  Leaving off the from address (-au option) will result in a bcc: to test@yourmachine, which will be bounced by Google and give you a successful message (the &amp;ldquo;to&amp;rdquo; line) and a bounce message (from the bcc).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello E-mail!&amp;quot; | ssmtp -au YOU@YOURCOMPANY.COM -s &amp;quot;Test&amp;quot; YOU@YOURCOMPANY.COM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you understand how this works, you can redirect or pipe any output this way.  Here&amp;rsquo;s another simple example that sends a directory output to email.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls | ssmtp -au YOU@YOURCOMPANY.COM -s &amp;quot;Test&amp;quot; YOU@YOURCOMPANY.COM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ll consider as I add devices and services into my home network and lab.  One of the immeadeate ideas that pops up is that I&amp;rsquo;d like my backup job to let me know it completed successfully.  It&amp;rsquo;s a good basic tool to have in the admin tool bag!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command Line Browser Carbonyl</title>
      <link>http://localhost:1313/posts/230305_carbonyl/</link>
      <pubDate>Sun, 05 Mar 2023 21:54:31 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/230305_carbonyl/</guid>
      <description>&lt;p&gt;Not sure where to classify this discovery - Carbonyl is a shell-based brower that is available for Linux, Mac, and Windows.  Carbonyl is built on a Chromium engine and does not support plugins at this point or tie into an existing Chrome installation.&lt;/p&gt;
&lt;p&gt;Carbonyl is fast and it produces a low-res but usable web page.  It is surprisingly responsive - there&amp;rsquo;s a demo of someone playing Doom using it and I watched some Youtube using it.  That&amp;rsquo;s a little hard to visualize, so you may just have to try it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s Carbonyl producing a portion of this site: &lt;img src=&#34;http://localhost:1313/230305_Carbonyl.png&#34; alt=&#34;Carbonyl&#34;&gt;&lt;/p&gt;
&lt;p&gt;Carbonyl is easy to install - just go to the Github assets and grab the version for your OS.  Here&amp;rsquo;s the &lt;a href=&#34;https://github.com/fathyb/carbonyl/releases/tag/v0.0.3&#34;&gt;current version&lt;/a&gt; as of early March 2023.  It extracts to a single file and it can be executed from the command line similar to this example.&lt;/p&gt;
&lt;p&gt;./carbonyl &lt;a href=&#34;https://www.nextpertise.net&#34;&gt;https://www.nextpertise.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Control-C to exit the browser experience.  In the meantime, the mouse can be used to click through links and it interacts exactly like Chrome would.&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;
&lt;p&gt;So, who cares?  Certainly, the Carbonyl experience doesn&amp;rsquo;t match a full browser in terms of resolution or functionality.  I think there are two use cases that are worth considering.  The first is as a demonstration - if a full browser can be supported from the command line, what else is possible?  Are there modalities where web content could be used on the command line?  One possibility that occurs to me is &lt;em&gt;man&lt;/em&gt; pages.  Imagine if the result of typing &amp;ldquo;man ls&amp;rdquo; was a set of linked hypertext, formatted to present cleanly in the shell!&lt;/p&gt;
&lt;p&gt;Carbonyl conceivably has some current advantages as well.  It&amp;rsquo;s a single stand-alone binary, so shouldn&amp;rsquo;t be subject to dependencies or system limitations.  It&amp;rsquo;s small and easily downloaded, installed, and executed.&lt;/p&gt;
&lt;p&gt;Carbonyl doesn&amp;rsquo;t render exactly like a regular browser - I am currently using it to check the rendering of my page and you can&amp;rsquo;t trust the layout and CSS seems to be mostly hit but some miss.  I&amp;rsquo;m unclear if a seperate Chrome binary is good or bad from a security standpoint.  Is it a new attack surface or is it a sand-box to play in?  My gut is to stick it in a container to isolate it from the system.&lt;/p&gt;
&lt;p&gt;As a curiousity, it&amp;rsquo;s interesting.  I can see where there are certain jobs where this could be the right tool.  I&amp;rsquo;m most bullish on how this could be coupled with pages designed for text-rendering to improve the command line experience.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Oh My Posh</title>
      <link>http://localhost:1313/posts/220124_oh_my_posh/</link>
      <pubDate>Tue, 25 Jan 2022 19:05:41 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/220124_oh_my_posh/</guid>
      <description>&lt;p&gt;I really like the powerline-style prompts that jazz up the command line and I&amp;rsquo;d like to be able to carry that experience through from Linux to Windows.  It seems like everytime I install a new systema and think about this, I find another slightly different way to do something similar.  Recently I found &lt;em&gt;Oh My Posh&lt;/em&gt;, which is designed to support Windows, Linux, and MacOS.  The attraction here is that this gives me the prompt style I like from a consolidated source and with a defined way to set it up.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of OMP installed in Linux running inside Tilix.  You can see that it&amp;rsquo;s providing me collapsed directory information, git info, and the time of the last command.  OMP can be customized and the details of that are described extensively in the online docs.
&lt;img src=&#34;http://localhost:1313/omp_tilix.png#center&#34; alt=&#34;Oh My Posh in Tilix on Linux&#34;&gt;
This has some marginal productivity - the Agnoster theme condenses directory structure in a very visible way and helps me understand the state of Git.  Regardless, it looks cool and a little terminal rice establishes some credibility.  If it looks cool to you too, I&amp;rsquo;ve put together some notes on how it&amp;rsquo;s done.  Follow along!&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;p&gt;Installation on Linux involves grabbing the file from Github and making it executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
sudo chmod +x /usr/local/bin/oh-my-posh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, grab the themes JSON collection, uncompress them, and set the permissions appropriately.  With the themes locally stored, you can easily switch as the mode strikes.  Agnoster fits my needs, so that&amp;rsquo;s what is used in the examples, but you can substitute anywhere you see it mentioned.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/.poshthemes
wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip
unzip ~/.poshthemes/themes.zip -d ~/.poshthemes
chmod u+rw ~/.poshthemes/*.json
rm ~/.poshthemes/themes.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, edit ~/.bashrc to run Oh My Posh as part of the shell.  Notice in the code below that I&amp;rsquo;ve specified the &amp;ldquo;agnosterplus&amp;rdquo; layout.  Substitute whichever theme you are interested in there.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval &amp;quot;$(oh-my-posh --init --shell bash --config ~/.poshthemes/agnosterplus.omp.json)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll need to specify the terminal font in your terminal application.  A lot of the styling is done through extra ligatures included in &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd fonts&lt;/a&gt; - font files that are re-compiled to include additional symbols.  Grab a font you like (I&amp;rsquo;m using Meslo in this example, but I&amp;rsquo;m also partial to JetBrains NF) and set it as the default in the terminal profile.&lt;/p&gt;
&lt;p&gt;This setup is used by bash, regardless of the terminal application.  I have Tabby, Tilix, and the included Terminal from Pop! and all three &amp;ldquo;just work&amp;rdquo;.  As mentioned, the only cavaet is getting a good font setup in the terminal profile.&lt;/p&gt;
&lt;h2 id=&#34;windows-powershell&#34;&gt;Windows PowerShell&lt;/h2&gt;
&lt;p&gt;As mentioned, Oh My Posh works swimmingly with PowerShell on Windows.  I have it working in the Powershell terminal and in the Windows Terminal (but recommend the later).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/omp_windows.png&#34; alt=&#34;Om My Posh in Windows Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;OMP can be installed on Windows using PowerShell, &lt;a href=&#34;http://localhost:1313/posts/220118_choco/&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/posts/211228_winget/&#34;&gt;Winget&lt;/a&gt;, or scoop.  I prefer Choco, so that&amp;rsquo;s what is used in the examples below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install oh-my-posh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then edit the profile.  You may get an error because there&amp;rsquo;s not an existing profile.  If so, just create one.  Type &lt;strong&gt;$profile&lt;/strong&gt; in PowerShell to see what the filename and location should be.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notepad $profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add the following into the profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import-Module oh-my-posh
oh-my-posh --init --shell pwsh --config ~/agnosterplus.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, you&amp;rsquo;ll need to use the &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd font&lt;/a&gt; of your choice.  Set this up in the PowerShell Terminal or Microsoft Terminal.  Both apps use the same $profile, so you just need to change the font in the terminal.&lt;/p&gt;
&lt;h2 id=&#34;windows-cmd&#34;&gt;Windows CMD&lt;/h2&gt;
&lt;p&gt;OMP is even available for the traditional command line.  For cmd, install &lt;a href=&#34;https://chrisant996.github.io/clink/&#34;&gt;clink&lt;/a&gt;.  Clink adds some of the editing features of Bash to the traditional CMD.  Download clink and run the installer.  You can verify the installer by running &lt;strong&gt;clink info&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clink info
version  : 1.3.2.222baa
session  : 8504
binaries : C:\Program Files (x86)\clink\1.3.2.222baa
state    : C:\Users\Brent\AppData\Local\clink
    &amp;lt; output trimmed&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create a file called oh-my-posh.lua in your clink directory.  Note that this directory is given from &lt;strong&gt;clink info&lt;/strong&gt;.  The load string below starts OMP - note the theme is specified as well.  This section of text can be replaced if you disagree with me on the theme to be used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notepad AppData\Local\clink\oh-my-posh.lua
    &amp;lt;add this text&amp;gt;
load(io.popen(&#39;oh-my-posh --config=&amp;quot;C:/Users/Brent/.oh-my-posh/themes/agnosterplus.omp.json&amp;quot; --init --shell cmd&#39;):read(&amp;quot;*a&amp;quot;))()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sudo for Windows Powershell</title>
      <link>http://localhost:1313/posts/220124_sudo_on_windows/</link>
      <pubDate>Sun, 23 Jan 2022 18:28:41 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/220124_sudo_on_windows/</guid>
      <description>&lt;p&gt;Some Windows Powershell commands must be run from Powershell running in an administrative context.  It&amp;rsquo;s a little bit of a pain when you need to invoke Powershell this way (right click it in the menu).  The real problem is once there&amp;rsquo;s a terminal up, do you limit this to just the command that requires it or do you just work out of the open (administrative) terminal window?  Choosing to remain in that admin context could lead to trouble.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/sudologo.png#floatsmallleft&#34; alt=&#34;Sudo Logo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-need-for-sudo&#34;&gt;The need for sudo&lt;/h2&gt;
&lt;p&gt;Unix has a nice way of handling this.  The command prompt starts with your user priviledges.  It can be escalated for a single command with &amp;ldquo;sudo&amp;rdquo; - substitute user do.  Wouldn&amp;rsquo;t it be cool (and more secure) if a similar command existed for Powershell on Windows?&lt;/p&gt;
&lt;p&gt;Luke Sampson has a set of powershell scripts that appropximate Linux commands on &lt;a href=&#34;https://github.com/lukesampson/psutils/blob/master/sudo.ps1&#34;&gt;Github&lt;/a&gt;.  These include sudo and are meant to be installed using &lt;em&gt;scoop&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-scoop&#34;&gt;Using Scoop&lt;/h2&gt;
&lt;p&gt;Scoop is an installer, like winget or choco, but it&amp;rsquo;s aimed more at simple installs.  Scoop doesn&amp;rsquo;t require a developer to make a special installer - it can use a ZIP and instructions in a JSON.  These JSON files are stored in buckets - basically these are curated compilations of JSON files stored in a Git.&lt;/p&gt;
&lt;p&gt;Scoop specializes in simple programs, like command-line tools such as sudo.  In fact, many linux-like tools can be easily installed by scoop such as sudo, git, and curl.  Scoop puts everything in your users directory, so it doesn&amp;rsquo;t cause a lot of UAC pop-ups.&lt;/p&gt;
&lt;p&gt;Scoop and sudo can be installed as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# allow powershell scripts
Set-ExecutionPolicy unrestricted
# install scoop
iwr -useb get.scoop.sh |iex
# install sudo 
scoop install sudo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;strong&gt;scoop search&lt;/strong&gt; to see if a program is available through scoop.  Check out the github site to see other buckets that are available as well.&lt;/p&gt;
&lt;h2 id=&#34;using-sudo-in-powershell-for-windows&#34;&gt;Using Sudo in Powershell for Windows&lt;/h2&gt;
&lt;p&gt;Once installed, you can escalate priviledges on a command-by-command basis by prefixing them with &amp;ldquo;sudo&amp;rdquo;, just like you would on Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo set-executionpolicy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey Installer for Windows</title>
      <link>http://localhost:1313/posts/220118_choco/</link>
      <pubDate>Tue, 18 Jan 2022 15:27:47 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/220118_choco/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m setting up a new Windows 10 VM (this time in VMWare) and decided to use Chocolatey to install applications this time, since I tried &lt;em&gt;winget&lt;/em&gt; last time.  I haven&amp;rsquo;t tried Chocolatey in a while, and I&amp;rsquo;ve spent a lot of time exclusively in Linux since then so I was curious what I would make of it, especially in comparison to &lt;a href=&#34;http://localhost:1313/posts/211228_winget/&#34;&gt;Winget&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; is a package manager like apt.  You can use it to search for, install, update, and uninstall programs.  This is particularly useful if you have a &amp;ldquo;standard setup&amp;rdquo; for new computers - it&amp;rsquo;s possible to build a script to install the apps you expect.  Windows Update only covers Microsoft programs, so Chocolatey fills another gap by updating all the programs it installs from the command line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/chco-square.svg#floatsmallleft&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h2&gt;
&lt;p&gt;Chocolatey is free open-souce software that has been around for a while and I&amp;rsquo;ve used it before.  Chocolatey works like &lt;em&gt;apt&lt;/em&gt;, using the &lt;em&gt;choco&lt;/em&gt; command.  You can search for a package, install it, or uninstall it. &lt;em&gt;Choco upgrade&lt;/em&gt; will upgrade all the Chocolatey-managed applications on your system.  This last piece is especially useful, since Windows Update focuses just on Microsoft properties.&lt;/p&gt;
&lt;p&gt;Chocolatey uses the command &lt;em&gt;choco&lt;/em&gt;.  The command sequence below shows looking for all packages in the repository that are include &amp;ldquo;libre&amp;rdquo;.  That allows me to see the name of the LibreWolf package, which I then choose to install.  Finally, the upgrade command can be used to upgrade specific packages or to get them all.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco list libre
choco install librewolf
choco upgrade all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;em&gt;choco list &amp;ndash;local-only&lt;/em&gt; to see a list of programs installed on the local system by choco.  There&amp;rsquo;s also a GUI, installed by &lt;em&gt;choco install chocolateygui&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Choco compares very well to Microsoft&amp;rsquo;s &lt;em&gt;winget&lt;/em&gt;.  The application set available seems a little larger.  Like &lt;em&gt;winget&lt;/em&gt;, choco will be familiar to &lt;em&gt;apt&lt;/em&gt; users (but there are some syntactical differences.  I used winget to easily install Git, WinFSP, SSHFS, the Microsoft Terminal, and Librewolf.   A later upgrade picked up new versions of Librewolf and Git and installed them without difficulty.   &lt;em&gt;Choco&lt;/em&gt; also seemed to apply some KB patches I was missing and even upgraded itself!&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Setup is very easy.  Installation can be done from an administrative powershell using these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy AllSigned
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pretty-solid&#34;&gt;Pretty Solid&lt;/h2&gt;
&lt;p&gt;When I tried winget, I had issues with dependencies.  Chocolatey picked these up and installed without an issue, so Librewolf grabbed the Visual C redistributable module and installed it without prompting, for instance.  &lt;em&gt;Choco&lt;/em&gt; has a wide range of supported applications, particularly if you like to use FOSS.&lt;/p&gt;
&lt;p&gt;The biggest issue with Chocolatey is image.  The name doesn&amp;rsquo;t build credibility, and with Microsoft building a competing product now I expect IT departments to focus on &lt;em&gt;winget&lt;/em&gt;.  That said, &lt;em&gt;choco&lt;/em&gt; is a more complete solution with a bigger catalog as of today and it&amp;rsquo;s definitely the better fit for home.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winget</title>
      <link>http://localhost:1313/posts/211228_winget/</link>
      <pubDate>Tue, 28 Dec 2021 11:46:32 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/211228_winget/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m experimenting with KVM and decided to build a new Windows VM.  I&amp;rsquo;m currently using Pop!_OS 21.10 which uses the 5.15 kernel.  Turns out that breaks Windows on VMWare workstation and it looks like the cause is VMWare not keeping up with the latest kernels.  There are some patches available, but it&amp;rsquo;s the week between Christmas and New Years and seemed like a good chance to review the FOSS alternative.&lt;/p&gt;
&lt;p&gt;Part of my troubleshooting process on Linux was to make sure that I haven&amp;rsquo;t made a change that&amp;rsquo;s impacting VMWare.  Pop! has a really cool feature that will roll-back to a clean install, but leave your personal files.  Reinstalling missing applications is pretty easy in linux.  Installing hugo again is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h2&gt;
&lt;p&gt;Chocolatey is free open-souce software that has been around for a while and I&amp;rsquo;ve used it before.  Chocolatey works like &lt;em&gt;apt&lt;/em&gt;, using the &lt;em&gt;choco&lt;/em&gt; command.  You can search for a package, install it, or uninstall it. &lt;em&gt;Choco upgrade&lt;/em&gt; will upgrade all the Chocolatey-managed applications on your system.  This last piece is especially useful, since Windows Update focuses just on Microsoft properties.&lt;/p&gt;
&lt;h2 id=&#34;winget&#34;&gt;Winget&lt;/h2&gt;
&lt;p&gt;Microsoft has developed a similar tool called &lt;em&gt;winget&lt;/em&gt;.  I have a bias toward open source, but my job is in a corporate Windows environment.  I&amp;rsquo;m not sure that I could get Chocolatey in the door, but Winget might be something that could be used.  I decided to give it a whirl in this VM and try to get some experience.&lt;/p&gt;
&lt;p&gt;Installation is a little non-obvious.  If you go to the &lt;a href=&#34;https://github.com/microsoft/winget-cli/&#34;&gt;Github page&lt;/a&gt;, it recommends installation through the Windows Store.  However, I searched the store and didn&amp;rsquo;t find anything.  Instead, I downloaded the &lt;strong&gt;msixbundle&lt;/strong&gt; file from the latest release and ran it.&lt;/p&gt;
&lt;p&gt;Winget will be intuitive for apt users.  &lt;strong&gt;Winget search libre&lt;/strong&gt; showed me available applications with &lt;em&gt;libre&lt;/em&gt; in the title including LibreOffice and Librewolf.  &lt;strong&gt;Winget install librewolf&lt;/strong&gt; installed the firefox-based web browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/211228_Winget.png&#34; alt=&#34;Winget Example&#34;&gt;&lt;/p&gt;
&lt;p&gt;One of the best features of apt is the easy way that components are upgraded.  Running &lt;strong&gt;winget upgrade&lt;/strong&gt; will list installed applications that have an upgrade avaialable.  It even caught an application I did not install with winget!  &lt;strong&gt;Winget upgrade &amp;ndash;all&lt;/strong&gt; will install all available upgrades.  You can also specify specific applications that you want to upgrade.&lt;/p&gt;
&lt;h2 id=&#34;not-baked-yet&#34;&gt;Not baked yet&lt;/h2&gt;
&lt;p&gt;I identified three issues in my early experimentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apt&lt;/strong&gt; will identify dependencies and include them during the application installation.  Librewolf completed installation without an error, but wouldn&amp;rsquo;t run without the &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;Visual C redistributable module&lt;/a&gt;.  &lt;strong&gt;Winget search&lt;/strong&gt; didn&amp;rsquo;t turn up a way to install the dependency, so I installed it directly from the Microsoft site.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that winget identified upgrades even for applications it didn&amp;rsquo;t install.  That true and would be an enormous advantage of the tool.  But . . . it didn&amp;rsquo;t work.  The upgrade failed and pointed me to a log.  The log showed that the service needed to be stopped before upgrading.  Once I stopped the service and re-ran the &lt;strong&gt;winget upgrade &amp;ndash;all&lt;/strong&gt; command, the process completed successfully.&lt;/p&gt;
&lt;p&gt;Winget doesn&amp;rsquo;t get a &amp;ldquo;half-point&amp;rdquo; with the upgrade problem.  Instead of a simple update, this requires that I identify and shutdown services before running the upgrade, then manually restart them.  It&amp;rsquo;s doable, but far from the easy process that is expected on Linux.&lt;/p&gt;
&lt;p&gt;The third issue I found was that the Windows Decrapifier wasn&amp;rsquo;t included in winget.  Is this because the pool of installable applications is comparitvely shallow?  This seems reasonable since it&amp;rsquo;s a relatively new project.  You can see the complete list of currently supported applications (here)[https://github.com/microsoft/winget-pkgs/tree/master/manifests/d].  Is the lack of the decrapifier an editorial decision?  Possibly, but if so it portends an anemic future for the tool.&lt;/p&gt;
&lt;p&gt;##So?
Winget shows promise and it&amp;rsquo;s worth keeping an eye on.  But I won&amp;rsquo;t be recommending it to the end-user support group today.  Give me dependency recognition, easy upgrading, and broader support and this will be a standard part of the tool bag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tsukae - A tool for graphing command usage</title>
      <link>http://localhost:1313/posts/210306_tsukae/</link>
      <pubDate>Sat, 06 Mar 2021 22:59:08 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/210306_tsukae/</guid>
      <description>&lt;p&gt;Readers may recall that six months ago I wrote about the &lt;a href=&#34;http://localhost:1313/posts/200817_mostcommonlinuxcommand/&#34;&gt;most commonly used Linux commands&lt;/a&gt;.  I had seen a series of articles with that title and decided to see what my most common commands were.  I suggested the following as a way to pull command history and count usage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;history | awk ‘&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;print $2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;’ | sort | uniq -c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/irevenko/tsukae&#34;&gt;Tsukae&lt;/a&gt; is a much better way to accomplish this task.  It&amp;rsquo;s much simpler and can produce the output in Bar or Pie chart, or as a list.  Tsukae is written by Ilya Revenko and can be cloned from GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/tsukae.gif&#34; alt=&#34;Tsukae Demo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-tsukae&#34;&gt;Installing Tsukae&lt;/h2&gt;
&lt;p&gt;Tsukae needs Go to run (&lt;strong&gt;apt install golang-go&lt;/strong&gt;).  Once cloned, just go into the directory and build the executable.  Tsukae expects a &lt;em&gt;blacklist&lt;/em&gt; file to be present at &lt;em&gt;~/.config/tsukae/blacklist&lt;/em&gt;.  &lt;del&gt;This may be created automatically in future releases, but I got an error when I first ran the program and so created the file myself.&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/irevenko/tsukae.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd tsukae  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get -d ./...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~~mkdir ~/.config/tsukae  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch blacklist~~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Update!&lt;/strong&gt;  I posted an issue for the above on GitHub and the author published an update today to fix.  I tested it and confirmed it resolved the issue.  This is a great example of the power of GitHub - everyone contributes in whatever way they can, and all contributions are appreciated.  In my case, by suggesting an improvement and helping test.  It&amp;rsquo;s why I continue to recommend that everyone participate in that community.  And thanks again to Ilya!&lt;/p&gt;
&lt;h2 id=&#34;running-tsukae&#34;&gt;Running Tsukae&lt;/h2&gt;
&lt;p&gt;When you run Tsukae you must specify the shell, as well as the number of commands to pull.  In the example below, I&amp;rsquo;ve gotten the top six bash commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./tsukae bash &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; Most Used bash Commands  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;255&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;148&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; apt  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;148&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; cd  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;107&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ls  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;74&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; hugo  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; nano  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Commands list &lt;em&gt;cd&lt;/em&gt; and &lt;em&gt;ls&lt;/em&gt; might be uninteresting.  Adding those to the &lt;em&gt;blacklist&lt;/em&gt; text file will omit them in the future.&lt;/p&gt;
&lt;p&gt;Git is a weird command to run most often, but I tend to run it a lot to sync the blog and upload new content.  I use the hugo command in development mode at the same time.  Tsukae is an interesting insight into how I&amp;rsquo;m using this computer.  It&amp;rsquo;s not a vital command to accomplish work, but the next time you see one of those &amp;ldquo;Top 25 Linux Command&amp;rdquo; articles you can see how closely their list matches yours.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
